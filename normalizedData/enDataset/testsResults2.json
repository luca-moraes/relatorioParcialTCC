[
    {
        "answer_number": 2552,
        "answer_values": {
            "number_question": 58,
            "answer_question": "Best case - 1 Worst Case - N",
            "grade": 2.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.0625,
        "bert_score": 4.819613397121429,
        "nota_atribuida": 3.6955431119555113,
        "percentual_error": 0.45880755834514075
    },
    {
        "answer_number": 2553,
        "answer_values": {
            "number_question": 58,
            "answer_question": "It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted",
            "grade": 5.0
        },
        "frequence_similarity": 3.964129017705682,
        "liv_distance": 0,
        "bert_score": 4.921205639839172,
        "nota_atribuida": 5.771074501236455,
        "percentual_error": 0.1336102143667096
    },
    {
        "answer_number": 2554,
        "answer_values": {
            "number_question": 58,
            "answer_question": "O - LRB - n - RRB -",
            "grade": 3.5
        },
        "frequence_similarity": 3.3838834764831844,
        "liv_distance": 1.125,
        "bert_score": 4.857306182384491,
        "nota_atribuida": 4.667736720694038,
        "percentual_error": 0.2501719335447886
    },
    {
        "answer_number": 2555,
        "answer_values": {
            "number_question": 58,
            "answer_question": "Best case is all elements sorted n minus 1",
            "grade": 4.0
        },
        "frequence_similarity": 2.736227795630767,
        "liv_distance": 1.0625,
        "bert_score": 4.910984039306641,
        "nota_atribuida": 3.98414993696757,
        "percentual_error": 0.0039625157581074655
    },
    {
        "answer_number": 2556,
        "answer_values": {
            "number_question": 58,
            "answer_question": "The best case scenario for an insertion sort where all the elements of the array have been already sorted will cause the for loop to iterate x times - LRB - x being the number of elements in the array - RRB - and the while loop to never have to iterate resulting in the insertion sort to require x operations",
            "grade": 5.0
        },
        "frequence_similarity": 3.968567377019206,
        "liv_distance": 0,
        "bert_score": 4.850573241710663,
        "nota_atribuida": 5.756680043320297,
        "percentual_error": 0.13144382484802197
    },
    {
        "answer_number": 2557,
        "answer_values": {
            "number_question": 58,
            "answer_question": "1 operation the best case scenario s where it is already sorted and does one comparision",
            "grade": 3.0
        },
        "frequence_similarity": 3.001114828585796,
        "liv_distance": 0.875,
        "bert_score": 4.88048642873764,
        "nota_atribuida": 4.344421295999928,
        "percentual_error": 0.3094592362020201
    },
    {
        "answer_number": 2558,
        "answer_values": {
            "number_question": 58,
            "answer_question": "n operations where n is the number of items",
            "grade": 4.0
        },
        "frequence_similarity": 3.444911182523068,
        "liv_distance": 1.125,
        "bert_score": 4.896754026412964,
        "nota_atribuida": 4.746635649327081,
        "percentual_error": 0.15729786410569135
    },
    {
        "answer_number": 2559,
        "answer_values": {
            "number_question": 58,
            "answer_question": "n minus 1",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.375,
        "bert_score": 4.823955595493317,
        "nota_atribuida": 3.9646467600718744,
        "percentual_error": 0.11719751801127698
    },
    {
        "answer_number": 2560,
        "answer_values": {
            "number_question": 58,
            "answer_question": "O - LRB - n - RRB - the list is already sorted",
            "grade": 4.5
        },
        "frequence_similarity": 3.681138978153835,
        "liv_distance": 1.9375,
        "bert_score": 4.896868467330933,
        "nota_atribuida": 4.6936207706862865,
        "percentual_error": 0.041251899151191096
    },
    {
        "answer_number": 2561,
        "answer_values": {
            "number_question": 58,
            "answer_question": "Insertion sort will take n minus 1 operations if the array is in reverse order",
            "grade": 4.0
        },
        "frequence_similarity": 3.3667190566019207,
        "liv_distance": 1.25,
        "bert_score": 4.891964942216873,
        "nota_atribuida": 4.609366488208093,
        "percentual_error": 0.13220178733173082
    },
    {
        "answer_number": 2562,
        "answer_values": {
            "number_question": 58,
            "answer_question": "In the best case scenario of an already sorted list insertion sort will progress once through the list So the number of operations is directly proportional to the number of elements in the list Also noted as O - LRB - n - RRB - in big o notation",
            "grade": 5.0
        },
        "frequence_similarity": 3.6733349645452447,
        "liv_distance": 0,
        "bert_score": 4.903821796178818,
        "nota_atribuida": 5.441848903130839,
        "percentual_error": 0.08119462906745378
    },
    {
        "answer_number": 2563,
        "answer_values": {
            "number_question": 58,
            "answer_question": "1 where there is a list of two ints and only one must be moved",
            "grade": 2.5
        },
        "frequence_similarity": 2.673343811320384,
        "liv_distance": 1.3125,
        "bert_score": 4.873001873493195,
        "nota_atribuida": 3.8061578802949043,
        "percentual_error": 0.3431696533286481
    },
    {
        "answer_number": 2564,
        "answer_values": {
            "number_question": 58,
            "answer_question": "Best case is N while the worst case is N factorial",
            "grade": 3.0
        },
        "frequence_similarity": 2.8466876226407685,
        "liv_distance": 1.25,
        "bert_score": 4.879139959812164,
        "nota_atribuida": 4.025609651310045,
        "percentual_error": 0.2547712620314002
    },
    {
        "answer_number": 2565,
        "answer_values": {
            "number_question": 58,
            "answer_question": "n minus 1 The best case is when the array is already sorted",
            "grade": 4.5
        },
        "frequence_similarity": 3.62962014264383,
        "liv_distance": 1.6875,
        "bert_score": 4.897728860378265,
        "nota_atribuida": 4.733795802170408,
        "percentual_error": 0.04938865382896629
    },
    {
        "answer_number": 2566,
        "answer_values": {
            "number_question": 58,
            "answer_question": "worst case its equals O - LRB - n - RRB - time best case its equals O - LRB - n to the power of 2 - RRB - time",
            "grade": 3.0
        },
        "frequence_similarity": 3.298762063028367,
        "liv_distance": 0,
        "bert_score": 4.869247525930405,
        "nota_atribuida": 5.014435427772477,
        "percentual_error": 0.4017272645721023
    },
    {
        "answer_number": 2567,
        "answer_values": {
            "number_question": 58,
            "answer_question": "O - LRB - n - RRB -",
            "grade": 3.5
        },
        "frequence_similarity": 3.3838834764831844,
        "liv_distance": 1.125,
        "bert_score": 4.857306182384491,
        "nota_atribuida": 4.667736720694038,
        "percentual_error": 0.2501719335447886
    },
    {
        "answer_number": 2568,
        "answer_values": {
            "number_question": 58,
            "answer_question": "N number of times Where N equals the number of elements in the list Best - case scenario is that the elements in the list are already sorted",
            "grade": 5.0
        },
        "frequence_similarity": 3.502821816548025,
        "liv_distance": 0,
        "bert_score": 4.920429885387421,
        "nota_atribuida": 5.2561417321628126,
        "percentual_error": 0.048731892177765634
    },
    {
        "answer_number": 2569,
        "answer_values": {
            "number_question": 58,
            "answer_question": "the best case scenario for insertion sort is a list that is already sorted the number of operations would be the same as the number of elements",
            "grade": 5.0
        },
        "frequence_similarity": 3.724889837347165,
        "liv_distance": 0,
        "bert_score": 4.90859642624855,
        "nota_atribuida": 5.500680932473646,
        "percentual_error": 0.0910216277984498
    },
    {
        "answer_number": 2570,
        "answer_values": {
            "number_question": 58,
            "answer_question": "insertion sort will make zero operations - LRB - and length 1 comparisons - RRB - in the best case scenario that is when the array its given is already in order",
            "grade": 3.5
        },
        "frequence_similarity": 3.5879853497231116,
        "liv_distance": 0,
        "bert_score": 4.890511631965637,
        "nota_atribuida": 5.342971217675443,
        "percentual_error": 0.34493377235096945
    },
    {
        "answer_number": 2571,
        "answer_values": {
            "number_question": 58,
            "answer_question": "theta - LRB - n - RRB - the best case senario is that everything is already sorted",
            "grade": 4.5
        },
        "frequence_similarity": 3.3068715304598784,
        "liv_distance": 1.375,
        "bert_score": 4.901220798492432,
        "nota_atribuida": 4.496412990950119,
        "percentual_error": 0.0007971131221958805
    },
    {
        "answer_number": 2572,
        "answer_values": {
            "number_question": 58,
            "answer_question": "n operations The best case scenario is when all the numbers are in increasing order",
            "grade": 5.0
        },
        "frequence_similarity": 3.28125,
        "liv_distance": 1.0,
        "bert_score": 4.880542308092117,
        "nota_atribuida": 4.608295917024731,
        "percentual_error": 0.07834081659505387
    },
    {
        "answer_number": 2573,
        "answer_values": {
            "number_question": 58,
            "answer_question": "it could be considered that having only one item would be the easiest to sort but this could also be a trivial result as nothing is moved having two items allows the algorithm to sort the items into the correct order",
            "grade": 2.5
        },
        "frequence_similarity": 3.1063390625908327,
        "liv_distance": 0,
        "bert_score": 4.876986593008041,
        "nota_atribuida": 4.801852253671993,
        "percentual_error": 0.4793675715265414
    },
    {
        "answer_number": 2574,
        "answer_values": {
            "number_question": 58,
            "answer_question": "the best case is if it only has to look through the list once The best case scenario is when it goes through the list and does not have to make any changes - LRB - the list is already sorted - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.397256149358128,
        "liv_distance": 0,
        "bert_score": 4.9083563685417175,
        "nota_atribuida": 5.135045977707195,
        "percentual_error": 0.22103910707611518
    },
    {
        "answer_number": 2575,
        "answer_values": {
            "number_question": 58,
            "answer_question": "very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over best case is - LRB - 0 - RRB - 1",
            "grade": 2.5
        },
        "frequence_similarity": 2.9490132550669372,
        "liv_distance": 0,
        "bert_score": 4.89271342754364,
        "nota_atribuida": 4.630617955419482,
        "percentual_error": 0.46011525371595297
    },
    {
        "answer_number": 2576,
        "answer_values": {
            "number_question": 59,
            "answer_question": "The best case is the same as the worst case O - LRB - n log n - RRB - for a recursive merge sort",
            "grade": 2.0
        },
        "frequence_similarity": 3.661895003862225,
        "liv_distance": 0.46153846153846156,
        "bert_score": 4.932413548231125,
        "nota_atribuida": 5.257057292630936,
        "percentual_error": 0.6195590253879306
    },
    {
        "answer_number": 2577,
        "answer_values": {
            "number_question": 59,
            "answer_question": "O - LRB - nlog - LRB - n - RRB - - RRB -",
            "grade": 2.5
        },
        "frequence_similarity": 3.3606629658238703,
        "liv_distance": 1.7692307692307692,
        "bert_score": 4.874077141284943,
        "nota_atribuida": 4.395368726587809,
        "percentual_error": 0.43121950500367057
    },
    {
        "answer_number": 2578,
        "answer_values": {
            "number_question": 59,
            "answer_question": "If the array being sorted has 0 or 1 elements",
            "grade": 4.5
        },
        "frequence_similarity": 3.641088661469096,
        "liv_distance": 1.9230769230769231,
        "bert_score": 4.929742515087128,
        "nota_atribuida": 4.6635581896261495,
        "percentual_error": 0.035071544725222115
    },
    {
        "answer_number": 2579,
        "answer_values": {
            "number_question": 59,
            "answer_question": "T - LRB - n - RRB - equals 0 if n is less than 2",
            "grade": 4.0
        },
        "frequence_similarity": 3.2319250547114,
        "liv_distance": 1.1538461538461537,
        "bert_score": 4.906364977359772,
        "nota_atribuida": 4.500379981508838,
        "percentual_error": 0.11118616284953708
    },
    {
        "answer_number": 2580,
        "answer_values": {
            "number_question": 59,
            "answer_question": "O - LRB - nlog - LRB - n - RRB - - RRB -",
            "grade": 2.0
        },
        "frequence_similarity": 3.3606629658238703,
        "liv_distance": 1.7692307692307692,
        "bert_score": 4.874077141284943,
        "nota_atribuida": 4.395368726587809,
        "percentual_error": 0.5449756040029365
    },
    {
        "answer_number": 2581,
        "answer_values": {
            "number_question": 59,
            "answer_question": "n multiplied by log - LRB - n - RRB -",
            "grade": 2.0
        },
        "frequence_similarity": 3.077350269189626,
        "liv_distance": 1.9230769230769231,
        "bert_score": 4.8898617923259735,
        "nota_atribuida": 4.023622963978574,
        "percentual_error": 0.502935533993873
    },
    {
        "answer_number": 2582,
        "answer_values": {
            "number_question": 59,
            "answer_question": "where you only must merge sort once",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.3076923076923077,
        "bert_score": 4.858842641115189,
        "nota_atribuida": 3.6107384309862818,
        "percentual_error": 0.03066919221729203
    },
    {
        "answer_number": 2583,
        "answer_values": {
            "number_question": 59,
            "answer_question": "if the array length is less than or equal to 1 then that array is returned to the other array and merged together",
            "grade": 4.5
        },
        "frequence_similarity": 3.8284223283101424,
        "liv_distance": 0,
        "bert_score": 4.924854189157486,
        "nota_atribuida": 5.620654191525796,
        "percentual_error": 0.19938145157825138
    },
    {
        "answer_number": 2584,
        "answer_values": {
            "number_question": 59,
            "answer_question": "if - LRB - right is greater than left - RRB - mid equals - LRB - right plus left - RRB - divided by 2; m sort - LRB - numbers temp left mid - RRB - ; m sort - LRB - numbers temp mid plus 1 right - RRB - ; merge - LRB - numbers temp left mid plus 1 right - RRB - ;",
            "grade": 2.0
        },
        "frequence_similarity": 3.1066340463409947,
        "liv_distance": 0,
        "bert_score": 4.7894832491874695,
        "nota_atribuida": 4.778213601188554,
        "percentual_error": 0.5814335299906829
    },
    {
        "answer_number": 2585,
        "answer_values": {
            "number_question": 59,
            "answer_question": "When there is only one element in the array or when the starting element in the array is the same as the ending element",
            "grade": 4.5
        },
        "frequence_similarity": 3.940884945194222,
        "liv_distance": 0,
        "bert_score": 4.9355460703372955,
        "nota_atribuida": 5.749067028514604,
        "percentual_error": 0.2172643008542775
    },
    {
        "answer_number": 2586,
        "answer_values": {
            "number_question": 59,
            "answer_question": "when each half or the original array has nothing else to sort and puts the halfs back together",
            "grade": 2.5
        },
        "frequence_similarity": 3.6547005383792515,
        "liv_distance": 0.3076923076923077,
        "bert_score": 4.882437288761139,
        "nota_atribuida": 5.295293799339614,
        "percentual_error": 0.5278826643553225
    },
    {
        "answer_number": 2587,
        "answer_values": {
            "number_question": 59,
            "answer_question": "the size of the list being sent is is less than or equal to 1",
            "grade": 4.5
        },
        "frequence_similarity": 4.0214515486254605,
        "liv_distance": 2.076923076923077,
        "bert_score": 4.903772473335266,
        "nota_atribuida": 5.020895684313626,
        "percentual_error": 0.10374556992709838
    },
    {
        "answer_number": 2588,
        "answer_values": {
            "number_question": 59,
            "answer_question": "O - LRB - n log n - RRB -",
            "grade": 2.0
        },
        "frequence_similarity": 3.24535599249993,
        "liv_distance": 1.2307692307692308,
        "bert_score": 4.908598363399506,
        "nota_atribuida": 4.486001355202968,
        "percentual_error": 0.5541686589817112
    },
    {
        "answer_number": 2589,
        "answer_values": {
            "number_question": 59,
            "answer_question": "The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is",
            "grade": 5.0
        },
        "frequence_similarity": 3.242833629961516,
        "liv_distance": 0,
        "bert_score": 4.918641149997711,
        "nota_atribuida": 4.965560511518857,
        "percentual_error": 0.006887897696228662
    },
    {
        "answer_number": 2590,
        "answer_values": {
            "number_question": 59,
            "answer_question": "The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements",
            "grade": 5.0
        },
        "frequence_similarity": 3.4759000729485336,
        "liv_distance": 0,
        "bert_score": 4.919669330120087,
        "nota_atribuida": 5.2258944962518505,
        "percentual_error": 0.04322599631773427
    },
    {
        "answer_number": 2591,
        "answer_values": {
            "number_question": 59,
            "answer_question": "The base case for a recursive implementation of merge sort is one",
            "grade": 5.0
        },
        "frequence_similarity": 3.278498944161523,
        "liv_distance": 1.1538461538461537,
        "bert_score": 4.886997789144516,
        "nota_atribuida": 4.54704168096218,
        "percentual_error": 0.090591663807564
    },
    {
        "answer_number": 2592,
        "answer_values": {
            "number_question": 59,
            "answer_question": "The best case is the same as the worst case O - LRB - n log n - RRB - for a recursive merge sort",
            "grade": 2.0
        },
        "frequence_similarity": 3.661895003862225,
        "liv_distance": 0.46153846153846156,
        "bert_score": 4.932413548231125,
        "nota_atribuida": 5.257057292630936,
        "percentual_error": 0.6195590253879306
    },
    {
        "answer_number": 2593,
        "answer_values": {
            "number_question": 59,
            "answer_question": "there is one object in the split array to sort",
            "grade": 5.0
        },
        "frequence_similarity": 3.5206207261596574,
        "liv_distance": 1.3846153846153846,
        "bert_score": 4.859475195407867,
        "nota_atribuida": 4.719729956630538,
        "percentual_error": 0.05605400867389232
    },
    {
        "answer_number": 2594,
        "answer_values": {
            "number_question": 59,
            "answer_question": "The base case is when the length of the current array is 1",
            "grade": 5.0
        },
        "frequence_similarity": 4.087713240271471,
        "liv_distance": 1.3846153846153846,
        "bert_score": 4.9431295692920685,
        "nota_atribuida": 5.375397581607909,
        "percentual_error": 0.06983624483746909
    },
    {
        "answer_number": 2595,
        "answer_values": {
            "number_question": 59,
            "answer_question": "O - LRB - nlog - LRB - n - RRB - - RRB -",
            "grade": 2.5
        },
        "frequence_similarity": 3.3606629658238703,
        "liv_distance": 1.7692307692307692,
        "bert_score": 4.874077141284943,
        "nota_atribuida": 4.395368726587809,
        "percentual_error": 0.43121950500367057
    },
    {
        "answer_number": 2596,
        "answer_values": {
            "number_question": 59,
            "answer_question": "Best case is one element One element is sorted",
            "grade": 5.0
        },
        "frequence_similarity": 3.0,
        "liv_distance": 1.3076923076923077,
        "bert_score": 4.875785708427429,
        "nota_atribuida": 4.17327243992281,
        "percentual_error": 0.165345512015438
    },
    {
        "answer_number": 2597,
        "answer_values": {
            "number_question": 59,
            "answer_question": "If the array being sorted has 0 or 1 elements",
            "grade": 4.5
        },
        "frequence_similarity": 3.641088661469096,
        "liv_distance": 1.9230769230769231,
        "bert_score": 4.929742515087128,
        "nota_atribuida": 4.6635581896261495,
        "percentual_error": 0.035071544725222115
    },
    {
        "answer_number": 2598,
        "answer_values": {
            "number_question": 59,
            "answer_question": "T - LRB - n - RRB - equals 0 if n is less than 2",
            "grade": 4.0
        },
        "frequence_similarity": 3.2319250547114,
        "liv_distance": 1.1538461538461537,
        "bert_score": 4.906364977359772,
        "nota_atribuida": 4.500379981508838,
        "percentual_error": 0.11118616284953708
    },
    {
        "answer_number": 2599,
        "answer_values": {
            "number_question": 59,
            "answer_question": "A list size of 1 where it is already sorted",
            "grade": 5.0
        },
        "frequence_similarity": 3.412870929175277,
        "liv_distance": 1.6153846153846154,
        "bert_score": 4.91337776184082,
        "nota_atribuida": 4.524339228914822,
        "percentual_error": 0.09513215421703569
    },
    {
        "answer_number": 2600,
        "answer_values": {
            "number_question": 59,
            "answer_question": "Single element in the array",
            "grade": 5.0
        },
        "frequence_similarity": 3.3660254037844384,
        "liv_distance": 0.9230769230769231,
        "bert_score": 4.808951318264008,
        "nota_atribuida": 4.713254296623677,
        "percentual_error": 0.05734914067526464
    },
    {
        "answer_number": 2601,
        "answer_values": {
            "number_question": 59,
            "answer_question": "O - LRB - nlog - LRB - n - RRB - - RRB -",
            "grade": 2.0
        },
        "frequence_similarity": 3.3606629658238703,
        "liv_distance": 1.7692307692307692,
        "bert_score": 4.874077141284943,
        "nota_atribuida": 4.395368726587809,
        "percentual_error": 0.5449756040029365
    },
    {
        "answer_number": 2602,
        "answer_values": {
            "number_question": 59,
            "answer_question": "n multiplied by log - LRB - n - RRB -",
            "grade": 2.0
        },
        "frequence_similarity": 3.077350269189626,
        "liv_distance": 1.9230769230769231,
        "bert_score": 4.8898617923259735,
        "nota_atribuida": 4.023622963978574,
        "percentual_error": 0.502935533993873
    },
    {
        "answer_number": 2603,
        "answer_values": {
            "number_question": 59,
            "answer_question": "A list or array of only 1 element",
            "grade": 5.0
        },
        "frequence_similarity": 3.290569415042095,
        "liv_distance": 1.3076923076923077,
        "bert_score": 4.872546344995499,
        "nota_atribuida": 4.496598546046044,
        "percentual_error": 0.10068029079079133
    },
    {
        "answer_number": 2604,
        "answer_values": {
            "number_question": 59,
            "answer_question": "where you only must merge sort once",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.3076923076923077,
        "bert_score": 4.858842641115189,
        "nota_atribuida": 3.6107384309862818,
        "percentual_error": 0.03066919221729203
    },
    {
        "answer_number": 2605,
        "answer_values": {
            "number_question": 59,
            "answer_question": "A single Element on the Array",
            "grade": 5.0
        },
        "frequence_similarity": 3.3660254037844384,
        "liv_distance": 0.8461538461538461,
        "bert_score": 4.780142307281494,
        "nota_atribuida": 4.735339726532289,
        "percentual_error": 0.05293205469354212
    },
    {
        "answer_number": 2606,
        "answer_values": {
            "number_question": 59,
            "answer_question": "There is only one element in the subarray",
            "grade": 5.0
        },
        "frequence_similarity": 3.1846531968814573,
        "liv_distance": 1.3076923076923077,
        "bert_score": 4.885909557342529,
        "nota_atribuida": 4.38207895354027,
        "percentual_error": 0.12358420929194602
    },
    {
        "answer_number": 2607,
        "answer_values": {
            "number_question": 59,
            "answer_question": "if the array length is less than or equal to 1 then that array is returned to the other array and merged together",
            "grade": 4.5
        },
        "frequence_similarity": 3.8284223283101424,
        "liv_distance": 0,
        "bert_score": 4.924854189157486,
        "nota_atribuida": 5.620654191525796,
        "percentual_error": 0.19938145157825138
    },
    {
        "answer_number": 2608,
        "answer_values": {
            "number_question": 59,
            "answer_question": "if - LRB - right is greater than left - RRB - mid equals - LRB - right plus left - RRB - divided by 2; m sort - LRB - numbers temp left mid - RRB - ; m sort - LRB - numbers temp mid plus 1 right - RRB - ; merge - LRB - numbers temp left mid plus 1 right - RRB - ;",
            "grade": 2.0
        },
        "frequence_similarity": 3.1066340463409947,
        "liv_distance": 0,
        "bert_score": 4.7894832491874695,
        "nota_atribuida": 4.778213601188554,
        "percentual_error": 0.5814335299906829
    },
    {
        "answer_number": 2609,
        "answer_values": {
            "number_question": 59,
            "answer_question": "The sequence of numbers has zero or one elements",
            "grade": 5.0
        },
        "frequence_similarity": 3.3606629658238703,
        "liv_distance": 1.2307692307692308,
        "bert_score": 4.860498458147049,
        "nota_atribuida": 4.6014843957839675,
        "percentual_error": 0.07970312084320652
    },
    {
        "answer_number": 2610,
        "answer_values": {
            "number_question": 59,
            "answer_question": "one element in an array",
            "grade": 5.0
        },
        "frequence_similarity": 2.788675134594813,
        "liv_distance": 0.9230769230769231,
        "bert_score": 4.7879549860954285,
        "nota_atribuida": 4.0633036939048806,
        "percentual_error": 0.1873392612190239
    },
    {
        "answer_number": 2611,
        "answer_values": {
            "number_question": 59,
            "answer_question": "array of length 1",
            "grade": 5.0
        },
        "frequence_similarity": 3.24535599249993,
        "liv_distance": 0.8461538461538461,
        "bert_score": 4.838361442089081,
        "nota_atribuida": 4.616645080105804,
        "percentual_error": 0.0766709839788392
    },
    {
        "answer_number": 2612,
        "answer_values": {
            "number_question": 59,
            "answer_question": "the array has one element",
            "grade": 5.0
        },
        "frequence_similarity": 3.3660254037844384,
        "liv_distance": 1.0769230769230769,
        "bert_score": 4.873788207769394,
        "nota_atribuida": 4.6710607362248115,
        "percentual_error": 0.06578785275503773
    },
    {
        "answer_number": 2613,
        "answer_values": {
            "number_question": 59,
            "answer_question": "When there is only one element in the array or when the starting element in the array is the same as the ending element",
            "grade": 4.5
        },
        "frequence_similarity": 3.940884945194222,
        "liv_distance": 0,
        "bert_score": 4.9355460703372955,
        "nota_atribuida": 5.749067028514604,
        "percentual_error": 0.2172643008542775
    },
    {
        "answer_number": 2614,
        "answer_values": {
            "number_question": 59,
            "answer_question": "when each half or the original array has nothing else to sort and puts the halfs back together",
            "grade": 2.5
        },
        "frequence_similarity": 3.6547005383792515,
        "liv_distance": 0.3076923076923077,
        "bert_score": 4.882437288761139,
        "nota_atribuida": 5.295293799339614,
        "percentual_error": 0.5278826643553225
    },
    {
        "answer_number": 2615,
        "answer_values": {
            "number_question": 59,
            "answer_question": "the size of the list being sent is is less than or equal to 1",
            "grade": 4.5
        },
        "frequence_similarity": 4.0214515486254605,
        "liv_distance": 2.076923076923077,
        "bert_score": 4.903772473335266,
        "nota_atribuida": 5.020895684313626,
        "percentual_error": 0.10374556992709838
    },
    {
        "answer_number": 2616,
        "answer_values": {
            "number_question": 59,
            "answer_question": "O - LRB - n log n - RRB -",
            "grade": 2.0
        },
        "frequence_similarity": 3.24535599249993,
        "liv_distance": 1.2307692307692308,
        "bert_score": 4.908598363399506,
        "nota_atribuida": 4.486001355202968,
        "percentual_error": 0.5541686589817112
    },
    {
        "answer_number": 2617,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns the place in memory of that element",
            "grade": 4.0
        },
        "frequence_similarity": 3.5825317547305486,
        "liv_distance": 0.15151515151515152,
        "bert_score": 4.899478703737259,
        "nota_atribuida": 5.280297844411565,
        "percentual_error": 0.24246697480646395
    },
    {
        "answer_number": 2618,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The address of the where the data is stored : address of b will return the address of b",
            "grade": 4.5
        },
        "frequence_similarity": 4.113743060919758,
        "liv_distance": 0,
        "bert_score": 4.866918623447418,
        "nota_atribuida": 5.923142208603347,
        "percentual_error": 0.2402681142006412
    },
    {
        "answer_number": 2619,
        "answer_values": {
            "number_question": 60,
            "answer_question": "the ampersand - LRB - ADDRESS - RRB - means pass by reference When the function is called a pointer to the variable instead of the variable itself will be passed into the function",
            "grade": 3.0
        },
        "frequence_similarity": 3.4813512696610776,
        "liv_distance": 0,
        "bert_score": 4.825268983840942,
        "nota_atribuida": 5.20611993760673,
        "percentual_error": 0.42375511206929484
    },
    {
        "answer_number": 2620,
        "answer_values": {
            "number_question": 60,
            "answer_question": "Returns the address location in memory of the item",
            "grade": 4.5
        },
        "frequence_similarity": 4.03864363724166,
        "liv_distance": 0,
        "bert_score": 4.912986010313034,
        "nota_atribuida": 5.851965482308222,
        "percentual_error": 0.23102759002859985
    },
    {
        "answer_number": 2621,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The memory address of operand 0x 000000 or something along those lines",
            "grade": 4.5
        },
        "frequence_similarity": 3.973139127471974,
        "liv_distance": 0,
        "bert_score": 4.913399815559387,
        "nota_atribuida": 5.77898978778157,
        "percentual_error": 0.22131719119589355
    },
    {
        "answer_number": 2622,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The object memory address",
            "grade": 4.5
        },
        "frequence_similarity": 4.030931089239487,
        "liv_distance": 1.6666666666666667,
        "bert_score": 4.9414874613285065,
        "nota_atribuida": 5.201677492254877,
        "percentual_error": 0.13489446304574848
    },
    {
        "answer_number": 2623,
        "answer_values": {
            "number_question": 60,
            "answer_question": "the reference to a variable",
            "grade": 4.5
        },
        "frequence_similarity": 3.010310363079829,
        "liv_distance": 1.3636363636363635,
        "bert_score": 4.885028153657913,
        "nota_atribuida": 4.165507138669477,
        "percentual_error": 0.07433174696233857
    },
    {
        "answer_number": 2624,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns the address number of the specified variable",
            "grade": 4.5
        },
        "frequence_similarity": 3.7909944487358063,
        "liv_distance": 0,
        "bert_score": 4.881090521812439,
        "nota_atribuida": 5.566905492586259,
        "percentual_error": 0.19165144693171332
    },
    {
        "answer_number": 2625,
        "answer_values": {
            "number_question": 60,
            "answer_question": "It returns the memory address of it is operand That is if applied to a normal variable it gives the variable memory address just as a pointer variable might",
            "grade": 4.5
        },
        "frequence_similarity": 3.690982668350827,
        "liv_distance": 0,
        "bert_score": 4.842666387557983,
        "nota_atribuida": 5.444789066834039,
        "percentual_error": 0.17352170217007168
    },
    {
        "answer_number": 2626,
        "answer_values": {
            "number_question": 60,
            "answer_question": "the address of the variable it is attached to",
            "grade": 4.0
        },
        "frequence_similarity": 3.7309149097933276,
        "liv_distance": 0,
        "bert_score": 4.905591607093811,
        "nota_atribuida": 5.506580584703154,
        "percentual_error": 0.2735963928119596
    },
    {
        "answer_number": 2627,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns the address of what it is put in front of",
            "grade": 4.5
        },
        "frequence_similarity": 3.632277034144596,
        "liv_distance": 0.30303030303030304,
        "bert_score": 4.9053955078125,
        "nota_atribuida": 5.278379132360188,
        "percentual_error": 0.14746555956698426
    },
    {
        "answer_number": 2628,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns a pointer",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.0606060606060606,
        "bert_score": 4.839333146810532,
        "nota_atribuida": 3.701682548240691,
        "percentual_error": 0.05448402060747892
    },
    {
        "answer_number": 2629,
        "answer_values": {
            "number_question": 60,
            "answer_question": "This operator returns the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.541241452319315,
        "liv_distance": 1.6666666666666667,
        "bert_score": 4.826273173093796,
        "nota_atribuida": 5.739516819398145,
        "percentual_error": 0.12884652883998204
    },
    {
        "answer_number": 2630,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The address operator returns the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.682178902359924,
        "liv_distance": 0.6060606060606061,
        "bert_score": 4.7866058349609375,
        "nota_atribuida": 6.299219036545179,
        "percentual_error": 0.20625081125258649
    },
    {
        "answer_number": 2631,
        "answer_values": {
            "number_question": 60,
            "answer_question": "Returns memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.583333333333334,
        "liv_distance": 3.9393939393939394,
        "bert_score": 4.909210801124573,
        "nota_atribuida": 4.923532504489606,
        "percentual_error": 0.015293499102078778
    },
    {
        "answer_number": 2632,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The address - LRB - ADDRESS - RRB - operator returns the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.504459314343183,
        "liv_distance": 0,
        "bert_score": 4.728513807058334,
        "nota_atribuida": 6.321188007627624,
        "percentual_error": 0.2090094466472724
    },
    {
        "answer_number": 2633,
        "answer_values": {
            "number_question": 60,
            "answer_question": "Returns the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.814550249431378,
        "liv_distance": 3.6363636363636362,
        "bert_score": 4.919210225343704,
        "nota_atribuida": 5.302349043009696,
        "percentual_error": 0.05702171632934938
    },
    {
        "answer_number": 2634,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns the place in memory of that element",
            "grade": 4.0
        },
        "frequence_similarity": 3.5825317547305486,
        "liv_distance": 0.15151515151515152,
        "bert_score": 4.899478703737259,
        "nota_atribuida": 5.280297844411565,
        "percentual_error": 0.24246697480646395
    },
    {
        "answer_number": 2635,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The address of the where the data is stored : address of b will return the address of b",
            "grade": 4.5
        },
        "frequence_similarity": 4.113743060919758,
        "liv_distance": 0,
        "bert_score": 4.866918623447418,
        "nota_atribuida": 5.923142208603347,
        "percentual_error": 0.2402681142006412
    },
    {
        "answer_number": 2636,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The ADDRESS operator returns the address of a variable",
            "grade": 5.0
        },
        "frequence_similarity": 3.973139127471974,
        "liv_distance": 0,
        "bert_score": 4.848931729793549,
        "nota_atribuida": 5.761331518285004,
        "percentual_error": 0.13214506331890996
    },
    {
        "answer_number": 2637,
        "answer_values": {
            "number_question": 60,
            "answer_question": "the ampersand - LRB - ADDRESS - RRB - means pass by reference When the function is called a pointer to the variable instead of the variable itself will be passed into the function",
            "grade": 3.0
        },
        "frequence_similarity": 3.4813512696610776,
        "liv_distance": 0,
        "bert_score": 4.825268983840942,
        "nota_atribuida": 5.20611993760673,
        "percentual_error": 0.42375511206929484
    },
    {
        "answer_number": 2638,
        "answer_values": {
            "number_question": 60,
            "answer_question": "ADDRESS returns the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.75924028528766,
        "liv_distance": 2.4242424242424243,
        "bert_score": 4.857611358165741,
        "nota_atribuida": 5.696118340384832,
        "percentual_error": 0.122209248261124
    },
    {
        "answer_number": 2639,
        "answer_values": {
            "number_question": 60,
            "answer_question": "the address of the variable in memory",
            "grade": 5.0
        },
        "frequence_similarity": 4.2010345435994285,
        "liv_distance": 0.9090909090909091,
        "bert_score": 4.913525581359863,
        "nota_atribuida": 5.679040005169722,
        "percentual_error": 0.1195695055064907
    },
    {
        "answer_number": 2640,
        "answer_values": {
            "number_question": 60,
            "answer_question": "Returns the address location in memory of the item",
            "grade": 4.5
        },
        "frequence_similarity": 4.03864363724166,
        "liv_distance": 0,
        "bert_score": 4.912986010313034,
        "nota_atribuida": 5.851965482308222,
        "percentual_error": 0.23102759002859985
    },
    {
        "answer_number": 2641,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The address operator returns the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.682178902359924,
        "liv_distance": 0.6060606060606061,
        "bert_score": 4.7866058349609375,
        "nota_atribuida": 6.299219036545179,
        "percentual_error": 0.20625081125258649
    },
    {
        "answer_number": 2642,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The ADDRESS operator returns the memory address of the variable it precedes",
            "grade": 5.0
        },
        "frequence_similarity": 4.097524126056735,
        "liv_distance": 0,
        "bert_score": 4.8262278735637665,
        "nota_atribuida": 5.893899855011832,
        "percentual_error": 0.15166526018451287
    },
    {
        "answer_number": 2643,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The memory address of operand 0x 000000 or something along those lines",
            "grade": 4.5
        },
        "frequence_similarity": 3.973139127471974,
        "liv_distance": 0,
        "bert_score": 4.913399815559387,
        "nota_atribuida": 5.77898978778157,
        "percentual_error": 0.22131719119589355
    },
    {
        "answer_number": 2644,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The object memory address",
            "grade": 4.5
        },
        "frequence_similarity": 4.030931089239487,
        "liv_distance": 1.6666666666666667,
        "bert_score": 4.9414874613285065,
        "nota_atribuida": 5.201677492254877,
        "percentual_error": 0.13489446304574848
    },
    {
        "answer_number": 2645,
        "answer_values": {
            "number_question": 60,
            "answer_question": "the reference to a variable",
            "grade": 4.5
        },
        "frequence_similarity": 3.010310363079829,
        "liv_distance": 1.3636363636363635,
        "bert_score": 4.885028153657913,
        "nota_atribuida": 4.165507138669477,
        "percentual_error": 0.07433174696233857
    },
    {
        "answer_number": 2646,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.814550249431378,
        "liv_distance": 3.6363636363636362,
        "bert_score": 4.899011552333832,
        "nota_atribuida": 5.2968164820961166,
        "percentual_error": 0.056036769085618165
    },
    {
        "answer_number": 2647,
        "answer_values": {
            "number_question": 60,
            "answer_question": "memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.7821773229381925,
        "liv_distance": 4.393939393939394,
        "bert_score": 4.9405837059021,
        "nota_atribuida": 4.976859765219739,
        "percentual_error": 0.004628046956052123
    },
    {
        "answer_number": 2648,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns the address number of the specified variable",
            "grade": 4.5
        },
        "frequence_similarity": 3.7909944487358063,
        "liv_distance": 0,
        "bert_score": 4.881090521812439,
        "nota_atribuida": 5.566905492586259,
        "percentual_error": 0.19165144693171332
    },
    {
        "answer_number": 2649,
        "answer_values": {
            "number_question": 60,
            "answer_question": "It returns the memory address of it is operand That is if applied to a normal variable it gives the variable memory address just as a pointer variable might",
            "grade": 4.5
        },
        "frequence_similarity": 3.690982668350827,
        "liv_distance": 0,
        "bert_score": 4.842666387557983,
        "nota_atribuida": 5.444789066834039,
        "percentual_error": 0.17352170217007168
    },
    {
        "answer_number": 2650,
        "answer_values": {
            "number_question": 60,
            "answer_question": "The ADDRESS is a unary operator that returns the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.480295085953348,
        "liv_distance": 0,
        "bert_score": 4.84744668006897,
        "nota_atribuida": 6.326802455135048,
        "percentual_error": 0.2097113770413631
    },
    {
        "answer_number": 2651,
        "answer_values": {
            "number_question": 60,
            "answer_question": "the address of the variable it is attached to",
            "grade": 4.0
        },
        "frequence_similarity": 3.7309149097933276,
        "liv_distance": 0,
        "bert_score": 4.905591607093811,
        "nota_atribuida": 5.506580584703154,
        "percentual_error": 0.2735963928119596
    },
    {
        "answer_number": 2652,
        "answer_values": {
            "number_question": 60,
            "answer_question": "the memory address of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 4.848484848484849,
        "bert_score": 4.957671165466309,
        "nota_atribuida": 5.047450301055831,
        "percentual_error": 0.00940084562019472
    },
    {
        "answer_number": 2653,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns the address of what it is put in front of",
            "grade": 4.5
        },
        "frequence_similarity": 3.632277034144596,
        "liv_distance": 0.30303030303030304,
        "bert_score": 4.9053955078125,
        "nota_atribuida": 5.278379132360188,
        "percentual_error": 0.14746555956698426
    },
    {
        "answer_number": 2654,
        "answer_values": {
            "number_question": 60,
            "answer_question": "returns a pointer",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.0606060606060606,
        "bert_score": 4.839333146810532,
        "nota_atribuida": 3.701682548240691,
        "percentual_error": 0.05448402060747892
    },
    {
        "answer_number": 2655,
        "answer_values": {
            "number_question": 61,
            "answer_question": "the STAR operator returns the value in the memory address the element points to",
            "grade": 4.0
        },
        "frequence_similarity": 4.047758711549613,
        "liv_distance": 1.4728682170542635,
        "bert_score": 4.891707599163055,
        "nota_atribuida": 5.282340461986093,
        "percentual_error": 0.24275990372342449
    },
    {
        "answer_number": 2656,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The STAR returns the value",
            "grade": 4.0
        },
        "frequence_similarity": 3.5527936095153945,
        "liv_distance": 0.5813953488372093,
        "bert_score": 4.8447385430336,
        "nota_atribuida": 5.064601182732594,
        "percentual_error": 0.21020434666450694
    },
    {
        "answer_number": 2657,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The dereferencing operator returns the dereferenced object",
            "grade": 4.5
        },
        "frequence_similarity": 3.892715036327889,
        "liv_distance": 1.4728682170542635,
        "bert_score": 4.928498268127441,
        "nota_atribuida": 5.119422070646019,
        "percentual_error": 0.12099453065174881
    },
    {
        "answer_number": 2658,
        "answer_values": {
            "number_question": 61,
            "answer_question": "it returns the information in the address the pointer points to",
            "grade": 4.0
        },
        "frequence_similarity": 3.9637263846108963,
        "liv_distance": 1.317829457364341,
        "bert_score": 4.906067848205566,
        "nota_atribuida": 5.252929310995678,
        "percentual_error": 0.23852011645635274
    },
    {
        "answer_number": 2659,
        "answer_values": {
            "number_question": 61,
            "answer_question": "the star operator returns the value at the memory address the pointer is pointing at",
            "grade": 4.5
        },
        "frequence_similarity": 3.793103448275862,
        "liv_distance": 1.5116279069767442,
        "bert_score": 4.8899999260902405,
        "nota_atribuida": 4.982627448340882,
        "percentual_error": 0.0968620378193411
    },
    {
        "answer_number": 2660,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The star operator returns the object at that memory location",
            "grade": 4.0
        },
        "frequence_similarity": 3.840140668547244,
        "liv_distance": 1.3953488372093024,
        "bert_score": 4.897670894861221,
        "nota_atribuida": 5.082525269444242,
        "percentual_error": 0.21298964826644395
    },
    {
        "answer_number": 2661,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The STAR operator returns the value of the object memory address it precedes",
            "grade": 3.5
        },
        "frequence_similarity": 3.991050129948067,
        "liv_distance": 1.4728682170542635,
        "bert_score": 4.900618195533752,
        "nota_atribuida": 5.221506475985156,
        "percentual_error": 0.3296953635704061
    },
    {
        "answer_number": 2662,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The value of the object that the operand points to",
            "grade": 4.5
        },
        "frequence_similarity": 4.240893795409861,
        "liv_distance": 1.627906976744186,
        "bert_score": 4.911390542984009,
        "nota_atribuida": 5.442811655216988,
        "percentual_error": 0.17322143681258817
    },
    {
        "answer_number": 2663,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The value stored in the object being pointed to",
            "grade": 4.0
        },
        "frequence_similarity": 3.759758149650672,
        "liv_distance": 1.2403100775193798,
        "bert_score": 4.905537366867065,
        "nota_atribuida": 5.0554078325496405,
        "percentual_error": 0.20876808904601407
    },
    {
        "answer_number": 2664,
        "answer_values": {
            "number_question": 61,
            "answer_question": "the value of the variable the pointer points to",
            "grade": 4.0
        },
        "frequence_similarity": 3.938389904456152,
        "liv_distance": 1.1627906976744187,
        "bert_score": 4.895446300506592,
        "nota_atribuida": 5.282167492741822,
        "percentual_error": 0.24273510722703062
    },
    {
        "answer_number": 2665,
        "answer_values": {
            "number_question": 61,
            "answer_question": "It dereferences a pointer meaning it returns the value stored in the memory address a pointer refers to",
            "grade": 4.5
        },
        "frequence_similarity": 3.5887354258892317,
        "liv_distance": 1.3565891472868217,
        "bert_score": 4.9243733286857605,
        "nota_atribuida": 4.82442911514917,
        "percentual_error": 0.06724715140500892
    },
    {
        "answer_number": 2666,
        "answer_values": {
            "number_question": 61,
            "answer_question": "It is unary operator that returns the value of the variable located at the address",
            "grade": 4.0
        },
        "frequence_similarity": 3.9182715723279387,
        "liv_distance": 1.3953488372093024,
        "bert_score": 4.926106333732605,
        "nota_atribuida": 5.1774913363997594,
        "percentual_error": 0.22742507131234413
    },
    {
        "answer_number": 2667,
        "answer_values": {
            "number_question": 61,
            "answer_question": "a reference to a equals variable",
            "grade": 2.0
        },
        "frequence_similarity": 2.7321191727213145,
        "liv_distance": 0.7364341085271318,
        "bert_score": 4.866764843463898,
        "nota_atribuida": 4.09451939986969,
        "percentual_error": 0.511542184886546
    },
    {
        "answer_number": 2668,
        "answer_values": {
            "number_question": 61,
            "answer_question": "it returns the actual data at the address pointed to",
            "grade": 3.5
        },
        "frequence_similarity": 3.5721125348377947,
        "liv_distance": 1.1627906976744187,
        "bert_score": 4.888924658298492,
        "nota_atribuida": 4.871693874087834,
        "percentual_error": 0.2815640533950149
    },
    {
        "answer_number": 2669,
        "answer_values": {
            "number_question": 61,
            "answer_question": "will return zero or many characters placed before the operator",
            "grade": 2.0
        },
        "frequence_similarity": 3.0872202195147036,
        "liv_distance": 1.3565891472868217,
        "bert_score": 4.894507825374603,
        "nota_atribuida": 4.256664912015068,
        "percentual_error": 0.5301485925390312
    },
    {
        "answer_number": 2670,
        "answer_values": {
            "number_question": 61,
            "answer_question": "returns a synonym for the object to which its pointer operand points",
            "grade": 5.0
        },
        "frequence_similarity": 3.8997312773896353,
        "liv_distance": 1.744186046511628,
        "bert_score": 4.908056557178497,
        "nota_atribuida": 5.015920768392203,
        "percentual_error": 0.0031740470249305153
    },
    {
        "answer_number": 2671,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The star operator returns a synonym for the object to which its pointer operand points",
            "grade": 5.0
        },
        "frequence_similarity": 4.124834209049204,
        "liv_distance": 1.550387596899225,
        "bert_score": 4.946738928556442,
        "nota_atribuida": 5.353204926204256,
        "percentual_error": 0.06598008689622492
    },
    {
        "answer_number": 2672,
        "answer_values": {
            "number_question": 61,
            "answer_question": "Returns synonym for the object its operand points to",
            "grade": 5.0
        },
        "frequence_similarity": 4.047461151475432,
        "liv_distance": 1.7829457364341086,
        "bert_score": 4.905695468187332,
        "nota_atribuida": 5.165004628552228,
        "percentual_error": 0.031946656473467505
    },
    {
        "answer_number": 2673,
        "answer_values": {
            "number_question": 61,
            "answer_question": "It returns a synonym alias or nickname of the name of the object that its operand points to in memory - LRB - dereferencing the pointer - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 4.633729533970492,
        "liv_distance": 2.868217054263566,
        "bert_score": 4.927866160869598,
        "nota_atribuida": 5.402304415781269,
        "percentual_error": 0.07446903854696763
    },
    {
        "answer_number": 2674,
        "answer_values": {
            "number_question": 61,
            "answer_question": "Returns an alias or nickname for the object to which the pointer operand points",
            "grade": 5.0
        },
        "frequence_similarity": 4.008774622688546,
        "liv_distance": 1.7054263565891472,
        "bert_score": 4.900320768356323,
        "nota_atribuida": 5.150575357901265,
        "percentual_error": 0.029234667476571108
    },
    {
        "answer_number": 2675,
        "answer_values": {
            "number_question": 61,
            "answer_question": "the STAR operator returns the value in the memory address the element points to",
            "grade": 4.0
        },
        "frequence_similarity": 4.047758711549613,
        "liv_distance": 1.4728682170542635,
        "bert_score": 4.891707599163055,
        "nota_atribuida": 5.282340461986093,
        "percentual_error": 0.24275990372342449
    },
    {
        "answer_number": 2676,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The STAR returns the value",
            "grade": 4.0
        },
        "frequence_similarity": 3.5527936095153945,
        "liv_distance": 0.5813953488372093,
        "bert_score": 4.8447385430336,
        "nota_atribuida": 5.064601182732594,
        "percentual_error": 0.21020434666450694
    },
    {
        "answer_number": 2677,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The STAR operator returns the dereferenced pointer variable - LRB - ie : it returns the value of whatever variable the pointer is pointing to - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 3.8775351275936365,
        "liv_distance": 0.5813953488372093,
        "bert_score": 4.920240342617035,
        "nota_atribuida": 5.447623822808231,
        "percentual_error": 0.08216863670617458
    },
    {
        "answer_number": 2678,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The dereferencing operator returns the dereferenced object",
            "grade": 4.5
        },
        "frequence_similarity": 3.892715036327889,
        "liv_distance": 1.4728682170542635,
        "bert_score": 4.928498268127441,
        "nota_atribuida": 5.119422070646019,
        "percentual_error": 0.12099453065174881
    },
    {
        "answer_number": 2679,
        "answer_values": {
            "number_question": 61,
            "answer_question": "multiplied by returns the synonym for the object its operand points to",
            "grade": 5.0
        },
        "frequence_similarity": 4.112947917702762,
        "liv_distance": 1.627906976744186,
        "bert_score": 4.913187026977539,
        "nota_atribuida": 5.300543459426452,
        "percentual_error": 0.05670049905768948
    },
    {
        "answer_number": 2680,
        "answer_values": {
            "number_question": 61,
            "answer_question": "it returns the information in the address the pointer points to",
            "grade": 4.0
        },
        "frequence_similarity": 3.9637263846108963,
        "liv_distance": 1.317829457364341,
        "bert_score": 4.906067848205566,
        "nota_atribuida": 5.252929310995678,
        "percentual_error": 0.23852011645635274
    },
    {
        "answer_number": 2681,
        "answer_values": {
            "number_question": 61,
            "answer_question": "the star operator returns the value at the memory address the pointer is pointing at",
            "grade": 4.5
        },
        "frequence_similarity": 3.793103448275862,
        "liv_distance": 1.5116279069767442,
        "bert_score": 4.8899999260902405,
        "nota_atribuida": 4.982627448340882,
        "percentual_error": 0.0968620378193411
    },
    {
        "answer_number": 2682,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The star operator returns the object at that memory location",
            "grade": 4.0
        },
        "frequence_similarity": 3.840140668547244,
        "liv_distance": 1.3953488372093024,
        "bert_score": 4.897670894861221,
        "nota_atribuida": 5.082525269444242,
        "percentual_error": 0.21298964826644395
    },
    {
        "answer_number": 2683,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The STAR operator returns the value of the object memory address it precedes",
            "grade": 3.5
        },
        "frequence_similarity": 3.991050129948067,
        "liv_distance": 1.4728682170542635,
        "bert_score": 4.900618195533752,
        "nota_atribuida": 5.221506475985156,
        "percentual_error": 0.3296953635704061
    },
    {
        "answer_number": 2684,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The value of the object that the operand points to",
            "grade": 4.5
        },
        "frequence_similarity": 4.240893795409861,
        "liv_distance": 1.627906976744186,
        "bert_score": 4.911390542984009,
        "nota_atribuida": 5.442811655216988,
        "percentual_error": 0.17322143681258817
    },
    {
        "answer_number": 2685,
        "answer_values": {
            "number_question": 61,
            "answer_question": "The value stored in the object being pointed to",
            "grade": 4.0
        },
        "frequence_similarity": 3.759758149650672,
        "liv_distance": 1.2403100775193798,
        "bert_score": 4.905537366867065,
        "nota_atribuida": 5.0554078325496405,
        "percentual_error": 0.20876808904601407
    },
    {
        "answer_number": 2686,
        "answer_values": {
            "number_question": 61,
            "answer_question": "the value of the variable the pointer points to",
            "grade": 4.0
        },
        "frequence_similarity": 3.938389904456152,
        "liv_distance": 1.1627906976744187,
        "bert_score": 4.895446300506592,
        "nota_atribuida": 5.282167492741822,
        "percentual_error": 0.24273510722703062
    },
    {
        "answer_number": 2687,
        "answer_values": {
            "number_question": 61,
            "answer_question": "returns synonym for the object its operand points to",
            "grade": 5.0
        },
        "frequence_similarity": 4.047461151475432,
        "liv_distance": 1.7829457364341086,
        "bert_score": 4.896618276834488,
        "nota_atribuida": 5.16251832095869,
        "percentual_error": 0.03148043471320994
    },
    {
        "answer_number": 2688,
        "answer_values": {
            "number_question": 61,
            "answer_question": "synonym for the object its operand points to",
            "grade": 5.0
        },
        "frequence_similarity": 4.141330410746532,
        "liv_distance": 1.7054263565891472,
        "bert_score": 4.903227984905243,
        "nota_atribuida": 5.2992756059974715,
        "percentual_error": 0.05647481434231605
    },
    {
        "answer_number": 2689,
        "answer_values": {
            "number_question": 61,
            "answer_question": "Returns synonym for the object its operand points to",
            "grade": 5.0
        },
        "frequence_similarity": 4.047461151475432,
        "liv_distance": 1.7829457364341086,
        "bert_score": 4.905695468187332,
        "nota_atribuida": 5.165004628552228,
        "percentual_error": 0.031946656473467505
    },
    {
        "answer_number": 2690,
        "answer_values": {
            "number_question": 61,
            "answer_question": "It dereferences a pointer meaning it returns the value stored in the memory address a pointer refers to",
            "grade": 4.5
        },
        "frequence_similarity": 3.5887354258892317,
        "liv_distance": 1.3565891472868217,
        "bert_score": 4.9243733286857605,
        "nota_atribuida": 4.82442911514917,
        "percentual_error": 0.06724715140500892
    },
    {
        "answer_number": 2691,
        "answer_values": {
            "number_question": 61,
            "answer_question": "It is unary operator that returns the value of the variable located at the address",
            "grade": 4.0
        },
        "frequence_similarity": 3.9182715723279387,
        "liv_distance": 1.3953488372093024,
        "bert_score": 4.926106333732605,
        "nota_atribuida": 5.1774913363997594,
        "percentual_error": 0.22742507131234413
    },
    {
        "answer_number": 2692,
        "answer_values": {
            "number_question": 61,
            "answer_question": "a reference to a equals variable",
            "grade": 2.0
        },
        "frequence_similarity": 2.7321191727213145,
        "liv_distance": 0.7364341085271318,
        "bert_score": 4.866764843463898,
        "nota_atribuida": 4.09451939986969,
        "percentual_error": 0.511542184886546
    },
    {
        "answer_number": 2693,
        "answer_values": {
            "number_question": 61,
            "answer_question": "a synonym for the object to which its pointer operand points",
            "grade": 5.0
        },
        "frequence_similarity": 3.968050548786759,
        "liv_distance": 1.7054263565891472,
        "bert_score": 4.9077242612838745,
        "nota_atribuida": 5.107163861211629,
        "percentual_error": 0.020983047367155616
    },
    {
        "answer_number": 2694,
        "answer_values": {
            "number_question": 61,
            "answer_question": "it returns the actual data at the address pointed to",
            "grade": 3.5
        },
        "frequence_similarity": 3.5721125348377947,
        "liv_distance": 1.1627906976744187,
        "bert_score": 4.888924658298492,
        "nota_atribuida": 4.871693874087834,
        "percentual_error": 0.2815640533950149
    },
    {
        "answer_number": 2695,
        "answer_values": {
            "number_question": 61,
            "answer_question": "will return zero or many characters placed before the operator",
            "grade": 2.0
        },
        "frequence_similarity": 3.0872202195147036,
        "liv_distance": 1.3565891472868217,
        "bert_score": 4.894507825374603,
        "nota_atribuida": 4.256664912015068,
        "percentual_error": 0.5301485925390312
    },
    {
        "answer_number": 2696,
        "answer_values": {
            "number_question": 62,
            "answer_question": "The array itself can be signed to a pointer or each element of the array can be assigned to a pointer",
            "grade": 3.0
        },
        "frequence_similarity": 4.088881423997128,
        "liv_distance": 1.7625899280575539,
        "bert_score": 4.883410632610321,
        "nota_atribuida": 5.213049354486976,
        "percentual_error": 0.42452108238379904
    },
    {
        "answer_number": 2697,
        "answer_values": {
            "number_question": 62,
            "answer_question": "An array can be addressed in pointer or offset notation by setting a pointer variable equal to the variable name of the array Elements of the array can then be accessed by adding an offset value to the pointer variable",
            "grade": 4.5
        },
        "frequence_similarity": 4.07792607785553,
        "liv_distance": 0,
        "bert_score": 4.913083761930466,
        "nota_atribuida": 5.895823068732498,
        "percentual_error": 0.23674778779149763
    },
    {
        "answer_number": 2698,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Element b n can be accessed by multiplied by - LRB - bPtr plus n - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.908930410054765,
        "liv_distance": 1.0071942446043165,
        "bert_score": 4.906667172908783,
        "nota_atribuida": 4.197219032510138,
        "percentual_error": 0.04698802492377718
    },
    {
        "answer_number": 2699,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Using either the name of the array as a pointer or using a separate pointer that points to the array",
            "grade": 3.0
        },
        "frequence_similarity": 4.115145706174497,
        "liv_distance": 1.9424460431654675,
        "bert_score": 4.9275946617126465,
        "nota_atribuida": 5.184368242768688,
        "percentual_error": 0.42133740129581077
    },
    {
        "answer_number": 2700,
        "answer_values": {
            "number_question": 62,
            "answer_question": "An element b 3 can be referenced by using multiplied by - LRB - bPtr plus 3 - RRB - instead",
            "grade": 4.0
        },
        "frequence_similarity": 2.868604890387243,
        "liv_distance": 1.1510791366906474,
        "bert_score": 4.9012961983680725,
        "nota_atribuida": 4.094682210446473,
        "percentual_error": 0.023123213372924778
    },
    {
        "answer_number": 2701,
        "answer_values": {
            "number_question": 62,
            "answer_question": "yes multiplied by - LRB - array plus offset - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.890964526357015,
        "liv_distance": 0.8992805755395683,
        "bert_score": 4.872797578573227,
        "nota_atribuida": 4.209949077095763,
        "percentual_error": 0.04986974266220723
    },
    {
        "answer_number": 2702,
        "answer_values": {
            "number_question": 62,
            "answer_question": "The name of an array is considered to be a pointer in C plus plus and can be passed as such in functions parameters Declaring int a 10 ; creates a pointer a which stores the address of a 0",
            "grade": 3.5
        },
        "frequence_similarity": 3.666954839245266,
        "liv_distance": 0.2517985611510791,
        "bert_score": 4.849548637866974,
        "nota_atribuida": 5.321739974920569,
        "percentual_error": 0.3423203658024949
    },
    {
        "answer_number": 2703,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Element b n can be accessed by multiplied by - LRB - bPtr plus n - RRB - is an example of how an array can be addressed as pointer or offset notation",
            "grade": 4.5
        },
        "frequence_similarity": 3.132152171780217,
        "liv_distance": 0.6834532374100719,
        "bert_score": 4.899535179138184,
        "nota_atribuida": 4.57049309599361,
        "percentual_error": 0.01542352094468824
    },
    {
        "answer_number": 2704,
        "answer_values": {
            "number_question": 62,
            "answer_question": "multiplied by - LRB - array plus element - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.1965977657191913,
        "liv_distance": 0.8992805755395683,
        "bert_score": 4.898246228694916,
        "nota_atribuida": 4.557941044944476,
        "percentual_error": 0.12241076386087235
    },
    {
        "answer_number": 2705,
        "answer_values": {
            "number_question": 62,
            "answer_question": "multiplied by f 3",
            "grade": 2.5
        },
        "frequence_similarity": 2.7606430175713434,
        "liv_distance": 0.3597122302158273,
        "bert_score": 4.784328937530518,
        "nota_atribuida": 4.25057220461613,
        "percentual_error": 0.4118438930916184
    },
    {
        "answer_number": 2706,
        "answer_values": {
            "number_question": 62,
            "answer_question": "The pointer to the array will initially point to the first element of that array When the pointer is incremented it will point to the next element and so on",
            "grade": 3.5
        },
        "frequence_similarity": 4.496373523761727,
        "liv_distance": 2.158273381294964,
        "bert_score": 4.921058714389801,
        "nota_atribuida": 5.523840287080157,
        "percentual_error": 0.3663828390936221
    },
    {
        "answer_number": 2707,
        "answer_values": {
            "number_question": 62,
            "answer_question": "With int x 10 ; int star of xPtr; xPtr equals x; Address address of x 1 is the same as xPtr plus 1",
            "grade": 4.0
        },
        "frequence_similarity": 3.1056796398154365,
        "liv_distance": 1.4028776978417266,
        "bert_score": 4.871256649494171,
        "nota_atribuida": 4.252854670400381,
        "percentual_error": 0.05945528121622268
    },
    {
        "answer_number": 2708,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Takes the number of array elements and points to each at a time",
            "grade": 2.0
        },
        "frequence_similarity": 3.6704777297932796,
        "liv_distance": 1.5107913669064748,
        "bert_score": 4.910479038953781,
        "nota_atribuida": 4.851738713488634,
        "percentual_error": 0.5877766470730028
    },
    {
        "answer_number": 2709,
        "answer_values": {
            "number_question": 62,
            "answer_question": "The array can act as a pointer or be referenced by a pointer multiplied by - LRB - arrayPtr plus 3 - RRB - or multiplied by - LRB - array plus 3 - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.333539170889476,
        "liv_distance": 0.8273381294964028,
        "bert_score": 4.8638588190078735,
        "nota_atribuida": 4.729354944511249,
        "percentual_error": 0.1542186943184961
    },
    {
        "answer_number": 2710,
        "answer_values": {
            "number_question": 62,
            "answer_question": "by using the multiplied by - LRB - pointer plus element - index - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.6245586276506048,
        "liv_distance": 1.2949640287769784,
        "bert_score": 4.939930289983749,
        "nota_atribuida": 4.892676226874827,
        "percentual_error": 0.1824515225371902
    },
    {
        "answer_number": 2711,
        "answer_values": {
            "number_question": 62,
            "answer_question": "using the star operator array : b n can be accessed by multiplied by - LRB - bpointer plus n - RRB -",
            "grade": 4.5
        },
        "frequence_similarity": 3.2151985398521514,
        "liv_distance": 1.223021582733813,
        "bert_score": 4.903716593980789,
        "nota_atribuida": 4.454034137412746,
        "percentual_error": 0.010214636130500887
    },
    {
        "answer_number": 2712,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Element A n can be accessed by multiplied by - LRB - APtr plus n - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.908930410054765,
        "liv_distance": 1.0071942446043165,
        "bert_score": 4.911192357540131,
        "nota_atribuida": 4.198458512925802,
        "percentual_error": 0.047269375727974294
    },
    {
        "answer_number": 2713,
        "answer_values": {
            "number_question": 62,
            "answer_question": "by referencing a pointer and referring to other pointers relative to the first pointer - LRB - pointer plus 1 pointer plus 2 etc - RRB -",
            "grade": 3.0
        },
        "frequence_similarity": 3.6672488195596022,
        "liv_distance": 1.7625899280575539,
        "bert_score": 4.887636303901672,
        "nota_atribuida": 4.743754885666822,
        "percentual_error": 0.3675895841363028
    },
    {
        "answer_number": 2714,
        "answer_values": {
            "number_question": 62,
            "answer_question": "ADDRESS b 3 is as bptr plus 3 Array can be treated as pointer",
            "grade": 3.5
        },
        "frequence_similarity": 2.908930410054765,
        "liv_distance": 1.1870503597122302,
        "bert_score": 4.885255694389343,
        "nota_atribuida": 4.121265514492675,
        "percentual_error": 0.15074629681294693
    },
    {
        "answer_number": 2715,
        "answer_values": {
            "number_question": 62,
            "answer_question": "a i equals multiplied by - LRB - a plus i - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.6504823163572118,
        "liv_distance": 0.7913669064748201,
        "bert_score": 4.869036674499512,
        "nota_atribuida": 3.98264542463614,
        "percentual_error": 0.004338643840965051
    },
    {
        "answer_number": 2716,
        "answer_values": {
            "number_question": 62,
            "answer_question": "address of b 3 bPtr plus 3",
            "grade": 4.0
        },
        "frequence_similarity": 2.868604890387243,
        "liv_distance": 0.539568345323741,
        "bert_score": 4.836173951625824,
        "nota_atribuida": 4.31514654900277,
        "percentual_error": 0.07303264105261964
    },
    {
        "answer_number": 2717,
        "answer_values": {
            "number_question": 62,
            "answer_question": "multiplied by - LRB - arrayName plus index - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.7786391062876765,
        "liv_distance": 1.0431654676258992,
        "bert_score": 4.901250004768372,
        "nota_atribuida": 4.036340219223083,
        "percentual_error": 0.0090032596979841
    },
    {
        "answer_number": 2718,
        "answer_values": {
            "number_question": 62,
            "answer_question": "multi - dimensional array",
            "grade": 1.0
        },
        "frequence_similarity": 2.925628265379374,
        "liv_distance": 0.6834532374100719,
        "bert_score": 4.780701845884323,
        "nota_atribuida": 4.307507238142223,
        "percentual_error": 0.7678471689739311
    },
    {
        "answer_number": 2719,
        "answer_values": {
            "number_question": 62,
            "answer_question": "The array itself can be signed to a pointer or each element of the array can be assigned to a pointer",
            "grade": 3.0
        },
        "frequence_similarity": 4.088881423997128,
        "liv_distance": 1.7625899280575539,
        "bert_score": 4.883410632610321,
        "nota_atribuida": 5.213049354486976,
        "percentual_error": 0.42452108238379904
    },
    {
        "answer_number": 2720,
        "answer_values": {
            "number_question": 62,
            "answer_question": "An array can be addressed in pointer or offset notation by setting a pointer variable equal to the variable name of the array Elements of the array can then be accessed by adding an offset value to the pointer variable",
            "grade": 4.5
        },
        "frequence_similarity": 4.07792607785553,
        "liv_distance": 0,
        "bert_score": 4.913083761930466,
        "nota_atribuida": 5.895823068732498,
        "percentual_error": 0.23674778779149763
    },
    {
        "answer_number": 2721,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Element b n can be accessed by multiplied by - LRB - bPtr plus n - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.908930410054765,
        "liv_distance": 1.0071942446043165,
        "bert_score": 4.906667172908783,
        "nota_atribuida": 4.197219032510138,
        "percentual_error": 0.04698802492377718
    },
    {
        "answer_number": 2722,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Using either the name of the array as a pointer or using a separate pointer that points to the array",
            "grade": 3.0
        },
        "frequence_similarity": 4.115145706174497,
        "liv_distance": 1.9424460431654675,
        "bert_score": 4.9275946617126465,
        "nota_atribuida": 5.184368242768688,
        "percentual_error": 0.42133740129581077
    },
    {
        "answer_number": 2723,
        "answer_values": {
            "number_question": 62,
            "answer_question": "An element b 3 can be referenced by using multiplied by - LRB - bPtr plus 3 - RRB - instead",
            "grade": 4.0
        },
        "frequence_similarity": 2.868604890387243,
        "liv_distance": 1.1510791366906474,
        "bert_score": 4.9012961983680725,
        "nota_atribuida": 4.094682210446473,
        "percentual_error": 0.023123213372924778
    },
    {
        "answer_number": 2724,
        "answer_values": {
            "number_question": 62,
            "answer_question": "you get the memory location of the first element and the you add an offset to it to get other elements",
            "grade": 5.0
        },
        "frequence_similarity": 3.9116492564331997,
        "liv_distance": 2.194244604316547,
        "bert_score": 4.920390397310257,
        "nota_atribuida": 4.8572121142267175,
        "percentual_error": 0.028557577154656455
    },
    {
        "answer_number": 2725,
        "answer_values": {
            "number_question": 62,
            "answer_question": "yes multiplied by - LRB - array plus offset - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.890964526357015,
        "liv_distance": 0.8992805755395683,
        "bert_score": 4.872797578573227,
        "nota_atribuida": 4.209949077095763,
        "percentual_error": 0.04986974266220723
    },
    {
        "answer_number": 2726,
        "answer_values": {
            "number_question": 62,
            "answer_question": "The name of an array is considered to be a pointer in C plus plus and can be passed as such in functions parameters Declaring int a 10 ; creates a pointer a which stores the address of a 0",
            "grade": 3.5
        },
        "frequence_similarity": 3.666954839245266,
        "liv_distance": 0.2517985611510791,
        "bert_score": 4.849548637866974,
        "nota_atribuida": 5.321739974920569,
        "percentual_error": 0.3423203658024949
    },
    {
        "answer_number": 2727,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Element b n can be accessed by multiplied by - LRB - bPtr plus n - RRB - is an example of how an array can be addressed as pointer or offset notation",
            "grade": 4.5
        },
        "frequence_similarity": 3.132152171780217,
        "liv_distance": 0.6834532374100719,
        "bert_score": 4.899535179138184,
        "nota_atribuida": 4.57049309599361,
        "percentual_error": 0.01542352094468824
    },
    {
        "answer_number": 2728,
        "answer_values": {
            "number_question": 62,
            "answer_question": "multiplied by - LRB - array plus element - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.1965977657191913,
        "liv_distance": 0.8992805755395683,
        "bert_score": 4.898246228694916,
        "nota_atribuida": 4.557941044944476,
        "percentual_error": 0.12241076386087235
    },
    {
        "answer_number": 2729,
        "answer_values": {
            "number_question": 62,
            "answer_question": "multiplied by f 3",
            "grade": 2.5
        },
        "frequence_similarity": 2.7606430175713434,
        "liv_distance": 0.3597122302158273,
        "bert_score": 4.784328937530518,
        "nota_atribuida": 4.25057220461613,
        "percentual_error": 0.4118438930916184
    },
    {
        "answer_number": 2730,
        "answer_values": {
            "number_question": 62,
            "answer_question": "you can have a pointer to the front of the array and add to the memory location - LRB - or offset from the initial value - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 4.114481447167923,
        "liv_distance": 1.7985611510791366,
        "bert_score": 4.910363703966141,
        "nota_atribuida": 5.234978397941837,
        "percentual_error": 0.04488622112255891
    },
    {
        "answer_number": 2731,
        "answer_values": {
            "number_question": 62,
            "answer_question": "The pointer to the array will initially point to the first element of that array When the pointer is incremented it will point to the next element and so on",
            "grade": 3.5
        },
        "frequence_similarity": 4.496373523761727,
        "liv_distance": 2.158273381294964,
        "bert_score": 4.921058714389801,
        "nota_atribuida": 5.523840287080157,
        "percentual_error": 0.3663828390936221
    },
    {
        "answer_number": 2732,
        "answer_values": {
            "number_question": 62,
            "answer_question": "With int x 10 ; int star of xPtr; xPtr equals x; Address address of x 1 is the same as xPtr plus 1",
            "grade": 4.0
        },
        "frequence_similarity": 3.1056796398154365,
        "liv_distance": 1.4028776978417266,
        "bert_score": 4.871256649494171,
        "nota_atribuida": 4.252854670400381,
        "percentual_error": 0.05945528121622268
    },
    {
        "answer_number": 2733,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Takes the number of array elements and points to each at a time",
            "grade": 2.0
        },
        "frequence_similarity": 3.6704777297932796,
        "liv_distance": 1.5107913669064748,
        "bert_score": 4.910479038953781,
        "nota_atribuida": 4.851738713488634,
        "percentual_error": 0.5877766470730028
    },
    {
        "answer_number": 2734,
        "answer_values": {
            "number_question": 62,
            "answer_question": "The array can act as a pointer or be referenced by a pointer multiplied by - LRB - arrayPtr plus 3 - RRB - or multiplied by - LRB - array plus 3 - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.333539170889476,
        "liv_distance": 0.8273381294964028,
        "bert_score": 4.8638588190078735,
        "nota_atribuida": 4.729354944511249,
        "percentual_error": 0.1542186943184961
    },
    {
        "answer_number": 2735,
        "answer_values": {
            "number_question": 62,
            "answer_question": "by using the multiplied by - LRB - pointer plus element - index - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.6245586276506048,
        "liv_distance": 1.2949640287769784,
        "bert_score": 4.939930289983749,
        "nota_atribuida": 4.892676226874827,
        "percentual_error": 0.1824515225371902
    },
    {
        "answer_number": 2736,
        "answer_values": {
            "number_question": 62,
            "answer_question": "using the star operator array : b n can be accessed by multiplied by - LRB - bpointer plus n - RRB -",
            "grade": 4.5
        },
        "frequence_similarity": 3.2151985398521514,
        "liv_distance": 1.223021582733813,
        "bert_score": 4.903716593980789,
        "nota_atribuida": 4.454034137412746,
        "percentual_error": 0.010214636130500887
    },
    {
        "answer_number": 2737,
        "answer_values": {
            "number_question": 62,
            "answer_question": "Element A n can be accessed by multiplied by - LRB - APtr plus n - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.908930410054765,
        "liv_distance": 1.0071942446043165,
        "bert_score": 4.911192357540131,
        "nota_atribuida": 4.198458512925802,
        "percentual_error": 0.047269375727974294
    },
    {
        "answer_number": 2738,
        "answer_values": {
            "number_question": 62,
            "answer_question": "by referencing a pointer and referring to other pointers relative to the first pointer - LRB - pointer plus 1 pointer plus 2 etc - RRB -",
            "grade": 3.0
        },
        "frequence_similarity": 3.6672488195596022,
        "liv_distance": 1.7625899280575539,
        "bert_score": 4.887636303901672,
        "nota_atribuida": 4.743754885666822,
        "percentual_error": 0.3675895841363028
    },
    {
        "answer_number": 2739,
        "answer_values": {
            "number_question": 62,
            "answer_question": "First some pointer variable must reference the first entity in the array Any variable in the array can then be accessed by referring to that first entity address plus some offset i e ptrToArray equals array; nthEntity equals multiplied by - LRB - ptrToArray plus n - RRB - ;",
            "grade": 5.0
        },
        "frequence_similarity": 3.683892660110542,
        "liv_distance": 0,
        "bert_score": 4.7976332902908325,
        "nota_atribuida": 5.424543245093951,
        "percentual_error": 0.07826340871702242
    },
    {
        "answer_number": 2740,
        "answer_values": {
            "number_question": 62,
            "answer_question": "ADDRESS b 3 is as bptr plus 3 Array can be treated as pointer",
            "grade": 3.5
        },
        "frequence_similarity": 2.908930410054765,
        "liv_distance": 1.1870503597122302,
        "bert_score": 4.885255694389343,
        "nota_atribuida": 4.121265514492675,
        "percentual_error": 0.15074629681294693
    },
    {
        "answer_number": 2741,
        "answer_values": {
            "number_question": 62,
            "answer_question": "a i equals multiplied by - LRB - a plus i - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.6504823163572118,
        "liv_distance": 0.7913669064748201,
        "bert_score": 4.869036674499512,
        "nota_atribuida": 3.98264542463614,
        "percentual_error": 0.004338643840965051
    },
    {
        "answer_number": 2742,
        "answer_values": {
            "number_question": 62,
            "answer_question": "address of b 3 bPtr plus 3",
            "grade": 4.0
        },
        "frequence_similarity": 2.868604890387243,
        "liv_distance": 0.539568345323741,
        "bert_score": 4.836173951625824,
        "nota_atribuida": 4.31514654900277,
        "percentual_error": 0.07303264105261964
    },
    {
        "answer_number": 2743,
        "answer_values": {
            "number_question": 62,
            "answer_question": "multiplied by - LRB - arrayName plus index - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 2.7786391062876765,
        "liv_distance": 1.0431654676258992,
        "bert_score": 4.901250004768372,
        "nota_atribuida": 4.036340219223083,
        "percentual_error": 0.0090032596979841
    },
    {
        "answer_number": 2744,
        "answer_values": {
            "number_question": 62,
            "answer_question": "multi - dimensional array",
            "grade": 1.0
        },
        "frequence_similarity": 2.925628265379374,
        "liv_distance": 0.6834532374100719,
        "bert_score": 4.780701845884323,
        "nota_atribuida": 4.307507238142223,
        "percentual_error": 0.7678471689739311
    },
    {
        "answer_number": 2745,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the number of bytes of an array during program compilation",
            "grade": 4.5
        },
        "frequence_similarity": 3.591089451179962,
        "liv_distance": 0,
        "bert_score": 4.886417537927628,
        "nota_atribuida": 5.345313330130773,
        "percentual_error": 0.1581410252165878
    },
    {
        "answer_number": 2746,
        "answer_values": {
            "number_question": 63,
            "answer_question": "The sizeof operator returns the size of the operand",
            "grade": 4.0
        },
        "frequence_similarity": 3.9638501094227996,
        "liv_distance": 0.9375,
        "bert_score": 4.7943854331970215,
        "nota_atribuida": 5.3706886713490505,
        "percentual_error": 0.2552165569866761
    },
    {
        "answer_number": 2747,
        "answer_values": {
            "number_question": 63,
            "answer_question": "It returns the size of an array in bytes",
            "grade": 4.5
        },
        "frequence_similarity": 4.07485197087178,
        "liv_distance": 0.15625,
        "bert_score": 4.828591197729111,
        "nota_atribuida": 5.808360293685423,
        "percentual_error": 0.22525467215038486
    },
    {
        "answer_number": 2748,
        "answer_values": {
            "number_question": 63,
            "answer_question": "Returns the size of the array in bytes during the program compilation",
            "grade": 4.5
        },
        "frequence_similarity": 4.059023911155809,
        "liv_distance": 0,
        "bert_score": 4.876746088266373,
        "nota_atribuida": 5.864779140339265,
        "percentual_error": 0.23270767878572074
    },
    {
        "answer_number": 2749,
        "answer_values": {
            "number_question": 63,
            "answer_question": "it returns the size of the argument passed in",
            "grade": 4.0
        },
        "frequence_similarity": 3.924507205745474,
        "liv_distance": 0,
        "bert_score": 4.865338504314423,
        "nota_atribuida": 5.711562616010918,
        "percentual_error": 0.2996662614208213
    },
    {
        "answer_number": 2750,
        "answer_values": {
            "number_question": 63,
            "answer_question": "The byte size of the date stored ina variable",
            "grade": 4.5
        },
        "frequence_similarity": 3.6396057645963795,
        "liv_distance": 0.78125,
        "bert_score": 4.9057550728321075,
        "nota_atribuida": 5.100295804454481,
        "percentual_error": 0.11769823309663652
    },
    {
        "answer_number": 2751,
        "answer_values": {
            "number_question": 63,
            "answer_question": "The amount of memory required for a specific parameter such as ints doubles",
            "grade": 3.5
        },
        "frequence_similarity": 3.045544725589981,
        "liv_distance": 0,
        "bert_score": 4.911450743675232,
        "nota_atribuida": 4.743458738686003,
        "percentual_error": 0.2621417845473779
    },
    {
        "answer_number": 2752,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size of the information in bits",
            "grade": 2.5
        },
        "frequence_similarity": 4.07485197087178,
        "liv_distance": 1.40625,
        "bert_score": 4.903936833143234,
        "nota_atribuida": 5.341881112790137,
        "percentual_error": 0.532000067539089
    },
    {
        "answer_number": 2753,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size of the string",
            "grade": 3.0
        },
        "frequence_similarity": 3.928571428571428,
        "liv_distance": 2.1875,
        "bert_score": 4.893925786018372,
        "nota_atribuida": 4.871473125478451,
        "percentual_error": 0.38416985525187397
    },
    {
        "answer_number": 2754,
        "answer_values": {
            "number_question": 63,
            "answer_question": "sizeof returns the size in bytes of the respective object",
            "grade": 4.5
        },
        "frequence_similarity": 4.1366341767699435,
        "liv_distance": 0,
        "bert_score": 4.855925440788269,
        "nota_atribuida": 5.94567269220425,
        "percentual_error": 0.24314703601154564
    },
    {
        "answer_number": 2755,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size in bytes needed to store the object in memory",
            "grade": 4.5
        },
        "frequence_similarity": 3.9638501094227996,
        "liv_distance": 0.15625,
        "bert_score": 4.887773245573044,
        "nota_atribuida": 5.700716316296163,
        "percentual_error": 0.210625516106419
    },
    {
        "answer_number": 2756,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size of the list object",
            "grade": 3.0
        },
        "frequence_similarity": 3.8363062095621214,
        "liv_distance": 2.1875,
        "bert_score": 4.871861040592194,
        "nota_atribuida": 4.7624811608061375,
        "percentual_error": 0.37007624834526487
    },
    {
        "answer_number": 2757,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the sizeof operator returns the size in bytes of an array parameter",
            "grade": 4.0
        },
        "frequence_similarity": 4.015228816828316,
        "liv_distance": 0,
        "bert_score": 4.833704829216003,
        "nota_atribuida": 5.804123862800938,
        "percentual_error": 0.31083483148312907
    },
    {
        "answer_number": 2758,
        "answer_values": {
            "number_question": 63,
            "answer_question": "returns the size in bytes of the specified data",
            "grade": 4.5
        },
        "frequence_similarity": 4.209408646894569,
        "liv_distance": 1.40625,
        "bert_score": 4.851066470146179,
        "nota_atribuida": 5.477536046667236,
        "percentual_error": 0.178462731844916
    },
    {
        "answer_number": 2759,
        "answer_values": {
            "number_question": 63,
            "answer_question": "It returns the size of an operand in memory which is checked at compiler - time",
            "grade": 4.0
        },
        "frequence_similarity": 3.719875091185666,
        "liv_distance": 0,
        "bert_score": 4.8053668439388275,
        "nota_atribuida": 5.46681022663124,
        "percentual_error": 0.26831189776549424
    },
    {
        "answer_number": 2760,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the total number of bytes of an object",
            "grade": 4.5
        },
        "frequence_similarity": 3.6952286093343933,
        "liv_distance": 1.40625,
        "bert_score": 4.8880308866500854,
        "nota_atribuida": 4.913945790326159,
        "percentual_error": 0.08423898186688861
    },
    {
        "answer_number": 2761,
        "answer_values": {
            "number_question": 63,
            "answer_question": "total number of bytes in the array",
            "grade": 4.5
        },
        "frequence_similarity": 3.928571428571428,
        "liv_distance": 1.5625,
        "bert_score": 4.88310769200325,
        "nota_atribuida": 5.112068416697643,
        "percentual_error": 0.11973009099378107
    },
    {
        "answer_number": 2762,
        "answer_values": {
            "number_question": 63,
            "answer_question": "it returns the size in bytes of a certain variable type",
            "grade": 4.5
        },
        "frequence_similarity": 3.994035761667992,
        "liv_distance": 0,
        "bert_score": 4.858618080615997,
        "nota_atribuida": 5.787300858488041,
        "percentual_error": 0.22243544788240954
    },
    {
        "answer_number": 2763,
        "answer_values": {
            "number_question": 63,
            "answer_question": "it yields the size in bytes of the operand which can be an expression or the parenthesized name of a type",
            "grade": 4.0
        },
        "frequence_similarity": 4.107142857142857,
        "liv_distance": 0,
        "bert_score": 4.843778312206268,
        "nota_atribuida": 5.909439494582117,
        "percentual_error": 0.32311685335516616
    },
    {
        "answer_number": 2764,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the number of bytes of an array during program compilation",
            "grade": 4.5
        },
        "frequence_similarity": 3.591089451179962,
        "liv_distance": 0,
        "bert_score": 4.886417537927628,
        "nota_atribuida": 5.345313330130773,
        "percentual_error": 0.1581410252165878
    },
    {
        "answer_number": 2765,
        "answer_values": {
            "number_question": 63,
            "answer_question": "The sizeof operator returns the size of the operand",
            "grade": 4.0
        },
        "frequence_similarity": 3.9638501094227996,
        "liv_distance": 0.9375,
        "bert_score": 4.7943854331970215,
        "nota_atribuida": 5.3706886713490505,
        "percentual_error": 0.2552165569866761
    },
    {
        "answer_number": 2766,
        "answer_values": {
            "number_question": 63,
            "answer_question": "Returns size of operand in bytes",
            "grade": 5.0
        },
        "frequence_similarity": 4.428791874526149,
        "liv_distance": 1.09375,
        "bert_score": 4.887160211801529,
        "nota_atribuida": 5.853986416492788,
        "percentual_error": 0.14588117493522035
    },
    {
        "answer_number": 2767,
        "answer_values": {
            "number_question": 63,
            "answer_question": "It returns the size of an array in bytes",
            "grade": 4.5
        },
        "frequence_similarity": 4.07485197087178,
        "liv_distance": 0.15625,
        "bert_score": 4.828591197729111,
        "nota_atribuida": 5.808360293685423,
        "percentual_error": 0.22525467215038486
    },
    {
        "answer_number": 2768,
        "answer_values": {
            "number_question": 63,
            "answer_question": "Returns the size of the array in bytes during the program compilation",
            "grade": 4.5
        },
        "frequence_similarity": 4.059023911155809,
        "liv_distance": 0,
        "bert_score": 4.876746088266373,
        "nota_atribuida": 5.864779140339265,
        "percentual_error": 0.23270767878572074
    },
    {
        "answer_number": 2769,
        "answer_values": {
            "number_question": 63,
            "answer_question": "it returns the size of the argument passed in",
            "grade": 4.0
        },
        "frequence_similarity": 3.924507205745474,
        "liv_distance": 0,
        "bert_score": 4.865338504314423,
        "nota_atribuida": 5.711562616010918,
        "percentual_error": 0.2996662614208213
    },
    {
        "answer_number": 2770,
        "answer_values": {
            "number_question": 63,
            "answer_question": "The byte size of the date stored ina variable",
            "grade": 4.5
        },
        "frequence_similarity": 3.6396057645963795,
        "liv_distance": 0.78125,
        "bert_score": 4.9057550728321075,
        "nota_atribuida": 5.100295804454481,
        "percentual_error": 0.11769823309663652
    },
    {
        "answer_number": 2771,
        "answer_values": {
            "number_question": 63,
            "answer_question": "sizeof returns the size of the operand in bytes",
            "grade": 5.0
        },
        "frequence_similarity": 4.494310088043664,
        "liv_distance": 0.3125,
        "bert_score": 4.843738824129105,
        "nota_atribuida": 6.219645372857536,
        "percentual_error": 0.1960956452887258
    },
    {
        "answer_number": 2772,
        "answer_values": {
            "number_question": 63,
            "answer_question": "The amount of memory required for a specific parameter such as ints doubles",
            "grade": 3.5
        },
        "frequence_similarity": 3.045544725589981,
        "liv_distance": 0,
        "bert_score": 4.911450743675232,
        "nota_atribuida": 4.743458738686003,
        "percentual_error": 0.2621417845473779
    },
    {
        "answer_number": 2773,
        "answer_values": {
            "number_question": 63,
            "answer_question": "sizeof returns the size of the operand in bytes",
            "grade": 5.0
        },
        "frequence_similarity": 4.494310088043664,
        "liv_distance": 0.3125,
        "bert_score": 4.843738824129105,
        "nota_atribuida": 6.219645372857536,
        "percentual_error": 0.1960956452887258
    },
    {
        "answer_number": 2774,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size of the information in bits",
            "grade": 2.5
        },
        "frequence_similarity": 4.07485197087178,
        "liv_distance": 1.40625,
        "bert_score": 4.903936833143234,
        "nota_atribuida": 5.341881112790137,
        "percentual_error": 0.532000067539089
    },
    {
        "answer_number": 2775,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size of the string",
            "grade": 3.0
        },
        "frequence_similarity": 3.928571428571428,
        "liv_distance": 2.1875,
        "bert_score": 4.893925786018372,
        "nota_atribuida": 4.871473125478451,
        "percentual_error": 0.38416985525187397
    },
    {
        "answer_number": 2776,
        "answer_values": {
            "number_question": 63,
            "answer_question": "sizeof returns the size in bytes of the respective object",
            "grade": 4.5
        },
        "frequence_similarity": 4.1366341767699435,
        "liv_distance": 0,
        "bert_score": 4.855925440788269,
        "nota_atribuida": 5.94567269220425,
        "percentual_error": 0.24314703601154564
    },
    {
        "answer_number": 2777,
        "answer_values": {
            "number_question": 63,
            "answer_question": "The sizeof operator returns the total number of bytes of its operand",
            "grade": 5.0
        },
        "frequence_similarity": 4.153594569415369,
        "liv_distance": 0,
        "bert_score": 4.815736263990402,
        "nota_atribuida": 5.953588764246389,
        "percentual_error": 0.16017041183177771
    },
    {
        "answer_number": 2778,
        "answer_values": {
            "number_question": 63,
            "answer_question": "The size of an operand in bytes Used with variable names type names and constant values",
            "grade": 5.0
        },
        "frequence_similarity": 3.836306209562122,
        "liv_distance": 0,
        "bert_score": 4.908786118030548,
        "nota_atribuida": 5.6250497591842175,
        "percentual_error": 0.11111897422128159
    },
    {
        "answer_number": 2779,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size in bytes needed to store the object in memory",
            "grade": 4.5
        },
        "frequence_similarity": 3.9638501094227996,
        "liv_distance": 0.15625,
        "bert_score": 4.887773245573044,
        "nota_atribuida": 5.700716316296163,
        "percentual_error": 0.210625516106419
    },
    {
        "answer_number": 2780,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size of the list object",
            "grade": 3.0
        },
        "frequence_similarity": 3.8363062095621214,
        "liv_distance": 2.1875,
        "bert_score": 4.871861040592194,
        "nota_atribuida": 4.7624811608061375,
        "percentual_error": 0.37007624834526487
    },
    {
        "answer_number": 2781,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the sizeof operator returns the size in bytes of an array parameter",
            "grade": 4.0
        },
        "frequence_similarity": 4.015228816828316,
        "liv_distance": 0,
        "bert_score": 4.833704829216003,
        "nota_atribuida": 5.804123862800938,
        "percentual_error": 0.31083483148312907
    },
    {
        "answer_number": 2782,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the size of operand in bytes",
            "grade": 5.0
        },
        "frequence_similarity": 4.814550249431378,
        "liv_distance": 2.03125,
        "bert_score": 4.929464161396027,
        "nota_atribuida": 5.930660038205707,
        "percentual_error": 0.15692351815992367
    },
    {
        "answer_number": 2783,
        "answer_values": {
            "number_question": 63,
            "answer_question": "returns the size in bytes of the specified data",
            "grade": 4.5
        },
        "frequence_similarity": 4.209408646894569,
        "liv_distance": 1.40625,
        "bert_score": 4.851066470146179,
        "nota_atribuida": 5.477536046667236,
        "percentual_error": 0.178462731844916
    },
    {
        "answer_number": 2784,
        "answer_values": {
            "number_question": 63,
            "answer_question": "It returns the size of an operand in memory which is checked at compiler - time",
            "grade": 4.0
        },
        "frequence_similarity": 3.719875091185666,
        "liv_distance": 0,
        "bert_score": 4.8053668439388275,
        "nota_atribuida": 5.46681022663124,
        "percentual_error": 0.26831189776549424
    },
    {
        "answer_number": 2785,
        "answer_values": {
            "number_question": 63,
            "answer_question": "Return size of operand in bytes",
            "grade": 5.0
        },
        "frequence_similarity": 4.428791874526149,
        "liv_distance": 1.25,
        "bert_score": 4.869900494813919,
        "nota_atribuida": 5.788369245516901,
        "percentual_error": 0.13619885188345482
    },
    {
        "answer_number": 2786,
        "answer_values": {
            "number_question": 63,
            "answer_question": "the total number of bytes of an object",
            "grade": 4.5
        },
        "frequence_similarity": 3.6952286093343933,
        "liv_distance": 1.40625,
        "bert_score": 4.8880308866500854,
        "nota_atribuida": 4.913945790326159,
        "percentual_error": 0.08423898186688861
    },
    {
        "answer_number": 2787,
        "answer_values": {
            "number_question": 63,
            "answer_question": "total number of bytes in the array",
            "grade": 4.5
        },
        "frequence_similarity": 3.928571428571428,
        "liv_distance": 1.5625,
        "bert_score": 4.88310769200325,
        "nota_atribuida": 5.112068416697643,
        "percentual_error": 0.11973009099378107
    },
    {
        "answer_number": 2788,
        "answer_values": {
            "number_question": 63,
            "answer_question": "it returns the size in bytes of a certain variable type",
            "grade": 4.5
        },
        "frequence_similarity": 3.994035761667992,
        "liv_distance": 0,
        "bert_score": 4.858618080615997,
        "nota_atribuida": 5.787300858488041,
        "percentual_error": 0.22243544788240954
    },
    {
        "answer_number": 2789,
        "answer_values": {
            "number_question": 63,
            "answer_question": "it yields the size in bytes of the operand which can be an expression or the parenthesized name of a type",
            "grade": 4.0
        },
        "frequence_similarity": 4.107142857142857,
        "liv_distance": 0,
        "bert_score": 4.843778312206268,
        "nota_atribuida": 5.909439494582117,
        "percentual_error": 0.32311685335516616
    },
    {
        "answer_number": 2790,
        "answer_values": {
            "number_question": 64,
            "answer_question": "They can be passed by value or by reference",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.7692307692307693,
        "bert_score": 4.880709648132324,
        "nota_atribuida": 3.8265629280747833,
        "percentual_error": 0.346672184153052
    },
    {
        "answer_number": 2791,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Pass - by - value or pass - by - reference",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.650887573964497,
        "bert_score": 4.860060513019562,
        "nota_atribuida": 3.867024557660507,
        "percentual_error": 0.35350811386818204
    },
    {
        "answer_number": 2792,
        "answer_values": {
            "number_question": 64,
            "answer_question": "you can pass a pointer to a pointer or pass a reference to pointer",
            "grade": 2.5
        },
        "frequence_similarity": 3.6904761904761907,
        "liv_distance": 1.4497041420118344,
        "bert_score": 4.89919438958168,
        "nota_atribuida": 4.894767072242108,
        "percentual_error": 0.4892504662423407
    },
    {
        "answer_number": 2793,
        "answer_values": {
            "number_question": 64,
            "answer_question": "by address address of bPtr or directly bPtr",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.7396449704142012,
        "bert_score": 4.873993396759033,
        "nota_atribuida": 3.8362526926394582,
        "percentual_error": 0.34832238637545954
    },
    {
        "answer_number": 2794,
        "answer_values": {
            "number_question": 64,
            "answer_question": "By argument and reference",
            "grade": 2.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.5029585798816568,
        "bert_score": 4.799254834651947,
        "nota_atribuida": 3.908016416839863,
        "percentual_error": 0.48823142313786416
    },
    {
        "answer_number": 2795,
        "answer_values": {
            "number_question": 64,
            "answer_question": "pass by value and pass by reference with reference or pointer arguments",
            "grade": 2.5
        },
        "frequence_similarity": 2.7571722499368203,
        "liv_distance": 1.0650887573964498,
        "bert_score": 4.871228933334351,
        "nota_atribuida": 3.995621443823864,
        "percentual_error": 0.37431510088016096
    },
    {
        "answer_number": 2796,
        "answer_values": {
            "number_question": 64,
            "answer_question": "you can pass them with the pointer - LRB - STAR - RRB - or the memory address - LRB - ADDRESS - RRB -",
            "grade": 2.5
        },
        "frequence_similarity": 2.718217890235992,
        "liv_distance": 1.0946745562130178,
        "bert_score": 4.9025170505046844,
        "nota_atribuida": 3.94919734558721,
        "percentual_error": 0.36695997155131466
    },
    {
        "answer_number": 2797,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Pass by reference with reference arguments function - LRB - int ADDRESS - RRB - Pass by reference with pointer arguments function - LRB - int STAR - RRB -",
            "grade": 2.5
        },
        "frequence_similarity": 2.664487923739942,
        "liv_distance": 1.0355029585798816,
        "bert_score": 4.8897746205329895,
        "nota_atribuida": 3.9088147266605255,
        "percentual_error": 0.36041992910319864
    },
    {
        "answer_number": 2798,
        "answer_values": {
            "number_question": 64,
            "answer_question": "you can pass the reference or the dereference in a function",
            "grade": 2.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.9467455621301775,
        "bert_score": 4.906588494777679,
        "nota_atribuida": 3.764474966214244,
        "percentual_error": 0.4687174126671624
    },
    {
        "answer_number": 2799,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Pointers may be passed to functions by value by reference with reference arguments or by reference with pointer arguments",
            "grade": 2.5
        },
        "frequence_similarity": 2.868855556781659,
        "liv_distance": 1.272189349112426,
        "bert_score": 4.873877167701721,
        "nota_atribuida": 4.040255768185764,
        "percentual_error": 0.38122729266652355
    },
    {
        "answer_number": 2800,
        "answer_values": {
            "number_question": 64,
            "answer_question": "pass by value pass by reference with reference arguments pass by reference with pointer arguments",
            "grade": 2.5
        },
        "frequence_similarity": 2.6793740008335436,
        "liv_distance": 1.1538461538461537,
        "bert_score": 4.856591522693634,
        "nota_atribuida": 3.8702177455122966,
        "percentual_error": 0.354041512806645
    },
    {
        "answer_number": 2801,
        "answer_values": {
            "number_question": 64,
            "answer_question": "you can pass it where either the pointer cant be moved the data pointed to cant be changed or both or neither",
            "grade": 4.0
        },
        "frequence_similarity": 3.0976143046671964,
        "liv_distance": 1.5976331360946745,
        "bert_score": 4.898578971624374,
        "nota_atribuida": 4.175444328195211,
        "percentual_error": 0.04201812176263531
    },
    {
        "answer_number": 2802,
        "answer_values": {
            "number_question": 64,
            "answer_question": "there are only two ways to pass something by value and by reference Use of dot or pointer operators within the receiving function and use of ADDRESS operator inside the passing function",
            "grade": 2.5
        },
        "frequence_similarity": 2.9523417902848417,
        "liv_distance": 1.0650887573964498,
        "bert_score": 4.921855479478836,
        "nota_atribuida": 4.227255928350528,
        "percentual_error": 0.408599800349562
    },
    {
        "answer_number": 2803,
        "answer_values": {
            "number_question": 64,
            "answer_question": "They can be passed by value or by reference",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.7692307692307693,
        "bert_score": 4.880709648132324,
        "nota_atribuida": 3.8265629280747833,
        "percentual_error": 0.346672184153052
    },
    {
        "answer_number": 2804,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.939750182371333,
        "liv_distance": 3.964497041420118,
        "bert_score": 4.943825006484985,
        "nota_atribuida": 5.320916126621291,
        "percentual_error": 0.06031219417568012
    },
    {
        "answer_number": 2805,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.939750182371333,
        "liv_distance": 3.8757396449704142,
        "bert_score": 4.924220144748688,
        "nota_atribuida": 5.350134396326816,
        "percentual_error": 0.06544403754926309
    },
    {
        "answer_number": 2806,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Four different ways : Nonconstant pointer to nonconstant data a nonconstant pointer to constant data a constant pointer to nonconstant data and a constant pointer to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.940476190476191,
        "liv_distance": 3.93491124260355,
        "bert_score": 4.973224997520447,
        "nota_atribuida": 5.34130845807669,
        "percentual_error": 0.06389978424866871
    },
    {
        "answer_number": 2807,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Pass - by - value or pass - by - reference",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.650887573964497,
        "bert_score": 4.860060513019562,
        "nota_atribuida": 3.867024557660507,
        "percentual_error": 0.35350811386818204
    },
    {
        "answer_number": 2808,
        "answer_values": {
            "number_question": 64,
            "answer_question": "you can pass a pointer to a pointer or pass a reference to pointer",
            "grade": 2.5
        },
        "frequence_similarity": 3.6904761904761907,
        "liv_distance": 1.4497041420118344,
        "bert_score": 4.89919438958168,
        "nota_atribuida": 4.894767072242108,
        "percentual_error": 0.4892504662423407
    },
    {
        "answer_number": 2809,
        "answer_values": {
            "number_question": 64,
            "answer_question": "by address address of bPtr or directly bPtr",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.7396449704142012,
        "bert_score": 4.873993396759033,
        "nota_atribuida": 3.8362526926394582,
        "percentual_error": 0.34832238637545954
    },
    {
        "answer_number": 2810,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Nonconstant pointer to nonconstant data constant pointer to nonconstant data nonconstant pointer to constant data constant pointer to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.939750182371333,
        "liv_distance": 3.964497041420118,
        "bert_score": 4.94281679391861,
        "nota_atribuida": 5.320639969992853,
        "percentual_error": 0.060263421656264304
    },
    {
        "answer_number": 2811,
        "answer_values": {
            "number_question": 64,
            "answer_question": "By argument and reference",
            "grade": 2.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.5029585798816568,
        "bert_score": 4.799254834651947,
        "nota_atribuida": 3.908016416839863,
        "percentual_error": 0.48823142313786416
    },
    {
        "answer_number": 2812,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data and constant pointer to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.92464322484436,
        "liv_distance": 3.8461538461538463,
        "bert_score": 4.949483126401901,
        "nota_atribuida": 5.351727364197894,
        "percentual_error": 0.06572221271040224
    },
    {
        "answer_number": 2813,
        "answer_values": {
            "number_question": 64,
            "answer_question": "pass by value and pass by reference with reference or pointer arguments",
            "grade": 2.5
        },
        "frequence_similarity": 2.7571722499368203,
        "liv_distance": 1.0650887573964498,
        "bert_score": 4.871228933334351,
        "nota_atribuida": 3.995621443823864,
        "percentual_error": 0.37431510088016096
    },
    {
        "answer_number": 2814,
        "answer_values": {
            "number_question": 64,
            "answer_question": "you can pass them with the pointer - LRB - STAR - RRB - or the memory address - LRB - ADDRESS - RRB -",
            "grade": 2.5
        },
        "frequence_similarity": 2.718217890235992,
        "liv_distance": 1.0946745562130178,
        "bert_score": 4.9025170505046844,
        "nota_atribuida": 3.94919734558721,
        "percentual_error": 0.36695997155131466
    },
    {
        "answer_number": 2815,
        "answer_values": {
            "number_question": 64,
            "answer_question": "nonconst implies nonconst const implies nonconst nonconst implies const const implies const",
            "grade": 5.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.952662721893491,
        "bert_score": 4.79938417673111,
        "nota_atribuida": 3.34311154726838,
        "percentual_error": 0.33137769054632404
    },
    {
        "answer_number": 2816,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.909894874801245,
        "liv_distance": 3.8461538461538463,
        "bert_score": 4.926244020462036,
        "nota_atribuida": 5.328905999111789,
        "percentual_error": 0.061721111081075586
    },
    {
        "answer_number": 2817,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Non - constant pointer to non - constant data non - constant pointer to constant data constant pointer to constant data constant pointer to non - constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.428791874526149,
        "liv_distance": 3.905325443786982,
        "bert_score": 4.949326515197754,
        "nota_atribuida": 4.77536150467255,
        "percentual_error": 0.04492769906548999
    },
    {
        "answer_number": 2818,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Pass by reference with reference arguments function - LRB - int ADDRESS - RRB - Pass by reference with pointer arguments function - LRB - int STAR - RRB -",
            "grade": 2.5
        },
        "frequence_similarity": 2.664487923739942,
        "liv_distance": 1.0355029585798816,
        "bert_score": 4.8897746205329895,
        "nota_atribuida": 3.9088147266605255,
        "percentual_error": 0.36041992910319864
    },
    {
        "answer_number": 2819,
        "answer_values": {
            "number_question": 64,
            "answer_question": "you can pass the reference or the dereference in a function",
            "grade": 2.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.9467455621301775,
        "bert_score": 4.906588494777679,
        "nota_atribuida": 3.764474966214244,
        "percentual_error": 0.4687174126671624
    },
    {
        "answer_number": 2820,
        "answer_values": {
            "number_question": 64,
            "answer_question": "1 nonconstant pointer to nonconstant data Its delcaration does no include const qualifier 2 nonconstant pointer to constant data Provides the performance of pass - by - reference and the protection of pass - by - value 3 Constant pointer to nonconstant data 4 Constant pointer to constant date",
            "grade": 5.0
        },
        "frequence_similarity": 4.542656524553271,
        "liv_distance": 0.20710059171597633,
        "bert_score": 4.882306009531021,
        "nota_atribuida": 6.325226960677513,
        "percentual_error": 0.20951453108578488
    },
    {
        "answer_number": 2821,
        "answer_values": {
            "number_question": 64,
            "answer_question": "constant pointer to constant data constant pointer to nonconstant data nonconstant pointer to constant data nonconstant pointer to nonconstant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.939750182371333,
        "liv_distance": 3.9940828402366866,
        "bert_score": 4.950202256441116,
        "nota_atribuida": 5.311133507145338,
        "percentual_error": 0.058581375656769796
    },
    {
        "answer_number": 2822,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.939750182371333,
        "liv_distance": 3.8757396449704142,
        "bert_score": 4.924220144748688,
        "nota_atribuida": 5.350134396326816,
        "percentual_error": 0.06544403754926309
    },
    {
        "answer_number": 2823,
        "answer_values": {
            "number_question": 64,
            "answer_question": "Pointers may be passed to functions by value by reference with reference arguments or by reference with pointer arguments",
            "grade": 2.5
        },
        "frequence_similarity": 2.868855556781659,
        "liv_distance": 1.272189349112426,
        "bert_score": 4.873877167701721,
        "nota_atribuida": 4.040255768185764,
        "percentual_error": 0.38122729266652355
    },
    {
        "answer_number": 2824,
        "answer_values": {
            "number_question": 64,
            "answer_question": "There are four way to pass pointer to a function 1 non constant pointer to non constant data 2 non constant pointer to constant data 3 constant pointer to non constant data 4 constant pointer to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.529692134457285,
        "liv_distance": 3.4615384615384617,
        "bert_score": 4.962246865034103,
        "nota_atribuida": 5.0644245222724535,
        "percentual_error": 0.012720995641089305
    },
    {
        "answer_number": 2825,
        "answer_values": {
            "number_question": 64,
            "answer_question": "nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data",
            "grade": 5.0
        },
        "frequence_similarity": 4.939750182371333,
        "liv_distance": 3.9940828402366866,
        "bert_score": 4.932995289564133,
        "nota_atribuida": 5.30642039592569,
        "percentual_error": 0.05774521674931021
    },
    {
        "answer_number": 2826,
        "answer_values": {
            "number_question": 64,
            "answer_question": "pass by value pass by reference with reference arguments pass by reference with pointer arguments",
            "grade": 2.5
        },
        "frequence_similarity": 2.6793740008335436,
        "liv_distance": 1.1538461538461537,
        "bert_score": 4.856591522693634,
        "nota_atribuida": 3.8702177455122966,
        "percentual_error": 0.354041512806645
    },
    {
        "answer_number": 2827,
        "answer_values": {
            "number_question": 64,
            "answer_question": "you can pass it where either the pointer cant be moved the data pointed to cant be changed or both or neither",
            "grade": 4.0
        },
        "frequence_similarity": 3.0976143046671964,
        "liv_distance": 1.5976331360946745,
        "bert_score": 4.898578971624374,
        "nota_atribuida": 4.175444328195211,
        "percentual_error": 0.04201812176263531
    },
    {
        "answer_number": 2828,
        "answer_values": {
            "number_question": 64,
            "answer_question": "there are only two ways to pass something by value and by reference Use of dot or pointer operators within the receiving function and use of ADDRESS operator inside the passing function",
            "grade": 2.5
        },
        "frequence_similarity": 2.9523417902848417,
        "liv_distance": 1.0650887573964498,
        "bert_score": 4.921855479478836,
        "nota_atribuida": 4.227255928350528,
        "percentual_error": 0.408599800349562
    },
    {
        "answer_number": 2829,
        "answer_values": {
            "number_question": 65,
            "answer_question": "when it is dereferenced a function pointer calls its function with zero or more arguments",
            "grade": 3.5
        },
        "frequence_similarity": 2.794627825494395,
        "liv_distance": 0.7246376811594203,
        "bert_score": 4.887040853500366,
        "nota_atribuida": 4.174416437506053,
        "percentual_error": 0.1615594533038427
    },
    {
        "answer_number": 2830,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a pointer to a function",
            "grade": 3.5
        },
        "frequence_similarity": 2.8402069087198862,
        "liv_distance": 1.3043478260869565,
        "bert_score": 4.89103376865387,
        "nota_atribuida": 4.000457363174949,
        "percentual_error": 0.12510003675623793
    },
    {
        "answer_number": 2831,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a pointer that points to a function itself which allows passing a function as a parameter to another function",
            "grade": 4.0
        },
        "frequence_similarity": 2.868604890387243,
        "liv_distance": 0,
        "bert_score": 4.901266545057297,
        "nota_atribuida": 4.543242158630563,
        "percentual_error": 0.11957147333619322
    },
    {
        "answer_number": 2832,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a pointer that contains the address of the function definition",
            "grade": 4.5
        },
        "frequence_similarity": 4.0990053726670785,
        "liv_distance": 1.7391304347826086,
        "bert_score": 4.937493205070496,
        "nota_atribuida": 5.248301133830187,
        "percentual_error": 0.14257968716899438
    },
    {
        "answer_number": 2833,
        "answer_values": {
            "number_question": 65,
            "answer_question": "When dereferenced a function pointer invokes a function passing it zero or more arguments just like a normal function In programming languages like C function pointers can be used to simplify code such as replacing large switch statements",
            "grade": 4.0
        },
        "frequence_similarity": 3.010310363079829,
        "liv_distance": 0,
        "bert_score": 4.776115715503693,
        "nota_atribuida": 4.667075485909938,
        "percentual_error": 0.14293222552835527
    },
    {
        "answer_number": 2834,
        "answer_values": {
            "number_question": 65,
            "answer_question": "A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute",
            "grade": 5.0
        },
        "frequence_similarity": 3.8891559572288035,
        "liv_distance": 0,
        "bert_score": 4.912805408239365,
        "nota_atribuida": 5.685119699256491,
        "percentual_error": 0.12051104207112684
    },
    {
        "answer_number": 2835,
        "answer_values": {
            "number_question": 65,
            "answer_question": "A function pointer is a pointer that contains the address of the function in memory",
            "grade": 5.0
        },
        "frequence_similarity": 4.122214211307625,
        "liv_distance": 0.9420289855072463,
        "bert_score": 4.929857552051544,
        "nota_atribuida": 5.582731042100393,
        "percentual_error": 0.10438099878104679
    },
    {
        "answer_number": 2836,
        "answer_values": {
            "number_question": 65,
            "answer_question": "Function Pointers are pointers i e variables which point to the address of a function",
            "grade": 5.0
        },
        "frequence_similarity": 3.531197389230382,
        "liv_distance": 0.07246376811594203,
        "bert_score": 4.906351864337921,
        "nota_atribuida": 5.255708078391333,
        "percentual_error": 0.04865340208727875
    },
    {
        "answer_number": 2837,
        "answer_values": {
            "number_question": 65,
            "answer_question": "A pointer to a function is the address where the code for the function resides They can be passed to functions returned from functions stored in arrays and assigned to other pointers",
            "grade": 5.0
        },
        "frequence_similarity": 3.890096093713832,
        "liv_distance": 0,
        "bert_score": 4.840074777603149,
        "nota_atribuida": 5.666247251130588,
        "percentual_error": 0.11758174707212987
    },
    {
        "answer_number": 2838,
        "answer_values": {
            "number_question": 65,
            "answer_question": "It contains the address of the function in memory",
            "grade": 5.0
        },
        "frequence_similarity": 4.454339899926429,
        "liv_distance": 1.8115942028985508,
        "bert_score": 4.945396929979324,
        "nota_atribuida": 5.618704780302511,
        "percentual_error": 0.11011519638324896
    },
    {
        "answer_number": 2839,
        "answer_values": {
            "number_question": 65,
            "answer_question": "when it is dereferenced a function pointer calls its function with zero or more arguments",
            "grade": 3.5
        },
        "frequence_similarity": 2.794627825494395,
        "liv_distance": 0.7246376811594203,
        "bert_score": 4.887040853500366,
        "nota_atribuida": 4.174416437506053,
        "percentual_error": 0.1615594533038427
    },
    {
        "answer_number": 2840,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a pointer to a function",
            "grade": 3.5
        },
        "frequence_similarity": 2.8402069087198862,
        "liv_distance": 1.3043478260869565,
        "bert_score": 4.89103376865387,
        "nota_atribuida": 4.000457363174949,
        "percentual_error": 0.12510003675623793
    },
    {
        "answer_number": 2841,
        "answer_values": {
            "number_question": 65,
            "answer_question": "A pointer to a function itself contains the address of the function and can be used to call that function",
            "grade": 5.0
        },
        "frequence_similarity": 3.724947358765278,
        "liv_distance": 0,
        "bert_score": 4.912381023168564,
        "nota_atribuida": 5.501781742235532,
        "percentual_error": 0.09120349838371522
    },
    {
        "answer_number": 2842,
        "answer_values": {
            "number_question": 65,
            "answer_question": "Function Pointers are pointers i e variables which point to the address of a function",
            "grade": 5.0
        },
        "frequence_similarity": 3.531197389230382,
        "liv_distance": 0.07246376811594203,
        "bert_score": 4.906351864337921,
        "nota_atribuida": 5.255708078391333,
        "percentual_error": 0.04865340208727875
    },
    {
        "answer_number": 2843,
        "answer_values": {
            "number_question": 65,
            "answer_question": "A pointer to a function that contains the addresses of the function",
            "grade": 5.0
        },
        "frequence_similarity": 3.917366773784602,
        "liv_distance": 1.0869565217391304,
        "bert_score": 4.940708130598068,
        "nota_atribuida": 5.300659795296216,
        "percentual_error": 0.056721202059226705
    },
    {
        "answer_number": 2844,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a pointer that contains the address of a function",
            "grade": 5.0
        },
        "frequence_similarity": 3.836306209562122,
        "liv_distance": 1.3043478260869565,
        "bert_score": 4.925623834133148,
        "nota_atribuida": 5.121365845812782,
        "percentual_error": 0.023697944936312387
    },
    {
        "answer_number": 2845,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a function pointer is a pointer to a function It can be used in substitution for calling a function",
            "grade": 5.0
        },
        "frequence_similarity": 2.99147318718299,
        "liv_distance": 0,
        "bert_score": 4.905617833137512,
        "nota_atribuida": 4.681528777595288,
        "percentual_error": 0.06369424448094241
    },
    {
        "answer_number": 2846,
        "answer_values": {
            "number_question": 65,
            "answer_question": "Points to the memory address of a function Kind of like breaking a branch off of a tree object and hitting other objects with it",
            "grade": 5.0
        },
        "frequence_similarity": 3.5022296571715916,
        "liv_distance": 0,
        "bert_score": 4.874071180820465,
        "nota_atribuida": 5.242783028261768,
        "percentual_error": 0.04630804421106516
    },
    {
        "answer_number": 2847,
        "answer_values": {
            "number_question": 65,
            "answer_question": "They are pointers that contain the addresses to functions they can be passed and returned from functions as well as stored in arrays and assigned to other function pointers",
            "grade": 5.0
        },
        "frequence_similarity": 2.960131358645194,
        "liv_distance": 0,
        "bert_score": 4.874693602323532,
        "nota_atribuida": 4.638087624848853,
        "percentual_error": 0.07238247503022932
    },
    {
        "answer_number": 2848,
        "answer_values": {
            "number_question": 65,
            "answer_question": "Pointer variables that point to function addresses",
            "grade": 5.0
        },
        "frequence_similarity": 2.722717701593687,
        "liv_distance": 1.8115942028985508,
        "bert_score": 4.906812012195587,
        "nota_atribuida": 3.6760156600845746,
        "percentual_error": 0.2647968679830851
    },
    {
        "answer_number": 2849,
        "answer_values": {
            "number_question": 65,
            "answer_question": "Contains the address of the function in memory",
            "grade": 5.0
        },
        "frequence_similarity": 4.549728979374807,
        "liv_distance": 1.8840579710144927,
        "bert_score": 4.926837384700775,
        "nota_atribuida": 5.691816362023963,
        "percentual_error": 0.12154579804081356
    },
    {
        "answer_number": 2850,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a pointer that points to a function itself which allows passing a function as a parameter to another function",
            "grade": 4.0
        },
        "frequence_similarity": 2.868604890387243,
        "liv_distance": 0,
        "bert_score": 4.901266545057297,
        "nota_atribuida": 4.543242158630563,
        "percentual_error": 0.11957147333619322
    },
    {
        "answer_number": 2851,
        "answer_values": {
            "number_question": 65,
            "answer_question": "pointers that contain the addresses of functions",
            "grade": 5.0
        },
        "frequence_similarity": 3.390870806374748,
        "liv_distance": 1.5942028985507246,
        "bert_score": 4.904815852642059,
        "nota_atribuida": 4.505701001378826,
        "percentual_error": 0.09885979972423475
    },
    {
        "answer_number": 2852,
        "answer_values": {
            "number_question": 65,
            "answer_question": "is a pointer that contains the address of a function",
            "grade": 5.0
        },
        "frequence_similarity": 3.75,
        "liv_distance": 1.3768115942028984,
        "bert_score": 4.936993420124054,
        "nota_atribuida": 4.999942104746789,
        "percentual_error": 1.1579050642196442e-05
    },
    {
        "answer_number": 2853,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a pointer that contains the address of the function definition",
            "grade": 4.5
        },
        "frequence_similarity": 4.0990053726670785,
        "liv_distance": 1.7391304347826086,
        "bert_score": 4.937493205070496,
        "nota_atribuida": 5.248301133830187,
        "percentual_error": 0.14257968716899438
    },
    {
        "answer_number": 2854,
        "answer_values": {
            "number_question": 65,
            "answer_question": "A function pointer contains the memory address of a function Using a function pointer a function can be passed to or returned by another function Function pointers can also be stored in arrays",
            "grade": 5.0
        },
        "frequence_similarity": 3.450146187582615,
        "liv_distance": 0,
        "bert_score": 4.794992208480835,
        "nota_atribuida": 5.163008707371562,
        "percentual_error": 0.03157242542295613
    },
    {
        "answer_number": 2855,
        "answer_values": {
            "number_question": 65,
            "answer_question": "Function pointer is a pointer to a function function pointer contains address of functions",
            "grade": 5.0
        },
        "frequence_similarity": 3.1014065304058605,
        "liv_distance": 0.14492753623188406,
        "bert_score": 4.911637157201767,
        "nota_atribuida": 4.749362318268426,
        "percentual_error": 0.05012753634631473
    },
    {
        "answer_number": 2856,
        "answer_values": {
            "number_question": 65,
            "answer_question": "a pointer that contains the address of a function in memory",
            "grade": 5.0
        },
        "frequence_similarity": 4.071348402636772,
        "liv_distance": 1.5217391304347827,
        "bert_score": 4.937477260828018,
        "nota_atribuida": 5.3021534772698695,
        "percentual_error": 0.05698693532075039
    },
    {
        "answer_number": 2857,
        "answer_values": {
            "number_question": 65,
            "answer_question": "it contains the address of the function in memory",
            "grade": 5.0
        },
        "frequence_similarity": 4.454339899926429,
        "liv_distance": 1.8115942028985508,
        "bert_score": 4.945504367351532,
        "nota_atribuida": 5.6187342081667,
        "percentual_error": 0.11011985711432726
    },
    {
        "answer_number": 2858,
        "answer_values": {
            "number_question": 65,
            "answer_question": "it is a pointer that points to the address of a function",
            "grade": 5.0
        },
        "frequence_similarity": 3.618033988749895,
        "liv_distance": 1.2318840579710144,
        "bert_score": 4.931690096855164,
        "nota_atribuida": 4.907720931275493,
        "percentual_error": 0.01845581374490146
    },
    {
        "answer_number": 2859,
        "answer_values": {
            "number_question": 65,
            "answer_question": "When dereferenced a function pointer invokes a function passing it zero or more arguments just like a normal function In programming languages like C function pointers can be used to simplify code such as replacing large switch statements",
            "grade": 4.0
        },
        "frequence_similarity": 3.010310363079829,
        "liv_distance": 0,
        "bert_score": 4.776115715503693,
        "nota_atribuida": 4.667075485909938,
        "percentual_error": 0.14293222552835527
    },
    {
        "answer_number": 2860,
        "answer_values": {
            "number_question": 66,
            "answer_question": "Consists of sequence of nodes each containing a number of data fields and one or two links called pointers that point to the next or previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 3.0892556509887896,
        "liv_distance": 0,
        "bert_score": 4.899840950965881,
        "nota_atribuida": 4.789050787969436,
        "percentual_error": 0.0603565927293066
    },
    {
        "answer_number": 2861,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a list in which each item in the list points to the next item in the list",
            "grade": 4.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.8984333872795105,
        "nota_atribuida": 4.131181826292179,
        "percentual_error": 0.08195959415729348
    },
    {
        "answer_number": 2862,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a chain of structs or records called nodes and you have the ability to add delete or retrieve items",
            "grade": 4.5
        },
        "frequence_similarity": 2.6843024451936213,
        "liv_distance": 0,
        "bert_score": 4.913721531629562,
        "nota_atribuida": 4.341011513392426,
        "percentual_error": 0.03533077480168301
    },
    {
        "answer_number": 2863,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A list of elements or nodes that are linked to one another such that each element points to the next element",
            "grade": 4.5
        },
        "frequence_similarity": 3.193375245281537,
        "liv_distance": 0,
        "bert_score": 4.953307509422302,
        "nota_atribuida": 4.9198708839725125,
        "percentual_error": 0.0853418501978025
    },
    {
        "answer_number": 2864,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A sequence of nodes each containing data fields - LRB - specified by programmer - RRB - and pointer - LRB - s - RRB - which can point to the next or previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 2.8175003175004765,
        "liv_distance": 0,
        "bert_score": 4.892687797546387,
        "nota_atribuida": 4.4838705928342915,
        "percentual_error": 0.0035843127034907996
    },
    {
        "answer_number": 2865,
        "answer_values": {
            "number_question": 66,
            "answer_question": "a list of nodes where each node contains a data member and also a pointer to the next node",
            "grade": 4.5
        },
        "frequence_similarity": 2.708333333333333,
        "liv_distance": 0,
        "bert_score": 4.923874884843826,
        "nota_atribuida": 4.370605926698394,
        "percentual_error": 0.028754238511468078
    },
    {
        "answer_number": 2866,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A list of items linked together Each item is linked to its successor",
            "grade": 4.5
        },
        "frequence_similarity": 2.736227795630767,
        "liv_distance": 0.603448275862069,
        "bert_score": 4.9065980315208435,
        "nota_atribuida": 4.161838056283177,
        "percentual_error": 0.07514709860373847
    },
    {
        "answer_number": 2867,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list",
            "grade": 4.5
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0,
        "bert_score": 4.926336109638214,
        "nota_atribuida": 4.836191058506902,
        "percentual_error": 0.06951566934386078
    },
    {
        "answer_number": 2868,
        "answer_values": {
            "number_question": 66,
            "answer_question": "one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 3.0320353317242175,
        "liv_distance": 0,
        "bert_score": 4.869491457939148,
        "nota_atribuida": 4.716892192953043,
        "percentual_error": 0.04598201190119988
    },
    {
        "answer_number": 2869,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A data structure in a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 2.65625,
        "liv_distance": 0,
        "bert_score": 4.9236860871315,
        "nota_atribuida": 4.312440340562377,
        "percentual_error": 0.04167992431947176
    },
    {
        "answer_number": 2870,
        "answer_values": {
            "number_question": 66,
            "answer_question": "Information in memory linked to the next piece of information and can only be linked forwards and not backwards",
            "grade": 3.5
        },
        "frequence_similarity": 3.0303300858899105,
        "liv_distance": 0,
        "bert_score": 4.914125055074692,
        "nota_atribuida": 4.727214964192572,
        "percentual_error": 0.2596063376614788
    },
    {
        "answer_number": 2871,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a data structure containing one or more data elements with a pointer to the next node",
            "grade": 4.5
        },
        "frequence_similarity": 2.702776776413453,
        "liv_distance": 0,
        "bert_score": 4.922225624322891,
        "nota_atribuida": 4.363954252014526,
        "percentual_error": 0.03023238844121634
    },
    {
        "answer_number": 2872,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A series of Nodes structures with a value and a pointer that point to a similar Node Not quite an array but still can carry a list of values",
            "grade": 4.5
        },
        "frequence_similarity": 3.193375245281537,
        "liv_distance": 0,
        "bert_score": 4.9165865778923035,
        "nota_atribuida": 4.90981275835239,
        "percentual_error": 0.08346810327038079
    },
    {
        "answer_number": 2873,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A data type that contains a pointer to at least the next element in a list",
            "grade": 4.5
        },
        "frequence_similarity": 2.74514516892273,
        "liv_distance": 0.43103448275862066,
        "bert_score": 4.939396530389786,
        "nota_atribuida": 4.2479602194896335,
        "percentual_error": 0.05600884011341478
    },
    {
        "answer_number": 2874,
        "answer_values": {
            "number_question": 66,
            "answer_question": "Each component contains a Node a data item and a pointer to the next item in the list",
            "grade": 4.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.916665554046631,
        "nota_atribuida": 4.136175747089666,
        "percentual_error": 0.08084983398007417
    },
    {
        "answer_number": 2875,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a chain of structs or records called nodes Each node has at least two members one of which points to the next item or node in the list",
            "grade": 4.5
        },
        "frequence_similarity": 2.779508497187474,
        "liv_distance": 0,
        "bert_score": 4.9155159294605255,
        "nota_atribuida": 4.447732626311076,
        "percentual_error": 0.01161497193087202
    },
    {
        "answer_number": 2876,
        "answer_values": {
            "number_question": 66,
            "answer_question": "An array based list that uses an implicit ordering scheme often using pointers",
            "grade": 2.5
        },
        "frequence_similarity": 2.728217732293819,
        "liv_distance": 0,
        "bert_score": 4.931318908929825,
        "nota_atribuida": 4.394831639308256,
        "percentual_error": 0.4311499949987848
    },
    {
        "answer_number": 2877,
        "answer_values": {
            "number_question": 66,
            "answer_question": "a series of structures containing data items and a pointer that links the structure to the next structure",
            "grade": 4.5
        },
        "frequence_similarity": 2.8952847075210473,
        "liv_distance": 0,
        "bert_score": 4.9273501336574554,
        "nota_atribuida": 4.580155616124133,
        "percentual_error": 0.017500631603421968
    },
    {
        "answer_number": 2878,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a collection of Objects each containing at least one data member and a pointer to the next object in the list - LRB - and the previous object in the case of a doubly linked list - RRB -",
            "grade": 4.5
        },
        "frequence_similarity": 2.8340765523905302,
        "liv_distance": 0,
        "bert_score": 4.930167198181152,
        "nota_atribuida": 4.512632005410238,
        "percentual_error": 0.0027992544916343176
    },
    {
        "answer_number": 2879,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A link list is a data structure which is built from structures and pointers It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together",
            "grade": 4.0
        },
        "frequence_similarity": 2.757855311564698,
        "liv_distance": 0,
        "bert_score": 4.92644876241684,
        "nota_atribuida": 4.4265668781617675,
        "percentual_error": 0.09636517190471305
    },
    {
        "answer_number": 2880,
        "answer_values": {
            "number_question": 66,
            "answer_question": "its a list of pointers that are linked 2 each other every pointer points to the next pointer which has the next element",
            "grade": 4.5
        },
        "frequence_similarity": 2.8402069087198853,
        "liv_distance": 0,
        "bert_score": 4.925334006547928,
        "nota_atribuida": 4.518148327670189,
        "percentual_error": 0.004016762256131345
    },
    {
        "answer_number": 2881,
        "answer_values": {
            "number_question": 66,
            "answer_question": "linear collection of self - referential nodes connected by pointers",
            "grade": 4.0
        },
        "frequence_similarity": 3.0892556509887896,
        "liv_distance": 1.6379310344827587,
        "bert_score": 4.891081154346466,
        "nota_atribuida": 4.148360321142659,
        "percentual_error": 0.03576360529400535
    },
    {
        "answer_number": 2882,
        "answer_values": {
            "number_question": 66,
            "answer_question": "the items of a data structure are linked to each other using pointers",
            "grade": 4.5
        },
        "frequence_similarity": 2.7551551815399145,
        "liv_distance": 0.3448275862068966,
        "bert_score": 4.923739582300186,
        "nota_atribuida": 4.288434973276961,
        "percentual_error": 0.04701445038289753
    },
    {
        "answer_number": 2883,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A list of objects where each object contains a link to the next item in the list",
            "grade": 4.5
        },
        "frequence_similarity": 2.702776776413453,
        "liv_distance": 0,
        "bert_score": 4.9248306453228,
        "nota_atribuida": 4.364667785886582,
        "percentual_error": 0.03007382535853731
    },
    {
        "answer_number": 2884,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 3.020833333333333,
        "liv_distance": 0,
        "bert_score": 4.829797744750977,
        "nota_atribuida": 4.69352076414064,
        "percentual_error": 0.04123147075840683
    },
    {
        "answer_number": 2885,
        "answer_values": {
            "number_question": 66,
            "answer_question": "Consists of sequence of nodes each containing a number of data fields and one or two links called pointers that point to the next or previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 3.0892556509887896,
        "liv_distance": 0,
        "bert_score": 4.899840950965881,
        "nota_atribuida": 4.789050787969436,
        "percentual_error": 0.0603565927293066
    },
    {
        "answer_number": 2886,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a list in which each item in the list points to the next item in the list",
            "grade": 4.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.8984333872795105,
        "nota_atribuida": 4.131181826292179,
        "percentual_error": 0.08195959415729348
    },
    {
        "answer_number": 2887,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a chain of structs or records called nodes and you have the ability to add delete or retrieve items",
            "grade": 4.5
        },
        "frequence_similarity": 2.6843024451936213,
        "liv_distance": 0,
        "bert_score": 4.913721531629562,
        "nota_atribuida": 4.341011513392426,
        "percentual_error": 0.03533077480168301
    },
    {
        "answer_number": 2888,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A list of elements or nodes that are linked to one another such that each element points to the next element",
            "grade": 4.5
        },
        "frequence_similarity": 3.193375245281537,
        "liv_distance": 0,
        "bert_score": 4.953307509422302,
        "nota_atribuida": 4.9198708839725125,
        "percentual_error": 0.0853418501978025
    },
    {
        "answer_number": 2889,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A sequence of nodes each containing data fields - LRB - specified by programmer - RRB - and pointer - LRB - s - RRB - which can point to the next or previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 2.8175003175004765,
        "liv_distance": 0,
        "bert_score": 4.892687797546387,
        "nota_atribuida": 4.4838705928342915,
        "percentual_error": 0.0035843127034907996
    },
    {
        "answer_number": 2890,
        "answer_values": {
            "number_question": 66,
            "answer_question": "a list of nodes where each node contains a data member and also a pointer to the next node",
            "grade": 4.5
        },
        "frequence_similarity": 2.708333333333333,
        "liv_distance": 0,
        "bert_score": 4.923874884843826,
        "nota_atribuida": 4.370605926698394,
        "percentual_error": 0.028754238511468078
    },
    {
        "answer_number": 2891,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A list of items linked together Each item is linked to its successor",
            "grade": 4.5
        },
        "frequence_similarity": 2.736227795630767,
        "liv_distance": 0.603448275862069,
        "bert_score": 4.9065980315208435,
        "nota_atribuida": 4.161838056283177,
        "percentual_error": 0.07514709860373847
    },
    {
        "answer_number": 2892,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list",
            "grade": 4.5
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0,
        "bert_score": 4.926336109638214,
        "nota_atribuida": 4.836191058506902,
        "percentual_error": 0.06951566934386078
    },
    {
        "answer_number": 2893,
        "answer_values": {
            "number_question": 66,
            "answer_question": "one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 3.0320353317242175,
        "liv_distance": 0,
        "bert_score": 4.869491457939148,
        "nota_atribuida": 4.716892192953043,
        "percentual_error": 0.04598201190119988
    },
    {
        "answer_number": 2894,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A data structure in a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 2.65625,
        "liv_distance": 0,
        "bert_score": 4.9236860871315,
        "nota_atribuida": 4.312440340562377,
        "percentual_error": 0.04167992431947176
    },
    {
        "answer_number": 2895,
        "answer_values": {
            "number_question": 66,
            "answer_question": "Information in memory linked to the next piece of information and can only be linked forwards and not backwards",
            "grade": 3.5
        },
        "frequence_similarity": 3.0303300858899105,
        "liv_distance": 0,
        "bert_score": 4.914125055074692,
        "nota_atribuida": 4.727214964192572,
        "percentual_error": 0.2596063376614788
    },
    {
        "answer_number": 2896,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item",
            "grade": 5.0
        },
        "frequence_similarity": 2.592656164582637,
        "liv_distance": 0,
        "bert_score": 4.871021062135696,
        "nota_atribuida": 4.227057879422469,
        "percentual_error": 0.1545884241155061
    },
    {
        "answer_number": 2897,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a data structure containing one or more data elements with a pointer to the next node",
            "grade": 4.5
        },
        "frequence_similarity": 2.702776776413453,
        "liv_distance": 0,
        "bert_score": 4.922225624322891,
        "nota_atribuida": 4.363954252014526,
        "percentual_error": 0.03023238844121634
    },
    {
        "answer_number": 2898,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A series of Nodes structures with a value and a pointer that point to a similar Node Not quite an array but still can carry a list of values",
            "grade": 4.5
        },
        "frequence_similarity": 3.193375245281537,
        "liv_distance": 0,
        "bert_score": 4.9165865778923035,
        "nota_atribuida": 4.90981275835239,
        "percentual_error": 0.08346810327038079
    },
    {
        "answer_number": 2899,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A data type that contains a pointer to at least the next element in a list",
            "grade": 4.5
        },
        "frequence_similarity": 2.74514516892273,
        "liv_distance": 0.43103448275862066,
        "bert_score": 4.939396530389786,
        "nota_atribuida": 4.2479602194896335,
        "percentual_error": 0.05600884011341478
    },
    {
        "answer_number": 2900,
        "answer_values": {
            "number_question": 66,
            "answer_question": "Each component contains a Node a data item and a pointer to the next item in the list",
            "grade": 4.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.916665554046631,
        "nota_atribuida": 4.136175747089666,
        "percentual_error": 0.08084983398007417
    },
    {
        "answer_number": 2901,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a chain of structs or records called nodes Each node has at least two members one of which points to the next item or node in the list",
            "grade": 4.5
        },
        "frequence_similarity": 2.779508497187474,
        "liv_distance": 0,
        "bert_score": 4.9155159294605255,
        "nota_atribuida": 4.447732626311076,
        "percentual_error": 0.01161497193087202
    },
    {
        "answer_number": 2902,
        "answer_values": {
            "number_question": 66,
            "answer_question": "An array based list that uses an implicit ordering scheme often using pointers",
            "grade": 2.5
        },
        "frequence_similarity": 2.728217732293819,
        "liv_distance": 0,
        "bert_score": 4.931318908929825,
        "nota_atribuida": 4.394831639308256,
        "percentual_error": 0.4311499949987848
    },
    {
        "answer_number": 2903,
        "answer_values": {
            "number_question": 66,
            "answer_question": "a series of structures containing data items and a pointer that links the structure to the next structure",
            "grade": 4.5
        },
        "frequence_similarity": 2.8952847075210473,
        "liv_distance": 0,
        "bert_score": 4.9273501336574554,
        "nota_atribuida": 4.580155616124133,
        "percentual_error": 0.017500631603421968
    },
    {
        "answer_number": 2904,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is a collection of Objects each containing at least one data member and a pointer to the next object in the list - LRB - and the previous object in the case of a doubly linked list - RRB -",
            "grade": 4.5
        },
        "frequence_similarity": 2.8340765523905302,
        "liv_distance": 0,
        "bert_score": 4.930167198181152,
        "nota_atribuida": 4.512632005410238,
        "percentual_error": 0.0027992544916343176
    },
    {
        "answer_number": 2905,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A link list is a data structure which is built from structures and pointers It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together",
            "grade": 4.0
        },
        "frequence_similarity": 2.757855311564698,
        "liv_distance": 0,
        "bert_score": 4.92644876241684,
        "nota_atribuida": 4.4265668781617675,
        "percentual_error": 0.09636517190471305
    },
    {
        "answer_number": 2906,
        "answer_values": {
            "number_question": 66,
            "answer_question": "its a list of pointers that are linked 2 each other every pointer points to the next pointer which has the next element",
            "grade": 4.5
        },
        "frequence_similarity": 2.8402069087198853,
        "liv_distance": 0,
        "bert_score": 4.925334006547928,
        "nota_atribuida": 4.518148327670189,
        "percentual_error": 0.004016762256131345
    },
    {
        "answer_number": 2907,
        "answer_values": {
            "number_question": 66,
            "answer_question": "linear collection of self - referential nodes connected by pointers",
            "grade": 4.0
        },
        "frequence_similarity": 3.0892556509887896,
        "liv_distance": 1.6379310344827587,
        "bert_score": 4.891081154346466,
        "nota_atribuida": 4.148360321142659,
        "percentual_error": 0.03576360529400535
    },
    {
        "answer_number": 2908,
        "answer_values": {
            "number_question": 66,
            "answer_question": "the items of a data structure are linked to each other using pointers",
            "grade": 4.5
        },
        "frequence_similarity": 2.7551551815399145,
        "liv_distance": 0.3448275862068966,
        "bert_score": 4.923739582300186,
        "nota_atribuida": 4.288434973276961,
        "percentual_error": 0.04701445038289753
    },
    {
        "answer_number": 2909,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A list of objects where each object contains a link to the next item in the list",
            "grade": 4.5
        },
        "frequence_similarity": 2.702776776413453,
        "liv_distance": 0,
        "bert_score": 4.9248306453228,
        "nota_atribuida": 4.364667785886582,
        "percentual_error": 0.03007382535853731
    },
    {
        "answer_number": 2910,
        "answer_values": {
            "number_question": 66,
            "answer_question": "A linked list is one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes",
            "grade": 4.5
        },
        "frequence_similarity": 3.020833333333333,
        "liv_distance": 0,
        "bert_score": 4.829797744750977,
        "nota_atribuida": 4.69352076414064,
        "percentual_error": 0.04123147075840683
    },
    {
        "answer_number": 2911,
        "answer_values": {
            "number_question": 67,
            "answer_question": "You can insert into and delete items from a pointer - based linked list without shifting data",
            "grade": 4.5
        },
        "frequence_similarity": 2.9564354645876385,
        "liv_distance": 0,
        "bert_score": 4.8919981718063354,
        "nota_atribuida": 4.638703641929934,
        "percentual_error": 0.029901380350357054
    },
    {
        "answer_number": 2912,
        "answer_values": {
            "number_question": 67,
            "answer_question": "The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk allowing the list of items to be traversed in a different order A linked list is a self - referential datatype because it contains a pointer or link to another datum of the same type Linked lists permit insertion and removal of nodes at any point in the list in constant time",
            "grade": 4.0
        },
        "frequence_similarity": 3.7000384018432984,
        "liv_distance": 0,
        "bert_score": 4.7287097573280334,
        "nota_atribuida": 5.423679795215662,
        "percentual_error": 0.26249333459388935
    },
    {
        "answer_number": 2913,
        "answer_values": {
            "number_question": 67,
            "answer_question": "There is no limit as to how many you create where an array can only hold a given amount of information",
            "grade": 3.0
        },
        "frequence_similarity": 2.8952847075210473,
        "liv_distance": 0,
        "bert_score": 4.871801882982254,
        "nota_atribuida": 4.5649405532161325,
        "percentual_error": 0.342817290821802
    },
    {
        "answer_number": 2914,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Linked lists have constant time insertion and deletion",
            "grade": 3.5
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0.7142857142857143,
        "bert_score": 4.910764545202255,
        "nota_atribuida": 4.553573387710461,
        "percentual_error": 0.2313728797155059
    },
    {
        "answer_number": 2915,
        "answer_values": {
            "number_question": 67,
            "answer_question": "more memory can be allocated on the fly for more items",
            "grade": 4.5
        },
        "frequence_similarity": 3.23543550676819,
        "liv_distance": 0.11904761904761904,
        "bert_score": 4.866222143173218,
        "nota_atribuida": 4.896555761229192,
        "percentual_error": 0.08098667319774255
    },
    {
        "answer_number": 2916,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be",
            "grade": 5.0
        },
        "frequence_similarity": 3.1350006350009525,
        "liv_distance": 0,
        "bert_score": 4.8880453407764435,
        "nota_atribuida": 4.836861515379998,
        "percentual_error": 0.03262769692400036
    },
    {
        "answer_number": 2917,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Unlike arrays linked lists can insert and delete without shifting data and change in size easily",
            "grade": 5.0
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0,
        "bert_score": 4.877293258905411,
        "nota_atribuida": 4.822757871142455,
        "percentual_error": 0.03544842577150897
    },
    {
        "answer_number": 2918,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Array size is fixed but Linked is not fixed",
            "grade": 5.0
        },
        "frequence_similarity": 2.74514516892273,
        "liv_distance": 0.7142857142857143,
        "bert_score": 4.8887646198272705,
        "nota_atribuida": 4.123710610316033,
        "percentual_error": 0.17525787793679337
    },
    {
        "answer_number": 2919,
        "answer_values": {
            "number_question": 67,
            "answer_question": "You can insert into and delete items from a pointer - based linked list without shifting data",
            "grade": 4.5
        },
        "frequence_similarity": 2.9564354645876385,
        "liv_distance": 0,
        "bert_score": 4.8919981718063354,
        "nota_atribuida": 4.638703641929934,
        "percentual_error": 0.029901380350357054
    },
    {
        "answer_number": 2920,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Arrays must be of a defined size elements can be added to a linked list with o defining any size",
            "grade": 5.0
        },
        "frequence_similarity": 3.4643959372630744,
        "liv_distance": 0,
        "bert_score": 4.901484549045563,
        "nota_atribuida": 5.20807739701387,
        "percentual_error": 0.03995282349935403
    },
    {
        "answer_number": 2921,
        "answer_values": {
            "number_question": 67,
            "answer_question": "The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk allowing the list of items to be traversed in a different order A linked list is a self - referential datatype because it contains a pointer or link to another datum of the same type Linked lists permit insertion and removal of nodes at any point in the list in constant time",
            "grade": 4.0
        },
        "frequence_similarity": 3.7000384018432984,
        "liv_distance": 0,
        "bert_score": 4.7287097573280334,
        "nota_atribuida": 5.423679795215662,
        "percentual_error": 0.26249333459388935
    },
    {
        "answer_number": 2922,
        "answer_values": {
            "number_question": 67,
            "answer_question": "You can expand when you need it You do not have to predetermine the size",
            "grade": 5.0
        },
        "frequence_similarity": 2.8857583749052296,
        "liv_distance": 0,
        "bert_score": 4.83273983001709,
        "nota_atribuida": 4.543611825675211,
        "percentual_error": 0.09127763486495777
    },
    {
        "answer_number": 2923,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Linked lists are able to grow and shrink in size as needed",
            "grade": 5.0
        },
        "frequence_similarity": 3.010310363079829,
        "liv_distance": 0.35714285714285715,
        "bert_score": 4.883444607257843,
        "nota_atribuida": 4.557297382529923,
        "percentual_error": 0.08854052349401553
    },
    {
        "answer_number": 2924,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Linked list is able to grow in size as needed Does not require the shifting of items during insertions and deletions",
            "grade": 5.0
        },
        "frequence_similarity": 3.0786375623578444,
        "liv_distance": 0,
        "bert_score": 4.839572161436081,
        "nota_atribuida": 4.760695217228017,
        "percentual_error": 0.047860956554396594
    },
    {
        "answer_number": 2925,
        "answer_values": {
            "number_question": 67,
            "answer_question": "A linked list is not fixed in size and does not require the shifting of items during insertions and deletions",
            "grade": 5.0
        },
        "frequence_similarity": 3.0529073355808647,
        "liv_distance": 0,
        "bert_score": 4.895292669534683,
        "nota_atribuida": 4.747248026510916,
        "percentual_error": 0.05055039469781675
    },
    {
        "answer_number": 2926,
        "answer_values": {
            "number_question": 67,
            "answer_question": "There is no limit as to how many you create where an array can only hold a given amount of information",
            "grade": 3.0
        },
        "frequence_similarity": 2.8952847075210473,
        "liv_distance": 0,
        "bert_score": 4.871801882982254,
        "nota_atribuida": 4.5649405532161325,
        "percentual_error": 0.342817290821802
    },
    {
        "answer_number": 2927,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Linked lists have constant time insertion and deletion",
            "grade": 3.5
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0.7142857142857143,
        "bert_score": 4.910764545202255,
        "nota_atribuida": 4.553573387710461,
        "percentual_error": 0.2313728797155059
    },
    {
        "answer_number": 2928,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Linked lists can be grown dynamically items do not require shifting and they have a greater awesome factor than that of arrays",
            "grade": 5.0
        },
        "frequence_similarity": 3.4643959372630744,
        "liv_distance": 0,
        "bert_score": 4.885733425617218,
        "nota_atribuida": 5.2037630517208875,
        "percentual_error": 0.03915686584797573
    },
    {
        "answer_number": 2929,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Linked lists have an indefinite size They can be added to and taken away from very easily with little difficulty in the shifting of data",
            "grade": 5.0
        },
        "frequence_similarity": 3.5606601717798214,
        "liv_distance": 0,
        "bert_score": 4.9174849689006805,
        "nota_atribuida": 5.319870346535832,
        "percentual_error": 0.0601274703516268
    },
    {
        "answer_number": 2930,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Nearly infinite size limited only by system memory and also the ability to expand the size dynamically",
            "grade": 5.0
        },
        "frequence_similarity": 2.8857583749052296,
        "liv_distance": 0,
        "bert_score": 4.796213060617447,
        "nota_atribuida": 4.533606882450425,
        "percentual_error": 0.09327862350991489
    },
    {
        "answer_number": 2931,
        "answer_values": {
            "number_question": 67,
            "answer_question": "They grow as needed while arrays are of fixed size",
            "grade": 5.0
        },
        "frequence_similarity": 2.779508497187474,
        "liv_distance": 0.5952380952380952,
        "bert_score": 4.894344508647919,
        "nota_atribuida": 4.209973199492211,
        "percentual_error": 0.15800536010155786
    },
    {
        "answer_number": 2932,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Does not have a fixed size Linked list is able to grow as needed The time to access an array bases list takes a contant amount of time where as an linked - base like depends on i",
            "grade": 5.0
        },
        "frequence_similarity": 3.021286035142687,
        "liv_distance": 0,
        "bert_score": 4.839184731245041,
        "nota_atribuida": 4.696597045343272,
        "percentual_error": 0.06068059093134559
    },
    {
        "answer_number": 2933,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Linked lists can grow and shrink as you need them to Arrays have a fixed size",
            "grade": 5.0
        },
        "frequence_similarity": 3.1846531968814573,
        "liv_distance": 0,
        "bert_score": 4.895391166210175,
        "nota_atribuida": 4.894275240926367,
        "percentual_error": 0.02114495181472653
    },
    {
        "answer_number": 2934,
        "answer_values": {
            "number_question": 67,
            "answer_question": "more memory can be allocated on the fly for more items",
            "grade": 4.5
        },
        "frequence_similarity": 3.23543550676819,
        "liv_distance": 0.11904761904761904,
        "bert_score": 4.866222143173218,
        "nota_atribuida": 4.896555761229192,
        "percentual_error": 0.08098667319774255
    },
    {
        "answer_number": 2935,
        "answer_values": {
            "number_question": 67,
            "answer_question": "A linked list may be increased in size as needed while an array size is set when it is created",
            "grade": 5.0
        },
        "frequence_similarity": 2.868604890387243,
        "liv_distance": 0,
        "bert_score": 4.889625310897827,
        "nota_atribuida": 4.540053541385013,
        "percentual_error": 0.09198929172299741
    },
    {
        "answer_number": 2936,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Array has a fixed size but linked list is able to grow in size as needed",
            "grade": 5.0
        },
        "frequence_similarity": 2.714373231428136,
        "liv_distance": 0,
        "bert_score": 4.900509268045425,
        "nota_atribuida": 4.3709451531748735,
        "percentual_error": 0.12581096936502534
    },
    {
        "answer_number": 2937,
        "answer_values": {
            "number_question": 67,
            "answer_question": "its resizeable",
            "grade": 5.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.0714285714285714,
        "bert_score": 4.745269417762756,
        "nota_atribuida": 3.671700358262969,
        "percentual_error": 0.26565992834740615
    },
    {
        "answer_number": 2938,
        "answer_values": {
            "number_question": 67,
            "answer_question": "Linked lists do not have a set size and can grow or shrink as needed",
            "grade": 5.0
        },
        "frequence_similarity": 3.208683386892301,
        "liv_distance": 0,
        "bert_score": 4.903198331594467,
        "nota_atribuida": 4.92322623765294,
        "percentual_error": 0.015354752469412092
    },
    {
        "answer_number": 2939,
        "answer_values": {
            "number_question": 67,
            "answer_question": "linked lists are abe to grow as needed to a new size",
            "grade": 5.0
        },
        "frequence_similarity": 2.99029033784546,
        "liv_distance": 0.9523809523809523,
        "bert_score": 4.895114451646805,
        "nota_atribuida": 4.3061953418415335,
        "percentual_error": 0.13876093163169334
    },
    {
        "answer_number": 2940,
        "answer_values": {
            "number_question": 67,
            "answer_question": "The size is not fixed easier sorting because of no shifting easier to insert items into the list",
            "grade": 5.0
        },
        "frequence_similarity": 3.065333771083307,
        "liv_distance": 0,
        "bert_score": 4.8844727873802185,
        "nota_atribuida": 4.758149630729545,
        "percentual_error": 0.04837007385409087
    },
    {
        "answer_number": 2941,
        "answer_values": {
            "number_question": 67,
            "answer_question": "The size of array is restricted to declaration Insertion or Deletion of values in middle of array is not possible",
            "grade": 5.0
        },
        "frequence_similarity": 3.1454972243679027,
        "liv_distance": 0,
        "bert_score": 4.868133962154388,
        "nota_atribuida": 4.8431195977304915,
        "percentual_error": 0.03137608045390172
    },
    {
        "answer_number": 2942,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Arrays require less memory than linked lists and allow direct access to a specified item Also insertion and deletion in arrays does not require a list traversal",
            "grade": 4.5
        },
        "frequence_similarity": 3.202816912789687,
        "liv_distance": 0.5158730158730159,
        "bert_score": 4.9247220158576965,
        "nota_atribuida": 4.721543629929646,
        "percentual_error": 0.0469218643930962
    },
    {
        "answer_number": 2943,
        "answer_values": {
            "number_question": 68,
            "answer_question": "You have to keep up with the head of the list",
            "grade": 2.0
        },
        "frequence_similarity": 2.9651302547095315,
        "liv_distance": 0.873015873015873,
        "bert_score": 4.811399579048157,
        "nota_atribuida": 4.286120018638287,
        "percentual_error": 0.5333775089584621
    },
    {
        "answer_number": 2944,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Arrays are easier to implement and require less memory",
            "grade": 3.5
        },
        "frequence_similarity": 2.8726779962499647,
        "liv_distance": 1.2301587301587302,
        "bert_score": 4.846824556589127,
        "nota_atribuida": 4.053489949946525,
        "percentual_error": 0.13654652084528462
    },
    {
        "answer_number": 2945,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Linked list has an increase complexity of the implementation The linked list has an array that keeps growing which leads to a increase in memory",
            "grade": 2.5
        },
        "frequence_similarity": 3.431694990624912,
        "liv_distance": 0.6746031746031746,
        "bert_score": 4.889102876186371,
        "nota_atribuida": 4.905310218214231,
        "percentual_error": 0.49034823715795073
    },
    {
        "answer_number": 2946,
        "answer_values": {
            "number_question": 68,
            "answer_question": "You do not have to iterate through the entire list to access elements",
            "grade": 4.5
        },
        "frequence_similarity": 3.077350269189626,
        "liv_distance": 1.1111111111111112,
        "bert_score": 4.8635463416576385,
        "nota_atribuida": 4.332832782176356,
        "percentual_error": 0.03714827062747639
    },
    {
        "answer_number": 2947,
        "answer_values": {
            "number_question": 68,
            "answer_question": "you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data",
            "grade": 3.0
        },
        "frequence_similarity": 3.0707870639217623,
        "liv_distance": 0.9523809523809523,
        "bert_score": 4.876057654619217,
        "nota_atribuida": 4.390792698174721,
        "percentual_error": 0.31675207503029734
    },
    {
        "answer_number": 2948,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Take up less memory and are contiguously stored",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.9523809523809523,
        "bert_score": 4.836317598819733,
        "nota_atribuida": 3.743031190514937,
        "percentual_error": 0.06424220237126577
    },
    {
        "answer_number": 2949,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Arrays being fixed are less error prone",
            "grade": 2.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.9920634920634921,
        "bert_score": 4.827035814523697,
        "nota_atribuida": 3.725024815229928,
        "percentual_error": 0.46309082510728194
    },
    {
        "answer_number": 2950,
        "answer_values": {
            "number_question": 68,
            "answer_question": "direct access to elements and speed linked lists have increased search times to access elements even if the list is sorted - LRB - like getting the last element without a pointer directly to the end of the list - RRB -",
            "grade": 4.5
        },
        "frequence_similarity": 3.502047085049269,
        "liv_distance": 0,
        "bert_score": 4.914544075727463,
        "nota_atribuida": 5.253665131984732,
        "percentual_error": 0.143455114296562
    },
    {
        "answer_number": 2951,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array - bases implementations require less memory than a pointer - bases one",
            "grade": 3.5
        },
        "frequence_similarity": 2.8227486121839513,
        "liv_distance": 1.2301587301587302,
        "bert_score": 4.869112968444824,
        "nota_atribuida": 4.003884379393805,
        "percentual_error": 0.12584888364585933
    },
    {
        "answer_number": 2952,
        "answer_values": {
            "number_question": 68,
            "answer_question": "link lists only allow sequential access where arrays allow random access",
            "grade": 4.5
        },
        "frequence_similarity": 2.644337567297406,
        "liv_distance": 1.1507936507936507,
        "bert_score": 4.84893411397934,
        "nota_atribuida": 3.8302166924028747,
        "percentual_error": 0.14884073502158346
    },
    {
        "answer_number": 2953,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array based implementation requires less memory than lined lists based implementation",
            "grade": 3.5
        },
        "frequence_similarity": 2.788675134594813,
        "liv_distance": 1.2698412698412698,
        "bert_score": 4.845493137836456,
        "nota_atribuida": 3.943931989091125,
        "percentual_error": 0.11256076177759566
    },
    {
        "answer_number": 2954,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array - based implementations require less memory than a pointer - based ones",
            "grade": 3.5
        },
        "frequence_similarity": 2.8227486121839513,
        "liv_distance": 1.2301587301587302,
        "bert_score": 4.857238382101059,
        "nota_atribuida": 4.000631845317021,
        "percentual_error": 0.12513819433373774
    },
    {
        "answer_number": 2955,
        "answer_values": {
            "number_question": 68,
            "answer_question": "You can go up and down an array but you can only go one direction while traversing a linked list",
            "grade": 3.0
        },
        "frequence_similarity": 3.0590169943749475,
        "liv_distance": 1.3492063492063493,
        "bert_score": 4.887285679578781,
        "nota_atribuida": 4.226094969151011,
        "percentual_error": 0.29012480270818986
    },
    {
        "answer_number": 2956,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node",
            "grade": 5.0
        },
        "frequence_similarity": 3.157793514480272,
        "liv_distance": 0.9126984126984127,
        "bert_score": 4.931776821613312,
        "nota_atribuida": 4.518599215566054,
        "percentual_error": 0.09628015688678926
    },
    {
        "answer_number": 2957,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Arrays require less memory than linked lists and allow direct access to a specified item Also insertion and deletion in arrays does not require a list traversal",
            "grade": 4.5
        },
        "frequence_similarity": 3.202816912789687,
        "liv_distance": 0.5158730158730159,
        "bert_score": 4.9247220158576965,
        "nota_atribuida": 4.721543629929646,
        "percentual_error": 0.0469218643930962
    },
    {
        "answer_number": 2958,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Access to a particular element is very fast because its location in memory can be determined mathematically and accessed directly",
            "grade": 5.0
        },
        "frequence_similarity": 3.269483764063865,
        "liv_distance": 0.9126984126984127,
        "bert_score": 4.924201667308807,
        "nota_atribuida": 4.641146784065091,
        "percentual_error": 0.07177064318698179
    },
    {
        "answer_number": 2959,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Arrays are good for random access and good for sequential access which are both in constant time Where linked lists are linear for random access Arrays are faster in this case",
            "grade": 5.0
        },
        "frequence_similarity": 2.8521476061368816,
        "liv_distance": 0.03968253968253968,
        "bert_score": 4.888179153203964,
        "nota_atribuida": 4.5058305868889175,
        "percentual_error": 0.09883388262221648
    },
    {
        "answer_number": 2960,
        "answer_values": {
            "number_question": 68,
            "answer_question": "An array is capable of accessing any part of that array based on the index The link list must be traversed from the beginning or the end that is data can only be accessed if it is adjacent to the previous or next nodes",
            "grade": 5.0
        },
        "frequence_similarity": 3.3125,
        "liv_distance": 0,
        "bert_score": 4.9438537657260895,
        "nota_atribuida": 5.050199212857397,
        "percentual_error": 0.009940046073745656
    },
    {
        "answer_number": 2961,
        "answer_values": {
            "number_question": 68,
            "answer_question": "On the other hand arrays allow random access while linked lists allow only sequential access to elements Singly - linked lists in fact can only be traversed in one direction",
            "grade": 5.0
        },
        "frequence_similarity": 3.46034165668317,
        "liv_distance": 0.3968253968253968,
        "bert_score": 4.916100800037384,
        "nota_atribuida": 5.052916899430833,
        "percentual_error": 0.01047254496443295
    },
    {
        "answer_number": 2962,
        "answer_values": {
            "number_question": 68,
            "answer_question": "You have to keep up with the head of the list",
            "grade": 2.0
        },
        "frequence_similarity": 2.9651302547095315,
        "liv_distance": 0.873015873015873,
        "bert_score": 4.811399579048157,
        "nota_atribuida": 4.286120018638287,
        "percentual_error": 0.5333775089584621
    },
    {
        "answer_number": 2963,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Arrays are easier to implement and require less memory",
            "grade": 3.5
        },
        "frequence_similarity": 2.8726779962499647,
        "liv_distance": 1.2301587301587302,
        "bert_score": 4.846824556589127,
        "nota_atribuida": 4.053489949946525,
        "percentual_error": 0.13654652084528462
    },
    {
        "answer_number": 2964,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Linked list has an increase complexity of the implementation The linked list has an array that keeps growing which leads to a increase in memory",
            "grade": 2.5
        },
        "frequence_similarity": 3.431694990624912,
        "liv_distance": 0.6746031746031746,
        "bert_score": 4.889102876186371,
        "nota_atribuida": 4.905310218214231,
        "percentual_error": 0.49034823715795073
    },
    {
        "answer_number": 2965,
        "answer_values": {
            "number_question": 68,
            "answer_question": "You do not have to iterate through the entire list to access elements",
            "grade": 4.5
        },
        "frequence_similarity": 3.077350269189626,
        "liv_distance": 1.1111111111111112,
        "bert_score": 4.8635463416576385,
        "nota_atribuida": 4.332832782176356,
        "percentual_error": 0.03714827062747639
    },
    {
        "answer_number": 2966,
        "answer_values": {
            "number_question": 68,
            "answer_question": "you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data",
            "grade": 3.0
        },
        "frequence_similarity": 3.0707870639217623,
        "liv_distance": 0.9523809523809523,
        "bert_score": 4.876057654619217,
        "nota_atribuida": 4.390792698174721,
        "percentual_error": 0.31675207503029734
    },
    {
        "answer_number": 2967,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Take up less memory and are contiguously stored",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.9523809523809523,
        "bert_score": 4.836317598819733,
        "nota_atribuida": 3.743031190514937,
        "percentual_error": 0.06424220237126577
    },
    {
        "answer_number": 2968,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Arrays being fixed are less error prone",
            "grade": 2.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.9920634920634921,
        "bert_score": 4.827035814523697,
        "nota_atribuida": 3.725024815229928,
        "percentual_error": 0.46309082510728194
    },
    {
        "answer_number": 2969,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Arrays have a set list of values Meaning you can pick a spot in the array such as a 7 picks the 8th spot in the array With linked lists you have to keep track with pointers if you want to take specific nodes out otherwise you must traverse the entire list",
            "grade": 5.0
        },
        "frequence_similarity": 3.3439249387982213,
        "liv_distance": 0,
        "bert_score": 4.912153631448746,
        "nota_atribuida": 5.076579837673811,
        "percentual_error": 0.015084927278303462
    },
    {
        "answer_number": 2970,
        "answer_values": {
            "number_question": 68,
            "answer_question": "direct access to elements and speed linked lists have increased search times to access elements even if the list is sorted - LRB - like getting the last element without a pointer directly to the end of the list - RRB -",
            "grade": 4.5
        },
        "frequence_similarity": 3.502047085049269,
        "liv_distance": 0,
        "bert_score": 4.914544075727463,
        "nota_atribuida": 5.253665131984732,
        "percentual_error": 0.143455114296562
    },
    {
        "answer_number": 2971,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array items are accessed directly with equal access time",
            "grade": 5.0
        },
        "frequence_similarity": 3.0590169943749475,
        "liv_distance": 1.4682539682539681,
        "bert_score": 4.87337589263916,
        "nota_atribuida": 4.175892894417983,
        "percentual_error": 0.1648214211164033
    },
    {
        "answer_number": 2972,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array - bases implementations require less memory than a pointer - bases one",
            "grade": 3.5
        },
        "frequence_similarity": 2.8227486121839513,
        "liv_distance": 1.2301587301587302,
        "bert_score": 4.869112968444824,
        "nota_atribuida": 4.003884379393805,
        "percentual_error": 0.12584888364585933
    },
    {
        "answer_number": 2973,
        "answer_values": {
            "number_question": 68,
            "answer_question": "You can access specific elements quickly in an array In a linked list you must traverse the list to get access the same element",
            "grade": 5.0
        },
        "frequence_similarity": 3.473123680201904,
        "liv_distance": 0.9920634920634921,
        "bert_score": 4.931638538837433,
        "nota_atribuida": 4.839474381358494,
        "percentual_error": 0.03210512372830121
    },
    {
        "answer_number": 2974,
        "answer_values": {
            "number_question": 68,
            "answer_question": "link lists only allow sequential access where arrays allow random access",
            "grade": 4.5
        },
        "frequence_similarity": 2.644337567297406,
        "liv_distance": 1.1507936507936507,
        "bert_score": 4.84893411397934,
        "nota_atribuida": 3.8302166924028747,
        "percentual_error": 0.14884073502158346
    },
    {
        "answer_number": 2975,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Any entitiy in an array may accessed immediately whereas a linked list must be traversed one item at a time because each object only points adjacent objects",
            "grade": 5.0
        },
        "frequence_similarity": 3.1708203932499366,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.939857870340347,
        "nota_atribuida": 4.566275942706729,
        "percentual_error": 0.0867448114586542
    },
    {
        "answer_number": 2976,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array based implementation requires less memory than lined lists based implementation",
            "grade": 3.5
        },
        "frequence_similarity": 2.788675134594813,
        "liv_distance": 1.2698412698412698,
        "bert_score": 4.845493137836456,
        "nota_atribuida": 3.943931989091125,
        "percentual_error": 0.11256076177759566
    },
    {
        "answer_number": 2977,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array - based implementations require less memory than a pointer - based ones",
            "grade": 3.5
        },
        "frequence_similarity": 2.8227486121839513,
        "liv_distance": 1.2301587301587302,
        "bert_score": 4.857238382101059,
        "nota_atribuida": 4.000631845317021,
        "percentual_error": 0.12513819433373774
    },
    {
        "answer_number": 2978,
        "answer_values": {
            "number_question": 68,
            "answer_question": "You can go up and down an array but you can only go one direction while traversing a linked list",
            "grade": 3.0
        },
        "frequence_similarity": 3.0590169943749475,
        "liv_distance": 1.3492063492063493,
        "bert_score": 4.887285679578781,
        "nota_atribuida": 4.226094969151011,
        "percentual_error": 0.29012480270818986
    },
    {
        "answer_number": 2979,
        "answer_values": {
            "number_question": 68,
            "answer_question": "arrays allow for the random access of any item cotained a any time linked lists must be gone through toget to the desired item",
            "grade": 5.0
        },
        "frequence_similarity": 3.1228410989030495,
        "liv_distance": 1.3888888888888888,
        "bert_score": 4.918274283409119,
        "nota_atribuida": 4.290333006506597,
        "percentual_error": 0.1419333986986805
    },
    {
        "answer_number": 2980,
        "answer_values": {
            "number_question": 68,
            "answer_question": "In arrays you have direct access to each element but in linked lists you have to traverse the list up to the element that you need",
            "grade": 5.0
        },
        "frequence_similarity": 3.2418030325702607,
        "liv_distance": 0.9920634920634921,
        "bert_score": 4.9060870707035065,
        "nota_atribuida": 4.574371227402249,
        "percentual_error": 0.08512575451955018
    },
    {
        "answer_number": 2981,
        "answer_values": {
            "number_question": 68,
            "answer_question": "Array size is fixed But Linked is not fixed data is also accessed quicker in array list also memory requirement is less and no pointers required Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support On the other hand arrays allow random access while linked lists allow only sequential access to elements Singly - linked lists in fact can only be traversed in one direction",
            "grade": 5.0
        },
        "frequence_similarity": 3.2881406246170664,
        "liv_distance": 0,
        "bert_score": 4.872353672981262,
        "nota_atribuida": 5.003434967512947,
        "percentual_error": 0.0006865218665276229
    },
    {
        "answer_number": 2982,
        "answer_values": {
            "number_question": 69,
            "answer_question": "They are passed by reference because you want the function to change the pointer",
            "grade": 4.5
        },
        "frequence_similarity": 3.3838834764831844,
        "liv_distance": 0,
        "bert_score": 4.778479337692261,
        "nota_atribuida": 5.084550684585934,
        "percentual_error": 0.11496604534949928
    },
    {
        "answer_number": 2983,
        "answer_values": {
            "number_question": 69,
            "answer_question": "By using a node",
            "grade": 2.5
        },
        "frequence_similarity": 3.520620726159658,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.793407320976257,
        "nota_atribuida": 4.916464531805165,
        "percentual_error": 0.491504518373474
    },
    {
        "answer_number": 2984,
        "answer_values": {
            "number_question": 69,
            "answer_question": "you send a pointer to an object of the LinkedList class",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.721632301807404,
        "nota_atribuida": 4.082754745241692,
        "percentual_error": 0.3876683376796849
    },
    {
        "answer_number": 2985,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Passed as a pointer to the head",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.795025289058685,
        "nota_atribuida": 4.102857609048577,
        "percentual_error": 0.025069748660477842
    },
    {
        "answer_number": 2986,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list",
            "grade": 4.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.770849943161011,
        "nota_atribuida": 4.096235809006547,
        "percentual_error": 0.08972537577632289
    },
    {
        "answer_number": 2987,
        "answer_values": {
            "number_question": 69,
            "answer_question": "You have to pass the head pointer to a function since it has access to the entire list",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.76917177438736,
        "nota_atribuida": 4.095776146584221,
        "percentual_error": 0.023384126269717198
    },
    {
        "answer_number": 2988,
        "answer_values": {
            "number_question": 69,
            "answer_question": "not answered",
            "grade": 0.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.753641337156296,
        "nota_atribuida": 3.7667776561573483,
        "percentual_error": 0.7533555312314697
    },
    {
        "answer_number": 2989,
        "answer_values": {
            "number_question": 69,
            "answer_question": "passes a pointer to a linked list object",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.767308831214905,
        "nota_atribuida": 4.0952658731333305,
        "percentual_error": 0.3895390244621104
    },
    {
        "answer_number": 2990,
        "answer_values": {
            "number_question": 69,
            "answer_question": "The linked list object contains the head through which the other elements are accessible",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.755609929561615,
        "nota_atribuida": 4.0920614603490275,
        "percentual_error": 0.14468537828327932
    },
    {
        "answer_number": 2991,
        "answer_values": {
            "number_question": 69,
            "answer_question": "By the head of the list It takes the head address and traverses from there on in",
            "grade": 4.0
        },
        "frequence_similarity": 2.8535533905932735,
        "liv_distance": 0,
        "bert_score": 4.82700377702713,
        "nota_atribuida": 4.50610679743267,
        "percentual_error": 0.11231575730096355
    },
    {
        "answer_number": 2992,
        "answer_values": {
            "number_question": 69,
            "answer_question": "as a pointer node",
            "grade": 3.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.7782281041145325,
        "nota_atribuida": 4.098256740029372,
        "percentual_error": 0.2679814393525528
    },
    {
        "answer_number": 2993,
        "answer_values": {
            "number_question": 69,
            "answer_question": "A method with access to a linked list head pointer as access to the entire list",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.789383113384247,
        "nota_atribuida": 4.101312176802177,
        "percentual_error": 0.024702381197710066
    },
    {
        "answer_number": 2994,
        "answer_values": {
            "number_question": 69,
            "answer_question": "the pointer to the first element is passed to a function",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.73978728055954,
        "nota_atribuida": 4.08772752369015,
        "percentual_error": 0.021461196516091463
    },
    {
        "answer_number": 2995,
        "answer_values": {
            "number_question": 69,
            "answer_question": "By passing the head pointer and going through the list as needed inside the function",
            "grade": 4.0
        },
        "frequence_similarity": 2.8857583749052296,
        "liv_distance": 0,
        "bert_score": 4.776816815137863,
        "nota_atribuida": 4.528294112172987,
        "percentual_error": 0.11666515007336287
    },
    {
        "answer_number": 2996,
        "answer_values": {
            "number_question": 69,
            "answer_question": "linked lists are passed by using pointers",
            "grade": 3.0
        },
        "frequence_similarity": 3.1681531047810605,
        "liv_distance": 0,
        "bert_score": 4.803411364555359,
        "nota_atribuida": 4.850670738039163,
        "percentual_error": 0.38152883136885085
    },
    {
        "answer_number": 2997,
        "answer_values": {
            "number_question": 69,
            "answer_question": "the head object is passed to the function",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.785307943820953,
        "nota_atribuida": 4.100195958730274,
        "percentual_error": 0.14638226191416948
    },
    {
        "answer_number": 2998,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Linked lists permit insertion and removal of nodes at any point in the list in constant time 1 but do not allow random access",
            "grade": 1.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.761066138744354,
        "nota_atribuida": 4.093555955044098,
        "percentual_error": 0.6335704173893866
    },
    {
        "answer_number": 2999,
        "answer_values": {
            "number_question": 69,
            "answer_question": "They are passed by reference because you want the function to change the pointer",
            "grade": 4.5
        },
        "frequence_similarity": 3.3838834764831844,
        "liv_distance": 0,
        "bert_score": 4.778479337692261,
        "nota_atribuida": 5.084550684585934,
        "percentual_error": 0.11496604534949928
    },
    {
        "answer_number": 3000,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Linked lists are passed as arguments to a function by passing the head pointer of the list by reference",
            "grade": 5.0
        },
        "frequence_similarity": 3.6306675421666137,
        "liv_distance": 0,
        "bert_score": 4.784770756959915,
        "nota_atribuida": 5.361632244484183,
        "percentual_error": 0.06744816279710619
    },
    {
        "answer_number": 3001,
        "answer_values": {
            "number_question": 69,
            "answer_question": "minus A function with access to a linked list head pointer has access to the entire list Pass the head ponter to a function as a reference argument",
            "grade": 5.0
        },
        "frequence_similarity": 2.779508497187474,
        "liv_distance": 0,
        "bert_score": 4.727194458246231,
        "nota_atribuida": 4.396150029260334,
        "percentual_error": 0.12076999414793321
    },
    {
        "answer_number": 3002,
        "answer_values": {
            "number_question": 69,
            "answer_question": "By using a node",
            "grade": 2.5
        },
        "frequence_similarity": 3.520620726159658,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.793407320976257,
        "nota_atribuida": 4.916464531805165,
        "percentual_error": 0.491504518373474
    },
    {
        "answer_number": 3003,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Pass - by - reference",
            "grade": 5.0
        },
        "frequence_similarity": 4.541241452319315,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.839213490486145,
        "nota_atribuida": 6.067805857487522,
        "percentual_error": 0.17597890943888328
    },
    {
        "answer_number": 3004,
        "answer_values": {
            "number_question": 69,
            "answer_question": "you send a pointer to an object of the LinkedList class",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.721632301807404,
        "nota_atribuida": 4.082754745241692,
        "percentual_error": 0.3876683376796849
    },
    {
        "answer_number": 3005,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Passed as a pointer to the head",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.795025289058685,
        "nota_atribuida": 4.102857609048577,
        "percentual_error": 0.025069748660477842
    },
    {
        "answer_number": 3006,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list",
            "grade": 4.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.770849943161011,
        "nota_atribuida": 4.096235809006547,
        "percentual_error": 0.08972537577632289
    },
    {
        "answer_number": 3007,
        "answer_values": {
            "number_question": 69,
            "answer_question": "You have to pass the head pointer to a function since it has access to the entire list",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.76917177438736,
        "nota_atribuida": 4.095776146584221,
        "percentual_error": 0.023384126269717198
    },
    {
        "answer_number": 3008,
        "answer_values": {
            "number_question": 69,
            "answer_question": "You pass the head pointer to a function as a reference argument",
            "grade": 5.0
        },
        "frequence_similarity": 3.0590169943749475,
        "liv_distance": 0,
        "bert_score": 4.756714403629303,
        "nota_atribuida": 4.716107522916406,
        "percentual_error": 0.056778495416718755
    },
    {
        "answer_number": 3009,
        "answer_values": {
            "number_question": 69,
            "answer_question": "not answered",
            "grade": 0.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.753641337156296,
        "nota_atribuida": 3.7667776561573483,
        "percentual_error": 0.7533555312314697
    },
    {
        "answer_number": 3010,
        "answer_values": {
            "number_question": 69,
            "answer_question": "passes a pointer to a linked list object",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.767308831214905,
        "nota_atribuida": 4.0952658731333305,
        "percentual_error": 0.3895390244621104
    },
    {
        "answer_number": 3011,
        "answer_values": {
            "number_question": 69,
            "answer_question": "The linked list object contains the head through which the other elements are accessible",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.755609929561615,
        "nota_atribuida": 4.0920614603490275,
        "percentual_error": 0.14468537828327932
    },
    {
        "answer_number": 3012,
        "answer_values": {
            "number_question": 69,
            "answer_question": "By the head of the list It takes the head address and traverses from there on in",
            "grade": 4.0
        },
        "frequence_similarity": 2.8535533905932735,
        "liv_distance": 0,
        "bert_score": 4.82700377702713,
        "nota_atribuida": 4.50610679743267,
        "percentual_error": 0.11231575730096355
    },
    {
        "answer_number": 3013,
        "answer_values": {
            "number_question": 69,
            "answer_question": "as a pointer node",
            "grade": 3.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.7782281041145325,
        "nota_atribuida": 4.098256740029372,
        "percentual_error": 0.2679814393525528
    },
    {
        "answer_number": 3014,
        "answer_values": {
            "number_question": 69,
            "answer_question": "A method with access to a linked list head pointer as access to the entire list",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.789383113384247,
        "nota_atribuida": 4.101312176802177,
        "percentual_error": 0.024702381197710066
    },
    {
        "answer_number": 3015,
        "answer_values": {
            "number_question": 69,
            "answer_question": "A function with access to a linked list head pointer has access to the entire list Pass the head pointer to a function as a reference argument",
            "grade": 5.0
        },
        "frequence_similarity": 2.776078815187116,
        "liv_distance": 0,
        "bert_score": 4.691323935985565,
        "nota_atribuida": 4.382498044410883,
        "percentual_error": 0.1235003911178234
    },
    {
        "answer_number": 3016,
        "answer_values": {
            "number_question": 69,
            "answer_question": "the head pointer is passed to a function as a reference argument",
            "grade": 5.0
        },
        "frequence_similarity": 3.0590169943749475,
        "liv_distance": 0,
        "bert_score": 4.719676226377487,
        "nota_atribuida": 4.705962501425466,
        "percentual_error": 0.05880749971490684
    },
    {
        "answer_number": 3017,
        "answer_values": {
            "number_question": 69,
            "answer_question": "the pointer to the first element is passed to a function",
            "grade": 4.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.73978728055954,
        "nota_atribuida": 4.08772752369015,
        "percentual_error": 0.021461196516091463
    },
    {
        "answer_number": 3018,
        "answer_values": {
            "number_question": 69,
            "answer_question": "linked lists are passed by reference specificly the Head pointer",
            "grade": 5.0
        },
        "frequence_similarity": 3.618033988749895,
        "liv_distance": 0,
        "bert_score": 4.825762361288071,
        "nota_atribuida": 5.35876379128615,
        "percentual_error": 0.06694898399319882
    },
    {
        "answer_number": 3019,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Pass the head pointer to a function as a reference argument",
            "grade": 5.0
        },
        "frequence_similarity": 3.0892556509887896,
        "liv_distance": 0,
        "bert_score": 4.766601324081421,
        "nota_atribuida": 4.752555501794915,
        "percentual_error": 0.04948889964101699
    },
    {
        "answer_number": 3020,
        "answer_values": {
            "number_question": 69,
            "answer_question": "by refrenece",
            "grade": 5.0
        },
        "frequence_similarity": 3.75,
        "liv_distance": 3.75,
        "bert_score": 4.72913533449173,
        "nota_atribuida": 4.018192166785692,
        "percentual_error": 0.19636156664286164
    },
    {
        "answer_number": 3021,
        "answer_values": {
            "number_question": 69,
            "answer_question": "By passing the head pointer and going through the list as needed inside the function",
            "grade": 4.0
        },
        "frequence_similarity": 2.8857583749052296,
        "liv_distance": 0,
        "bert_score": 4.776816815137863,
        "nota_atribuida": 4.528294112172987,
        "percentual_error": 0.11666515007336287
    },
    {
        "answer_number": 3022,
        "answer_values": {
            "number_question": 69,
            "answer_question": "linked lists are passed by using pointers",
            "grade": 3.0
        },
        "frequence_similarity": 3.1681531047810605,
        "liv_distance": 0,
        "bert_score": 4.803411364555359,
        "nota_atribuida": 4.850670738039163,
        "percentual_error": 0.38152883136885085
    },
    {
        "answer_number": 3023,
        "answer_values": {
            "number_question": 69,
            "answer_question": "the head object is passed to the function",
            "grade": 3.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.785307943820953,
        "nota_atribuida": 4.100195958730274,
        "percentual_error": 0.14638226191416948
    },
    {
        "answer_number": 3024,
        "answer_values": {
            "number_question": 69,
            "answer_question": "Linked lists permit insertion and removal of nodes at any point in the list in constant time 1 but do not allow random access",
            "grade": 1.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.761066138744354,
        "nota_atribuida": 4.093555955044098,
        "percentual_error": 0.6335704173893866
    },
    {
        "answer_number": 3025,
        "answer_values": {
            "number_question": 70,
            "answer_question": "They are passed by reference because you want the function to change the pointer",
            "grade": 0.5
        },
        "frequence_similarity": 3.4327531340557957,
        "liv_distance": 1.095890410958904,
        "bert_score": 4.932831674814224,
        "nota_atribuida": 4.754295608377797,
        "percentual_error": 0.8948319496333119
    },
    {
        "answer_number": 3026,
        "answer_values": {
            "number_question": 70,
            "answer_question": "A circular linked list is a linked list that links items in a continuous circle This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required",
            "grade": 4.5
        },
        "frequence_similarity": 4.009268883262181,
        "liv_distance": 0,
        "bert_score": 4.897633492946625,
        "nota_atribuida": 5.814984368146584,
        "percentual_error": 0.2261372146329106
    },
    {
        "answer_number": 3027,
        "answer_values": {
            "number_question": 70,
            "answer_question": "Circular linked lists are most useful for describing naturally circular structures and have the advantage of regular structure and being able to traverse the list starting at any point",
            "grade": 2.5
        },
        "frequence_similarity": 3.6712187015042264,
        "liv_distance": 0,
        "bert_score": 4.919976592063904,
        "nota_atribuida": 5.443912519752585,
        "percentual_error": 0.5407714596939152
    },
    {
        "answer_number": 3028,
        "answer_values": {
            "number_question": 70,
            "answer_question": "No node in a circular linked list contains NULL",
            "grade": 3.5
        },
        "frequence_similarity": 3.4422229518055114,
        "liv_distance": 2.328767123287671,
        "bert_score": 4.924801737070084,
        "nota_atribuida": 4.282218389646796,
        "percentual_error": 0.18266662707768033
    },
    {
        "answer_number": 3029,
        "answer_values": {
            "number_question": 70,
            "answer_question": "In circular linked list each node has successor no node contains NULL while in basic linked list last node contain NULL",
            "grade": 3.0
        },
        "frequence_similarity": 3.400937462695559,
        "liv_distance": 0,
        "bert_score": 4.891858398914337,
        "nota_atribuida": 5.134634625123251,
        "percentual_error": 0.4157325264545014
    },
    {
        "answer_number": 3030,
        "answer_values": {
            "number_question": 70,
            "answer_question": "In the case of a non circular link list if you are at the last node of the list and u want to move to first u need to go to one step back till u reach to first But in circular link list from last to first you need to make only one move In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward",
            "grade": 3.5
        },
        "frequence_similarity": 3.8240498491778934,
        "liv_distance": 0,
        "bert_score": 4.845344722270966,
        "nota_atribuida": 5.5939972276374546,
        "percentual_error": 0.37432932881910363
    },
    {
        "answer_number": 3031,
        "answer_values": {
            "number_question": 70,
            "answer_question": "They are passed by reference because you want the function to change the pointer",
            "grade": 0.5
        },
        "frequence_similarity": 3.4327531340557957,
        "liv_distance": 1.095890410958904,
        "bert_score": 4.932831674814224,
        "nota_atribuida": 4.754295608377797,
        "percentual_error": 0.8948319496333119
    },
    {
        "answer_number": 3032,
        "answer_values": {
            "number_question": 70,
            "answer_question": "In a circular linked list every node has a successor which means that the last node successor is the head or first node",
            "grade": 5.0
        },
        "frequence_similarity": 3.7444893192346607,
        "liv_distance": 0,
        "bert_score": 4.952234774827957,
        "nota_atribuida": 5.534502622687486,
        "percentual_error": 0.09657645124178083
    },
    {
        "answer_number": 3033,
        "answer_values": {
            "number_question": 70,
            "answer_question": "A circular linked list is a linked list that links items in a continuous circle This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required",
            "grade": 4.5
        },
        "frequence_similarity": 4.009268883262181,
        "liv_distance": 0,
        "bert_score": 4.897633492946625,
        "nota_atribuida": 5.814984368146584,
        "percentual_error": 0.2261372146329106
    },
    {
        "answer_number": 3034,
        "answer_values": {
            "number_question": 70,
            "answer_question": "In a circular linked list the last node points to the first node",
            "grade": 5.0
        },
        "frequence_similarity": 4.365506268111591,
        "liv_distance": 1.9863013698630136,
        "bert_score": 4.965723305940628,
        "nota_atribuida": 5.457070715653115,
        "percentual_error": 0.08375752110780776
    },
    {
        "answer_number": 3035,
        "answer_values": {
            "number_question": 70,
            "answer_question": "On a circular linked list the end element points to the head thus making the circle A basic link list has nothing pointing to the head and the last element points to null",
            "grade": 5.0
        },
        "frequence_similarity": 4.549432805723288,
        "liv_distance": 0,
        "bert_score": 4.940357804298401,
        "nota_atribuida": 6.4293944010871185,
        "percentual_error": 0.22232177899141303
    },
    {
        "answer_number": 3036,
        "answer_values": {
            "number_question": 70,
            "answer_question": "the circular linked list last node points to the begining of the list while a standard linked list points to NULL",
            "grade": 5.0
        },
        "frequence_similarity": 4.575143391598225,
        "liv_distance": 0,
        "bert_score": 4.940210580825806,
        "nota_atribuida": 6.458041596639619,
        "percentual_error": 0.22577147805896713
    },
    {
        "answer_number": 3037,
        "answer_values": {
            "number_question": 70,
            "answer_question": "The last item in the list points to the head",
            "grade": 5.0
        },
        "frequence_similarity": 4.632007163556104,
        "liv_distance": 2.73972602739726,
        "bert_score": 4.96090829372406,
        "nota_atribuida": 5.459505214144064,
        "percentual_error": 0.08416609127025165
    },
    {
        "answer_number": 3038,
        "answer_values": {
            "number_question": 70,
            "answer_question": "In a circular linked list the last node points back to the first node there is no NULL",
            "grade": 5.0
        },
        "frequence_similarity": 4.128347368197324,
        "liv_distance": 1.1643835616438356,
        "bert_score": 4.944241940975189,
        "nota_atribuida": 5.5068641863609535,
        "percentual_error": 0.09204225294248625
    },
    {
        "answer_number": 3039,
        "answer_values": {
            "number_question": 70,
            "answer_question": "Circular linked lists are most useful for describing naturally circular structures and have the advantage of regular structure and being able to traverse the list starting at any point",
            "grade": 2.5
        },
        "frequence_similarity": 3.6712187015042264,
        "liv_distance": 0,
        "bert_score": 4.919976592063904,
        "nota_atribuida": 5.443912519752585,
        "percentual_error": 0.5407714596939152
    },
    {
        "answer_number": 3040,
        "answer_values": {
            "number_question": 70,
            "answer_question": "A circular linked list has the last node point back to the head of the linked list",
            "grade": 5.0
        },
        "frequence_similarity": 4.5906050250177275,
        "liv_distance": 1.7808219178082192,
        "bert_score": 4.966558218002319,
        "nota_atribuida": 5.788535536555269,
        "percentual_error": 0.13622366686281462
    },
    {
        "answer_number": 3041,
        "answer_values": {
            "number_question": 70,
            "answer_question": "Basic linked list points to a NULL at the end and circular points to the head at the end",
            "grade": 5.0
        },
        "frequence_similarity": 4.19600131324992,
        "liv_distance": 1.643835616438356,
        "bert_score": 4.9311235547065735,
        "nota_atribuida": 5.391918961231871,
        "percentual_error": 0.07268635972643234
    },
    {
        "answer_number": 3042,
        "answer_values": {
            "number_question": 70,
            "answer_question": "in a circular linked list the the last item points to the first item",
            "grade": 5.0
        },
        "frequence_similarity": 4.4772789470967504,
        "liv_distance": 1.917808219178082,
        "bert_score": 4.9690499901771545,
        "nota_atribuida": 5.609387685638043,
        "percentual_error": 0.10863711331600145
    },
    {
        "answer_number": 3043,
        "answer_values": {
            "number_question": 70,
            "answer_question": "The circular linked list tail points to the head whereas the basic linked list tail points to a NULL",
            "grade": 5.0
        },
        "frequence_similarity": 4.419590113333718,
        "liv_distance": 0.547945205479452,
        "bert_score": 4.920353293418884,
        "nota_atribuida": 6.06550762595042,
        "percentual_error": 0.17566668639435812
    },
    {
        "answer_number": 3044,
        "answer_values": {
            "number_question": 70,
            "answer_question": "a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning",
            "grade": 5.0
        },
        "frequence_similarity": 3.840219266868097,
        "liv_distance": 0.4794520547945205,
        "bert_score": 4.928803592920303,
        "nota_atribuida": 5.4480594699371645,
        "percentual_error": 0.08224202992085405
    },
    {
        "answer_number": 3045,
        "answer_values": {
            "number_question": 70,
            "answer_question": "how to determine the end of the list in basic linked lists the last element links to a null pointer while circular linked lists link to the head element at the end",
            "grade": 5.0
        },
        "frequence_similarity": 4.417211334386301,
        "liv_distance": 0,
        "bert_score": 4.9299149215221405,
        "nota_atribuida": 6.279003106186113,
        "percentual_error": 0.2036952497962664
    },
    {
        "answer_number": 3046,
        "answer_values": {
            "number_question": 70,
            "answer_question": "No Node in a circular linked list contains NULL the last Node points pack to a Node within the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.11164592805076,
        "liv_distance": 1.095890410958904,
        "bert_score": 4.94928166270256,
        "nota_atribuida": 5.5163006993836285,
        "percentual_error": 0.09359545962411331
    },
    {
        "answer_number": 3047,
        "answer_values": {
            "number_question": 70,
            "answer_question": "The difference between a circular linked list and a basic linked list is that a circular linked list the last node references the first node Every node in a circular linked list has a successor and no node in a circular linked list contains NULL",
            "grade": 5.0
        },
        "frequence_similarity": 4.0543583134829255,
        "liv_distance": 0,
        "bert_score": 4.908623099327087,
        "nota_atribuida": 5.868304671258994,
        "percentual_error": 0.14796516539293914
    },
    {
        "answer_number": 3048,
        "answer_values": {
            "number_question": 70,
            "answer_question": "No node in a circular linked list contains NULL",
            "grade": 3.5
        },
        "frequence_similarity": 3.4422229518055114,
        "liv_distance": 2.328767123287671,
        "bert_score": 4.924801737070084,
        "nota_atribuida": 4.282218389646796,
        "percentual_error": 0.18266662707768033
    },
    {
        "answer_number": 3049,
        "answer_values": {
            "number_question": 70,
            "answer_question": "in a circular linked list the last element points to the head of the list",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 2.671232876712329,
        "bert_score": 4.986177086830139,
        "nota_atribuida": 5.903719242303843,
        "percentual_error": 0.15307625671426406
    },
    {
        "answer_number": 3050,
        "answer_values": {
            "number_question": 70,
            "answer_question": "In a regular linked list the last object points to NULL In a circular linked list the last object points back to the beginning of the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.656098404660259,
        "liv_distance": 0,
        "bert_score": 4.95316743850708,
        "nota_atribuida": 6.551919072194121,
        "percentual_error": 0.23686481091934652
    },
    {
        "answer_number": 3051,
        "answer_values": {
            "number_question": 70,
            "answer_question": "In circular linked list each node has successor no node contains NULL while in basic linked list last node contain NULL",
            "grade": 3.0
        },
        "frequence_similarity": 3.400937462695559,
        "liv_distance": 0,
        "bert_score": 4.891858398914337,
        "nota_atribuida": 5.134634625123251,
        "percentual_error": 0.4157325264545014
    },
    {
        "answer_number": 3052,
        "answer_values": {
            "number_question": 70,
            "answer_question": "in a circular linked lists the last element points to the first",
            "grade": 5.0
        },
        "frequence_similarity": 4.4217652869645185,
        "liv_distance": 2.1232876712328768,
        "bert_score": 4.947727620601654,
        "nota_atribuida": 5.461531942096653,
        "percentual_error": 0.08450594942771195
    },
    {
        "answer_number": 3053,
        "answer_values": {
            "number_question": 70,
            "answer_question": "A circular linked list does not have a last element Instead it is last item points to the head of the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.48607477376684,
        "liv_distance": 1.3013698630136987,
        "bert_score": 4.974461197853088,
        "nota_atribuida": 5.860906144999626,
        "percentual_error": 0.14688959756404363
    },
    {
        "answer_number": 3054,
        "answer_values": {
            "number_question": 70,
            "answer_question": "in a circular linked list the last node contains a pointer that goes back to the first node; in a basic linked list the last node contains a null pointer",
            "grade": 5.0
        },
        "frequence_similarity": 4.082934559033259,
        "liv_distance": 0,
        "bert_score": 4.919766187667847,
        "nota_atribuida": 5.9032418279060375,
        "percentual_error": 0.15300776323209342
    },
    {
        "answer_number": 3055,
        "answer_values": {
            "number_question": 70,
            "answer_question": "in a circular linked list the last object is linked back to the first object",
            "grade": 5.0
        },
        "frequence_similarity": 4.1685595311797865,
        "liv_distance": 1.4383561643835616,
        "bert_score": 4.959554374217987,
        "nota_atribuida": 5.449161208842307,
        "percentual_error": 0.08242758685748863
    },
    {
        "answer_number": 3056,
        "answer_values": {
            "number_question": 70,
            "answer_question": "In the case of a non circular link list if you are at the last node of the list and u want to move to first u need to go to one step back till u reach to first But in circular link list from last to first you need to make only one move In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward",
            "grade": 3.5
        },
        "frequence_similarity": 3.8240498491778934,
        "liv_distance": 0,
        "bert_score": 4.845344722270966,
        "nota_atribuida": 5.5939972276374546,
        "percentual_error": 0.37432932881910363
    },
    {
        "answer_number": 3057,
        "answer_values": {
            "number_question": 71,
            "answer_question": "they can traverse in both directions",
            "grade": 3.5
        },
        "frequence_similarity": 2.9374088826398532,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.878333210945129,
        "nota_atribuida": 4.288986518135604,
        "percentual_error": 0.18395639967611088
    },
    {
        "answer_number": 3058,
        "answer_values": {
            "number_question": 71,
            "answer_question": "In a doubly linked list you can delete a node without having to traverse the list",
            "grade": 4.5
        },
        "frequence_similarity": 3.4821428571428568,
        "liv_distance": 1.3793103448275863,
        "bert_score": 4.954253286123276,
        "nota_atribuida": 4.7048246111735486,
        "percentual_error": 0.04353501524522463
    },
    {
        "answer_number": 3059,
        "answer_values": {
            "number_question": 71,
            "answer_question": "A doubly - linked list allows you to delete a node without traversing the list to establish a trailing pointer",
            "grade": 4.5
        },
        "frequence_similarity": 3.13887656499994,
        "liv_distance": 1.4367816091954022,
        "bert_score": 4.943578839302063,
        "nota_atribuida": 4.296492777302361,
        "percentual_error": 0.04522382726614205
    },
    {
        "answer_number": 3060,
        "answer_values": {
            "number_question": 71,
            "answer_question": "A doubly linked list allows you to traverse the list in either direction Each node points to its successor as well as to its predecessor",
            "grade": 3.5
        },
        "frequence_similarity": 3.0952380952380953,
        "liv_distance": 1.4080459770114941,
        "bert_score": 4.915409833192825,
        "nota_atribuida": 4.251283965105191,
        "percentual_error": 0.17671930910091582
    },
    {
        "answer_number": 3061,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Doubly - linked lists can traverse backwards though they still cannot access data at any point in the list it can be shorter to traverse backwards",
            "grade": 3.5
        },
        "frequence_similarity": 3.269737008686178,
        "liv_distance": 1.293103448275862,
        "bert_score": 4.94892805814743,
        "nota_atribuida": 4.499960712161752,
        "percentual_error": 0.22221543167237512
    },
    {
        "answer_number": 3062,
        "answer_values": {
            "number_question": 71,
            "answer_question": "you can traverse the list from front to back and back to front",
            "grade": 3.5
        },
        "frequence_similarity": 3.155473525344462,
        "liv_distance": 1.0632183908045978,
        "bert_score": 4.902963638305664,
        "nota_atribuida": 4.449461807693251,
        "percentual_error": 0.21338801156841114
    },
    {
        "answer_number": 3063,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can traverse the list in reverse",
            "grade": 3.5
        },
        "frequence_similarity": 3.714885806101087,
        "liv_distance": 0.7758620689655172,
        "bert_score": 4.8314690589904785,
        "nota_atribuida": 5.166044419790444,
        "percentual_error": 0.3224990504162226
    },
    {
        "answer_number": 3064,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Doubly linked lists can be traversed in both directions",
            "grade": 3.5
        },
        "frequence_similarity": 2.9761904761904763,
        "liv_distance": 1.0632183908045978,
        "bert_score": 4.891484379768372,
        "nota_atribuida": 4.246275975295761,
        "percentual_error": 0.17574834505281578
    },
    {
        "answer_number": 3065,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Double - linked lists require more space per node and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions",
            "grade": 3.5
        },
        "frequence_similarity": 3.113539778848095,
        "liv_distance": 0.7183908045977011,
        "bert_score": 4.945637136697769,
        "nota_atribuida": 4.548738354243418,
        "percentual_error": 0.23055587562319846
    },
    {
        "answer_number": 3066,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can traverse forwards and backwards through nodes",
            "grade": 3.5
        },
        "frequence_similarity": 2.7525381361380523,
        "liv_distance": 0.9770114942528736,
        "bert_score": 4.863195568323135,
        "nota_atribuida": 4.022573504673993,
        "percentual_error": 0.1299102437946238
    },
    {
        "answer_number": 3067,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can point both forwards and backwards",
            "grade": 3.5
        },
        "frequence_similarity": 2.7699746235780194,
        "liv_distance": 0.7471264367816092,
        "bert_score": 4.83520120382309,
        "nota_atribuida": 4.1239457582668315,
        "percentual_error": 0.15129824562218708
    },
    {
        "answer_number": 3068,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can go backwards in the linked list and access previous data easier without having to keep track of the previous item",
            "grade": 4.0
        },
        "frequence_similarity": 3.5506221525259862,
        "liv_distance": 1.264367816091954,
        "bert_score": 4.915868788957596,
        "nota_atribuida": 4.815511444606259,
        "percentual_error": 0.16935095139680223
    },
    {
        "answer_number": 3069,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Doubly linked lists allow backward movement through the nodes",
            "grade": 3.5
        },
        "frequence_similarity": 2.9761904761904763,
        "liv_distance": 1.0632183908045978,
        "bert_score": 4.93088573217392,
        "nota_atribuida": 4.257068287352823,
        "percentual_error": 0.17783794767915062
    },
    {
        "answer_number": 3070,
        "answer_values": {
            "number_question": 71,
            "answer_question": "they have double pointers so each node can point forwards or backwards Making it a little easer to get to where you need",
            "grade": 3.5
        },
        "frequence_similarity": 2.645802960879951,
        "liv_distance": 1.4080459770114941,
        "bert_score": 4.889332205057144,
        "nota_atribuida": 3.7426675222167884,
        "percentual_error": 0.06483811900904735
    },
    {
        "answer_number": 3071,
        "answer_values": {
            "number_question": 71,
            "answer_question": "ability to backtrack through a list",
            "grade": 3.0
        },
        "frequence_similarity": 2.81943828249997,
        "liv_distance": 0.7183908045977011,
        "bert_score": 4.798565208911896,
        "nota_atribuida": 4.180299862904188,
        "percentual_error": 0.2823481332949631
    },
    {
        "answer_number": 3072,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can move forwards and backwards in the double - linked list Basic only moves forwards",
            "grade": 3.5
        },
        "frequence_similarity": 3.3661986608440464,
        "liv_distance": 1.1781609195402298,
        "bert_score": 4.904375076293945,
        "nota_atribuida": 4.640180285652057,
        "percentual_error": 0.24571896251049086
    },
    {
        "answer_number": 3073,
        "answer_values": {
            "number_question": 71,
            "answer_question": "The advantage is that each node points to bothe its predecessor and its successor There are no special cases for insertion and deletion",
            "grade": 4.5
        },
        "frequence_similarity": 3.049857399228215,
        "liv_distance": 1.4367816091954022,
        "bert_score": 4.9353137612342834,
        "nota_atribuida": 4.19490254209417,
        "percentual_error": 0.06779943509018438
    },
    {
        "answer_number": 3074,
        "answer_values": {
            "number_question": 71,
            "answer_question": "each node points to both its predecessor and its successor",
            "grade": 3.5
        },
        "frequence_similarity": 2.60309826235529,
        "liv_distance": 1.0632183908045978,
        "bert_score": 4.891877174377441,
        "nota_atribuida": 3.83009236006329,
        "percentual_error": 0.08618391647814871
    },
    {
        "answer_number": 3075,
        "answer_values": {
            "number_question": 71,
            "answer_question": "a doubly linked list has pointers in both directions this allows for access from back to front as well as front to back",
            "grade": 4.0
        },
        "frequence_similarity": 2.7608202654786504,
        "liv_distance": 1.4942528735632183,
        "bert_score": 4.9371252954006195,
        "nota_atribuida": 3.850498863096136,
        "percentual_error": 0.03737528422596603
    },
    {
        "answer_number": 3076,
        "answer_values": {
            "number_question": 71,
            "answer_question": "A doubly linked list can be traversed either direction while a normal linked list can only be traversed from start to finish",
            "grade": 3.5
        },
        "frequence_similarity": 3.021640530957301,
        "liv_distance": 1.5229885057471264,
        "bert_score": 4.914080202579498,
        "nota_atribuida": 4.124008253564805,
        "percentual_error": 0.1513111068643983
    },
    {
        "answer_number": 3077,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Double Linked list are often easier to manipulate because they allow sequential access to the list in both direction",
            "grade": 4.0
        },
        "frequence_similarity": 3.244694335918124,
        "liv_distance": 1.5517241379310345,
        "bert_score": 4.927215427160263,
        "nota_atribuida": 4.365288389940482,
        "percentual_error": 0.08368024224522375
    },
    {
        "answer_number": 3078,
        "answer_values": {
            "number_question": 71,
            "answer_question": "given a node in the list one can navigate easily in either direction",
            "grade": 4.0
        },
        "frequence_similarity": 3.645405322481819,
        "liv_distance": 1.235632183908046,
        "bert_score": 4.927381277084351,
        "nota_atribuida": 4.935620655310689,
        "percentual_error": 0.18956494444198602
    },
    {
        "answer_number": 3079,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can traverse the list both forward and backwards",
            "grade": 3.5
        },
        "frequence_similarity": 3.4523809523809526,
        "liv_distance": 0.9195402298850575,
        "bert_score": 4.893216490745544,
        "nota_atribuida": 4.834067699592211,
        "percentual_error": 0.27597207620918285
    },
    {
        "answer_number": 3080,
        "answer_values": {
            "number_question": 71,
            "answer_question": "a doubly linked list allows you to back up from a node rather than having to go through the entire list again",
            "grade": 4.0
        },
        "frequence_similarity": 3.083211843519804,
        "liv_distance": 1.3218390804597702,
        "bert_score": 4.925782084465027,
        "nota_atribuida": 4.2743005394038205,
        "percentual_error": 0.06417436885289307
    },
    {
        "answer_number": 3081,
        "answer_values": {
            "number_question": 71,
            "answer_question": "The primary disadvantage of doubly linked lists are that - LRB - 1 - RRB - each node requires an extra pointer requiring more space and - LRB - 2 - RRB - the insertion or deletion of a node takes a bit longer - LRB - more pointer operations - RRB -",
            "grade": 2.0
        },
        "frequence_similarity": 3.2439366341761366,
        "liv_distance": 0,
        "bert_score": 4.890952706336975,
        "nota_atribuida": 4.959207165950019,
        "percentual_error": 0.5967097293833526
    },
    {
        "answer_number": 3082,
        "answer_values": {
            "number_question": 71,
            "answer_question": "they can traverse in both directions",
            "grade": 3.5
        },
        "frequence_similarity": 2.9374088826398532,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.878333210945129,
        "nota_atribuida": 4.288986518135604,
        "percentual_error": 0.18395639967611088
    },
    {
        "answer_number": 3083,
        "answer_values": {
            "number_question": 71,
            "answer_question": "In a doubly linked list you can delete a node without having to traverse the list",
            "grade": 4.5
        },
        "frequence_similarity": 3.4821428571428568,
        "liv_distance": 1.3793103448275863,
        "bert_score": 4.954253286123276,
        "nota_atribuida": 4.7048246111735486,
        "percentual_error": 0.04353501524522463
    },
    {
        "answer_number": 3084,
        "answer_values": {
            "number_question": 71,
            "answer_question": "A doubly - linked list allows you to delete a node without traversing the list to establish a trailing pointer",
            "grade": 4.5
        },
        "frequence_similarity": 3.13887656499994,
        "liv_distance": 1.4367816091954022,
        "bert_score": 4.943578839302063,
        "nota_atribuida": 4.296492777302361,
        "percentual_error": 0.04522382726614205
    },
    {
        "answer_number": 3085,
        "answer_values": {
            "number_question": 71,
            "answer_question": "A doubly linked list allows you to traverse the list in either direction Each node points to its successor as well as to its predecessor",
            "grade": 3.5
        },
        "frequence_similarity": 3.0952380952380953,
        "liv_distance": 1.4080459770114941,
        "bert_score": 4.915409833192825,
        "nota_atribuida": 4.251283965105191,
        "percentual_error": 0.17671930910091582
    },
    {
        "answer_number": 3086,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Doubly - linked lists can traverse backwards though they still cannot access data at any point in the list it can be shorter to traverse backwards",
            "grade": 3.5
        },
        "frequence_similarity": 3.269737008686178,
        "liv_distance": 1.293103448275862,
        "bert_score": 4.94892805814743,
        "nota_atribuida": 4.499960712161752,
        "percentual_error": 0.22221543167237512
    },
    {
        "answer_number": 3087,
        "answer_values": {
            "number_question": 71,
            "answer_question": "you can traverse the list from front to back and back to front",
            "grade": 3.5
        },
        "frequence_similarity": 3.155473525344462,
        "liv_distance": 1.0632183908045978,
        "bert_score": 4.902963638305664,
        "nota_atribuida": 4.449461807693251,
        "percentual_error": 0.21338801156841114
    },
    {
        "answer_number": 3088,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can traverse the list in reverse",
            "grade": 3.5
        },
        "frequence_similarity": 3.714885806101087,
        "liv_distance": 0.7758620689655172,
        "bert_score": 4.8314690589904785,
        "nota_atribuida": 5.166044419790444,
        "percentual_error": 0.3224990504162226
    },
    {
        "answer_number": 3089,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Doubly linked lists can be traversed in both directions",
            "grade": 3.5
        },
        "frequence_similarity": 2.9761904761904763,
        "liv_distance": 1.0632183908045978,
        "bert_score": 4.891484379768372,
        "nota_atribuida": 4.246275975295761,
        "percentual_error": 0.17574834505281578
    },
    {
        "answer_number": 3090,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Double - linked lists require more space per node and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions",
            "grade": 3.5
        },
        "frequence_similarity": 3.113539778848095,
        "liv_distance": 0.7183908045977011,
        "bert_score": 4.945637136697769,
        "nota_atribuida": 4.548738354243418,
        "percentual_error": 0.23055587562319846
    },
    {
        "answer_number": 3091,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can traverse forwards and backwards through nodes",
            "grade": 3.5
        },
        "frequence_similarity": 2.7525381361380523,
        "liv_distance": 0.9770114942528736,
        "bert_score": 4.863195568323135,
        "nota_atribuida": 4.022573504673993,
        "percentual_error": 0.1299102437946238
    },
    {
        "answer_number": 3092,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can point both forwards and backwards",
            "grade": 3.5
        },
        "frequence_similarity": 2.7699746235780194,
        "liv_distance": 0.7471264367816092,
        "bert_score": 4.83520120382309,
        "nota_atribuida": 4.1239457582668315,
        "percentual_error": 0.15129824562218708
    },
    {
        "answer_number": 3093,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can go backwards in the linked list and access previous data easier without having to keep track of the previous item",
            "grade": 4.0
        },
        "frequence_similarity": 3.5506221525259862,
        "liv_distance": 1.264367816091954,
        "bert_score": 4.915868788957596,
        "nota_atribuida": 4.815511444606259,
        "percentual_error": 0.16935095139680223
    },
    {
        "answer_number": 3094,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Doubly linked lists allow backward movement through the nodes",
            "grade": 3.5
        },
        "frequence_similarity": 2.9761904761904763,
        "liv_distance": 1.0632183908045978,
        "bert_score": 4.93088573217392,
        "nota_atribuida": 4.257068287352823,
        "percentual_error": 0.17783794767915062
    },
    {
        "answer_number": 3095,
        "answer_values": {
            "number_question": 71,
            "answer_question": "they have double pointers so each node can point forwards or backwards Making it a little easer to get to where you need",
            "grade": 3.5
        },
        "frequence_similarity": 2.645802960879951,
        "liv_distance": 1.4080459770114941,
        "bert_score": 4.889332205057144,
        "nota_atribuida": 3.7426675222167884,
        "percentual_error": 0.06483811900904735
    },
    {
        "answer_number": 3096,
        "answer_values": {
            "number_question": 71,
            "answer_question": "ability to backtrack through a list",
            "grade": 3.0
        },
        "frequence_similarity": 2.81943828249997,
        "liv_distance": 0.7183908045977011,
        "bert_score": 4.798565208911896,
        "nota_atribuida": 4.180299862904188,
        "percentual_error": 0.2823481332949631
    },
    {
        "answer_number": 3097,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can move forwards and backwards in the double - linked list Basic only moves forwards",
            "grade": 3.5
        },
        "frequence_similarity": 3.3661986608440464,
        "liv_distance": 1.1781609195402298,
        "bert_score": 4.904375076293945,
        "nota_atribuida": 4.640180285652057,
        "percentual_error": 0.24571896251049086
    },
    {
        "answer_number": 3098,
        "answer_values": {
            "number_question": 71,
            "answer_question": "The advantage is that each node points to bothe its predecessor and its successor There are no special cases for insertion and deletion",
            "grade": 4.5
        },
        "frequence_similarity": 3.049857399228215,
        "liv_distance": 1.4367816091954022,
        "bert_score": 4.9353137612342834,
        "nota_atribuida": 4.19490254209417,
        "percentual_error": 0.06779943509018438
    },
    {
        "answer_number": 3099,
        "answer_values": {
            "number_question": 71,
            "answer_question": "each node points to both its predecessor and its successor",
            "grade": 3.5
        },
        "frequence_similarity": 2.60309826235529,
        "liv_distance": 1.0632183908045978,
        "bert_score": 4.891877174377441,
        "nota_atribuida": 3.83009236006329,
        "percentual_error": 0.08618391647814871
    },
    {
        "answer_number": 3100,
        "answer_values": {
            "number_question": 71,
            "answer_question": "a doubly linked list has pointers in both directions this allows for access from back to front as well as front to back",
            "grade": 4.0
        },
        "frequence_similarity": 2.7608202654786504,
        "liv_distance": 1.4942528735632183,
        "bert_score": 4.9371252954006195,
        "nota_atribuida": 3.850498863096136,
        "percentual_error": 0.03737528422596603
    },
    {
        "answer_number": 3101,
        "answer_values": {
            "number_question": 71,
            "answer_question": "A doubly linked list can be traversed either direction while a normal linked list can only be traversed from start to finish",
            "grade": 3.5
        },
        "frequence_similarity": 3.021640530957301,
        "liv_distance": 1.5229885057471264,
        "bert_score": 4.914080202579498,
        "nota_atribuida": 4.124008253564805,
        "percentual_error": 0.1513111068643983
    },
    {
        "answer_number": 3102,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Double Linked list are often easier to manipulate because they allow sequential access to the list in both direction",
            "grade": 4.0
        },
        "frequence_similarity": 3.244694335918124,
        "liv_distance": 1.5517241379310345,
        "bert_score": 4.927215427160263,
        "nota_atribuida": 4.365288389940482,
        "percentual_error": 0.08368024224522375
    },
    {
        "answer_number": 3103,
        "answer_values": {
            "number_question": 71,
            "answer_question": "given a node in the list one can navigate easily in either direction",
            "grade": 4.0
        },
        "frequence_similarity": 3.645405322481819,
        "liv_distance": 1.235632183908046,
        "bert_score": 4.927381277084351,
        "nota_atribuida": 4.935620655310689,
        "percentual_error": 0.18956494444198602
    },
    {
        "answer_number": 3104,
        "answer_values": {
            "number_question": 71,
            "answer_question": "You can traverse the list both forward and backwards",
            "grade": 3.5
        },
        "frequence_similarity": 3.4523809523809526,
        "liv_distance": 0.9195402298850575,
        "bert_score": 4.893216490745544,
        "nota_atribuida": 4.834067699592211,
        "percentual_error": 0.27597207620918285
    },
    {
        "answer_number": 3105,
        "answer_values": {
            "number_question": 71,
            "answer_question": "a doubly linked list allows you to back up from a node rather than having to go through the entire list again",
            "grade": 4.0
        },
        "frequence_similarity": 3.083211843519804,
        "liv_distance": 1.3218390804597702,
        "bert_score": 4.925782084465027,
        "nota_atribuida": 4.2743005394038205,
        "percentual_error": 0.06417436885289307
    },
    {
        "answer_number": 3106,
        "answer_values": {
            "number_question": 71,
            "answer_question": "Gives faster times for some operations such as insertion and deletion",
            "grade": 5.0
        },
        "frequence_similarity": 3.038413115317435,
        "liv_distance": 1.264367816091954,
        "bert_score": 4.8830656707286835,
        "nota_atribuida": 4.235010577131706,
        "percentual_error": 0.15299788457365882
    },
    {
        "answer_number": 3107,
        "answer_values": {
            "number_question": 71,
            "answer_question": "The primary disadvantage of doubly linked lists are that - LRB - 1 - RRB - each node requires an extra pointer requiring more space and - LRB - 2 - RRB - the insertion or deletion of a node takes a bit longer - LRB - more pointer operations - RRB -",
            "grade": 2.0
        },
        "frequence_similarity": 3.2439366341761366,
        "liv_distance": 0,
        "bert_score": 4.890952706336975,
        "nota_atribuida": 4.959207165950019,
        "percentual_error": 0.5967097293833526
    },
    {
        "answer_number": 3108,
        "answer_values": {
            "number_question": 72,
            "answer_question": "In a doubly linked list there are more pointers to set and the mechanics of inserting and deleting are more difficult Also the special cases at the beginning or end of the list are more complicated",
            "grade": 3.5
        },
        "frequence_similarity": 3.1577935144802716,
        "liv_distance": 0,
        "bert_score": 4.856429696083069,
        "nota_atribuida": 4.853633748421389,
        "percentual_error": 0.27889078957835445
    },
    {
        "answer_number": 3109,
        "answer_values": {
            "number_question": 72,
            "answer_question": "There are more pointers to set the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list",
            "grade": 4.0
        },
        "frequence_similarity": 2.9547542969431237,
        "liv_distance": 0,
        "bert_score": 4.889584183692932,
        "nota_atribuida": 4.636166609398638,
        "percentual_error": 0.13721823717658743
    },
    {
        "answer_number": 3110,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms",
            "grade": 3.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.8842039704322815,
        "nota_atribuida": 4.127284287308627,
        "percentual_error": 0.2731297891872918
    },
    {
        "answer_number": 3111,
        "answer_values": {
            "number_question": 72,
            "answer_question": "You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting or deleting",
            "grade": 3.0
        },
        "frequence_similarity": 2.948210728500398,
        "liv_distance": 0,
        "bert_score": 4.8823197185993195,
        "nota_atribuida": 4.626875596048228,
        "percentual_error": 0.3516142939822561
    },
    {
        "answer_number": 3112,
        "answer_values": {
            "number_question": 72,
            "answer_question": "More difficult to delete and create nodes",
            "grade": 3.0
        },
        "frequence_similarity": 2.8340765523905302,
        "liv_distance": 1.2765957446808511,
        "bert_score": 4.884784519672394,
        "nota_atribuida": 4.002720287261562,
        "percentual_error": 0.25050970722402577
    },
    {
        "answer_number": 3113,
        "answer_values": {
            "number_question": 72,
            "answer_question": "its a little more confusing The special cases at the end and beginning become more difficult to do",
            "grade": 3.0
        },
        "frequence_similarity": 3.0786375623578444,
        "liv_distance": 0,
        "bert_score": 4.882173389196396,
        "nota_atribuida": 4.772363998016835,
        "percentual_error": 0.3713807242602082
    },
    {
        "answer_number": 3114,
        "answer_values": {
            "number_question": 72,
            "answer_question": "increased actions to add and remove elements to the linked list",
            "grade": 3.0
        },
        "frequence_similarity": 3.23543550676819,
        "liv_distance": 0.10638297872340426,
        "bert_score": 4.8459818959236145,
        "nota_atribuida": 4.895947140990124,
        "percentual_error": 0.38724828646877507
    },
    {
        "answer_number": 3115,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Inserting and deleting in a double - linked list is more involved and has special cases at the beginning and end",
            "grade": 3.0
        },
        "frequence_similarity": 2.676776695296637,
        "liv_distance": 0,
        "bert_score": 4.878735393285751,
        "nota_atribuida": 4.32303143091664,
        "percentual_error": 0.3060425194817771
    },
    {
        "answer_number": 3116,
        "answer_values": {
            "number_question": 72,
            "answer_question": "The main disadvanate is that if hard to remove all items in the list",
            "grade": 2.0
        },
        "frequence_similarity": 3.1629126073623883,
        "liv_distance": 0,
        "bert_score": 4.883691519498825,
        "nota_atribuida": 4.866812770747944,
        "percentual_error": 0.5890534330761537
    },
    {
        "answer_number": 3117,
        "answer_values": {
            "number_question": 72,
            "answer_question": "The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list",
            "grade": 3.5
        },
        "frequence_similarity": 2.676776695296637,
        "liv_distance": 0,
        "bert_score": 4.858421236276627,
        "nota_atribuida": 4.317467238110209,
        "percentual_error": 0.1893395347379685
    },
    {
        "answer_number": 3118,
        "answer_values": {
            "number_question": 72,
            "answer_question": "not answered",
            "grade": 0.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.7446808510638298,
        "bert_score": 4.709956645965576,
        "nota_atribuida": 3.789359404082127,
        "percentual_error": 0.7578718808164254
    },
    {
        "answer_number": 3119,
        "answer_values": {
            "number_question": 72,
            "answer_question": "they take up twice as much memory for each node",
            "grade": 5.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.1702127659574468,
        "bert_score": 4.8862117528915405,
        "nota_atribuida": 3.671809911666746,
        "percentual_error": 0.26563801766665074
    },
    {
        "answer_number": 3120,
        "answer_values": {
            "number_question": 72,
            "answer_question": "In a doubly linked list there are more pointers to set and the mechanics of inserting and deleting are more difficult Also the special cases at the beginning or end of the list are more complicated",
            "grade": 3.5
        },
        "frequence_similarity": 3.1577935144802716,
        "liv_distance": 0,
        "bert_score": 4.856429696083069,
        "nota_atribuida": 4.853633748421389,
        "percentual_error": 0.27889078957835445
    },
    {
        "answer_number": 3121,
        "answer_values": {
            "number_question": 72,
            "answer_question": "There are more pointers to set the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list",
            "grade": 4.0
        },
        "frequence_similarity": 2.9547542969431237,
        "liv_distance": 0,
        "bert_score": 4.889584183692932,
        "nota_atribuida": 4.636166609398638,
        "percentual_error": 0.13721823717658743
    },
    {
        "answer_number": 3122,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms",
            "grade": 3.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.8842039704322815,
        "nota_atribuida": 4.127284287308627,
        "percentual_error": 0.2731297891872918
    },
    {
        "answer_number": 3123,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Need more memory to store previous pointers",
            "grade": 5.0
        },
        "frequence_similarity": 3.5022296571715916,
        "liv_distance": 2.6595744680851063,
        "bert_score": 4.918061345815659,
        "nota_atribuida": 4.218413336140006,
        "percentual_error": 0.15631733277199888
    },
    {
        "answer_number": 3124,
        "answer_values": {
            "number_question": 72,
            "answer_question": "a node in a doubly linked list takes up more memory than a node in a singly linked list",
            "grade": 5.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.859252423048019,
        "nota_atribuida": 4.120449880131283,
        "percentual_error": 0.17591002397374333
    },
    {
        "answer_number": 3125,
        "answer_values": {
            "number_question": 72,
            "answer_question": "You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting or deleting",
            "grade": 3.0
        },
        "frequence_similarity": 2.948210728500398,
        "liv_distance": 0,
        "bert_score": 4.8823197185993195,
        "nota_atribuida": 4.626875596048228,
        "percentual_error": 0.3516142939822561
    },
    {
        "answer_number": 3126,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Each node requires an extra node requires more memory and is more difficult to insert and remove individual nodes",
            "grade": 5.0
        },
        "frequence_similarity": 2.8402069087198853,
        "liv_distance": 0,
        "bert_score": 4.877052456140518,
        "nota_atribuida": 4.504923665906494,
        "percentual_error": 0.09901526681870121
    },
    {
        "answer_number": 3127,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Double - linked lists require more space per node and their elementary operations are more expensive",
            "grade": 5.0
        },
        "frequence_similarity": 2.714373231428136,
        "liv_distance": 0,
        "bert_score": 4.859429150819778,
        "nota_atribuida": 4.359693015434103,
        "percentual_error": 0.12806139691317941
    },
    {
        "answer_number": 3128,
        "answer_values": {
            "number_question": 72,
            "answer_question": "More difficult to delete and create nodes",
            "grade": 3.0
        },
        "frequence_similarity": 2.8340765523905302,
        "liv_distance": 1.2765957446808511,
        "bert_score": 4.884784519672394,
        "nota_atribuida": 4.002720287261562,
        "percentual_error": 0.25050970722402577
    },
    {
        "answer_number": 3129,
        "answer_values": {
            "number_question": 72,
            "answer_question": "They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list",
            "grade": 5.0
        },
        "frequence_similarity": 3.207106781186547,
        "liv_distance": 0,
        "bert_score": 4.920947104692459,
        "nota_atribuida": 4.926328598322329,
        "percentual_error": 0.014734280335534145
    },
    {
        "answer_number": 3130,
        "answer_values": {
            "number_question": 72,
            "answer_question": "nodes take up more memory",
            "grade": 5.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 1.3829787234042554,
        "bert_score": 4.86345499753952,
        "nota_atribuida": 3.5826631606952137,
        "percentual_error": 0.2834673678609573
    },
    {
        "answer_number": 3131,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Each node requires an extra pointer - LRB - space requirements increased - RRB - Insertion or deletion of a node takes a longer - LRB - more pointer operations - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 2.8175003175004765,
        "liv_distance": 0,
        "bert_score": 4.836004972457886,
        "nota_atribuida": 4.468344761884772,
        "percentual_error": 0.10633104762304557
    },
    {
        "answer_number": 3132,
        "answer_values": {
            "number_question": 72,
            "answer_question": "its a little more confusing The special cases at the end and beginning become more difficult to do",
            "grade": 3.0
        },
        "frequence_similarity": 3.0786375623578444,
        "liv_distance": 0,
        "bert_score": 4.882173389196396,
        "nota_atribuida": 4.772363998016835,
        "percentual_error": 0.3713807242602082
    },
    {
        "answer_number": 3133,
        "answer_values": {
            "number_question": 72,
            "answer_question": "increased actions to add and remove elements to the linked list",
            "grade": 3.0
        },
        "frequence_similarity": 3.23543550676819,
        "liv_distance": 0.10638297872340426,
        "bert_score": 4.8459818959236145,
        "nota_atribuida": 4.895947140990124,
        "percentual_error": 0.38724828646877507
    },
    {
        "answer_number": 3134,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Inserting and deleting in a double - linked list is more involved and has special cases at the beginning and end",
            "grade": 3.0
        },
        "frequence_similarity": 2.676776695296637,
        "liv_distance": 0,
        "bert_score": 4.878735393285751,
        "nota_atribuida": 4.32303143091664,
        "percentual_error": 0.3060425194817771
    },
    {
        "answer_number": 3135,
        "answer_values": {
            "number_question": 72,
            "answer_question": "The main disadvanate is that if hard to remove all items in the list",
            "grade": 2.0
        },
        "frequence_similarity": 3.1629126073623883,
        "liv_distance": 0,
        "bert_score": 4.883691519498825,
        "nota_atribuida": 4.866812770747944,
        "percentual_error": 0.5890534330761537
    },
    {
        "answer_number": 3136,
        "answer_values": {
            "number_question": 72,
            "answer_question": "each node requires an extra pointer taking up more storage insertions and deletions require more pointer operations",
            "grade": 5.0
        },
        "frequence_similarity": 2.692879187452615,
        "liv_distance": 0,
        "bert_score": 4.866839498281479,
        "nota_atribuida": 4.3377400014096335,
        "percentual_error": 0.1324519997180733
    },
    {
        "answer_number": 3137,
        "answer_values": {
            "number_question": 72,
            "answer_question": "in a doubly linked list there are twice as many pointers for each element therefore more memory is used",
            "grade": 5.0
        },
        "frequence_similarity": 2.708333333333333,
        "liv_distance": 0,
        "bert_score": 4.880269020795822,
        "nota_atribuida": 4.358661968849433,
        "percentual_error": 0.12826760623011335
    },
    {
        "answer_number": 3138,
        "answer_values": {
            "number_question": 72,
            "answer_question": "The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list",
            "grade": 3.5
        },
        "frequence_similarity": 2.676776695296637,
        "liv_distance": 0,
        "bert_score": 4.858421236276627,
        "nota_atribuida": 4.317467238110209,
        "percentual_error": 0.1893395347379685
    },
    {
        "answer_number": 3139,
        "answer_values": {
            "number_question": 72,
            "answer_question": "Double linked lists require more space per node and their elementary operation are more expensive",
            "grade": 5.0
        },
        "frequence_similarity": 2.714373231428136,
        "liv_distance": 0,
        "bert_score": 4.872964471578598,
        "nota_atribuida": 4.363400436537776,
        "percentual_error": 0.1273199126924448
    },
    {
        "answer_number": 3140,
        "answer_values": {
            "number_question": 72,
            "answer_question": "1 - each node requires an extra pointer requiring more space 2 - the insertion or deletion of a node takes a bit longer more pointer operations",
            "grade": 5.0
        },
        "frequence_similarity": 3.010310363079829,
        "liv_distance": 0,
        "bert_score": 4.853282421827316,
        "nota_atribuida": 4.688211998344545,
        "percentual_error": 0.062357600331091056
    },
    {
        "answer_number": 3141,
        "answer_values": {
            "number_question": 72,
            "answer_question": "It takes up twice the storage needed",
            "grade": 5.0
        },
        "frequence_similarity": 2.8340765523905302,
        "liv_distance": 1.4893617021276595,
        "bert_score": 4.859025180339813,
        "nota_atribuida": 3.9127511070758696,
        "percentual_error": 0.21744977858482606
    },
    {
        "answer_number": 3142,
        "answer_values": {
            "number_question": 72,
            "answer_question": "using more pointers to enable the backward movement takes up more memory having more pointers make it slightly more work to add or remove a node from the list",
            "grade": 5.0
        },
        "frequence_similarity": 3.2819290527140303,
        "liv_distance": 0,
        "bert_score": 4.892953038215637,
        "nota_atribuida": 5.002146493666275,
        "percentual_error": 0.0004291145149372122
    },
    {
        "answer_number": 3143,
        "answer_values": {
            "number_question": 72,
            "answer_question": "increased memory requirements slightly more complicated when modifying elements in the list",
            "grade": 5.0
        },
        "frequence_similarity": 2.7551551815399145,
        "liv_distance": 0,
        "bert_score": 4.882727712392807,
        "nota_atribuida": 4.411578601789619,
        "percentual_error": 0.11768427964207628
    },
    {
        "answer_number": 3144,
        "answer_values": {
            "number_question": 72,
            "answer_question": "not answered",
            "grade": 0.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.7446808510638298,
        "bert_score": 4.709956645965576,
        "nota_atribuida": 3.789359404082127,
        "percentual_error": 0.7578718808164254
    },
    {
        "answer_number": 3145,
        "answer_values": {
            "number_question": 73,
            "answer_question": "Stores a set of elements in a particular order",
            "grade": 2.0
        },
        "frequence_similarity": 2.7881952088521174,
        "liv_distance": 0.9815950920245399,
        "bert_score": 4.8683881759643555,
        "nota_atribuida": 4.0619952742058185,
        "percentual_error": 0.507631135688352
    },
    {
        "answer_number": 3146,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A list in which only the top - LRB - or last item added - RRB - can be modified",
            "grade": 4.5
        },
        "frequence_similarity": 3.9765610580465456,
        "liv_distance": 1.5030674846625767,
        "bert_score": 4.93245929479599,
        "nota_atribuida": 5.202292813191448,
        "percentual_error": 0.13499678668810133
    },
    {
        "answer_number": 3147,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A stack is an ADT that stores a set of elements in a particular order",
            "grade": 2.5
        },
        "frequence_similarity": 2.940225453162812,
        "liv_distance": 1.2576687116564418,
        "bert_score": 4.894864857196808,
        "nota_atribuida": 4.131296601687861,
        "percentual_error": 0.39486310448428885
    },
    {
        "answer_number": 3148,
        "answer_values": {
            "number_question": 73,
            "answer_question": "An abstract data type that stores a set of elements in a particular order",
            "grade": 2.5
        },
        "frequence_similarity": 3.050281816453515,
        "liv_distance": 1.3803680981595092,
        "bert_score": 4.891609996557236,
        "nota_atribuida": 4.205389306709813,
        "percentual_error": 0.40552471657946587
    },
    {
        "answer_number": 3149,
        "answer_values": {
            "number_question": 73,
            "answer_question": "Stores a set of element in a particular order",
            "grade": 2.0
        },
        "frequence_similarity": 2.644097604426059,
        "liv_distance": 0.950920245398773,
        "bert_score": 4.868457615375519,
        "nota_atribuida": 3.9131859408283103,
        "percentual_error": 0.48890749628507124
    },
    {
        "answer_number": 3150,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A data structure that puts elements in a list and only allows the user access to the last element",
            "grade": 4.5
        },
        "frequence_similarity": 3.8119589285149735,
        "liv_distance": 1.9325153374233128,
        "bert_score": 4.9422793090343475,
        "nota_atribuida": 4.853968732150357,
        "percentual_error": 0.0729235707279774
    },
    {
        "answer_number": 3151,
        "answer_values": {
            "number_question": 73,
            "answer_question": "a finite ordered list with zero or more elements",
            "grade": 2.0
        },
        "frequence_similarity": 2.769581933008596,
        "liv_distance": 0.950920245398773,
        "bert_score": 4.871168732643127,
        "nota_atribuida": 4.053942237877731,
        "percentual_error": 0.5066530595051066
    },
    {
        "answer_number": 3152,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways",
            "grade": 5.0
        },
        "frequence_similarity": 3.8010037097038447,
        "liv_distance": 1.8711656441717792,
        "bert_score": 4.895994067192078,
        "nota_atribuida": 4.852974767188286,
        "percentual_error": 0.029405046562342774
    },
    {
        "answer_number": 3153,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.8667808797729797,
        "liv_distance": 1.6257668711656441,
        "bert_score": 4.913337379693985,
        "nota_atribuida": 5.026748803329753,
        "percentual_error": 0.00532129302185036
    },
    {
        "answer_number": 3154,
        "answer_values": {
            "number_question": 73,
            "answer_question": "Stores a set of elements in a particular order",
            "grade": 2.0
        },
        "frequence_similarity": 2.7881952088521174,
        "liv_distance": 0.9815950920245399,
        "bert_score": 4.8683881759643555,
        "nota_atribuida": 4.0619952742058185,
        "percentual_error": 0.507631135688352
    },
    {
        "answer_number": 3155,
        "answer_values": {
            "number_question": 73,
            "answer_question": "An ADT whose most recently inserted item is the first item removed or retrieved This property is called last in first out - LRB - LIFO - RRB - Items enter and leave a stack at its top",
            "grade": 5.0
        },
        "frequence_similarity": 3.598869153637385,
        "liv_distance": 0.9815950920245399,
        "bert_score": 4.903395175933838,
        "nota_atribuida": 4.97612287446597,
        "percentual_error": 0.004775425106805953
    },
    {
        "answer_number": 3156,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A list in which only the top - LRB - or last item added - RRB - can be modified",
            "grade": 4.5
        },
        "frequence_similarity": 3.9765610580465456,
        "liv_distance": 1.5030674846625767,
        "bert_score": 4.93245929479599,
        "nota_atribuida": 5.202292813191448,
        "percentual_error": 0.13499678668810133
    },
    {
        "answer_number": 3157,
        "answer_values": {
            "number_question": 73,
            "answer_question": "a stack is a data structure that uses push to insert an item and pop to remove ad item The stack use a last in first out structure for inserting and removing items",
            "grade": 5.0
        },
        "frequence_similarity": 3.5850463498834273,
        "liv_distance": 1.4110429447852761,
        "bert_score": 4.93409126996994,
        "nota_atribuida": 4.801754416483116,
        "percentual_error": 0.039649116703376786
    },
    {
        "answer_number": 3158,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A data structure that stores data using LIFO",
            "grade": 5.0
        },
        "frequence_similarity": 3.1354107097191863,
        "liv_distance": 1.1349693251533743,
        "bert_score": 4.9196334183216095,
        "nota_atribuida": 4.403681089968361,
        "percentual_error": 0.1192637820063277
    },
    {
        "answer_number": 3159,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A stack is similar to an array but does not allow for random access Stacks only allow a user to retrieve the last item put into the stack Last in fist out",
            "grade": 5.0
        },
        "frequence_similarity": 3.4042052915695233,
        "liv_distance": 1.2576687116564418,
        "bert_score": 4.902904033660889,
        "nota_atribuida": 4.651200966164982,
        "percentual_error": 0.06975980676700355
    },
    {
        "answer_number": 3160,
        "answer_values": {
            "number_question": 73,
            "answer_question": "Stores a set of elements in a particular order Stack principle : LAST IN FIRST OUT It means : the last element inserted is the first one to be removed",
            "grade": 5.0
        },
        "frequence_similarity": 3.938430897656339,
        "liv_distance": 1.196319018404908,
        "bert_score": 4.918392151594162,
        "nota_atribuida": 5.275432495991071,
        "percentual_error": 0.05221041046404795
    },
    {
        "answer_number": 3161,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A stack is an ADT that stores a set of elements in a particular order",
            "grade": 2.5
        },
        "frequence_similarity": 2.940225453162812,
        "liv_distance": 1.2576687116564418,
        "bert_score": 4.894864857196808,
        "nota_atribuida": 4.131296601687861,
        "percentual_error": 0.39486310448428885
    },
    {
        "answer_number": 3162,
        "answer_values": {
            "number_question": 73,
            "answer_question": "a data type that stores a set of elements in a certain order last in first out",
            "grade": 5.0
        },
        "frequence_similarity": 3.5484276710366567,
        "liv_distance": 1.8404907975460123,
        "bert_score": 4.936688989400864,
        "nota_atribuida": 4.594254286284148,
        "percentual_error": 0.08114914274317042
    },
    {
        "answer_number": 3163,
        "answer_values": {
            "number_question": 73,
            "answer_question": "a data structure that moves elements in last in first out",
            "grade": 5.0
        },
        "frequence_similarity": 3.820676359488436,
        "liv_distance": 1.5644171779141105,
        "bert_score": 4.904459714889526,
        "nota_atribuida": 4.996781929833756,
        "percentual_error": 0.0006436140332487517
    },
    {
        "answer_number": 3164,
        "answer_values": {
            "number_question": 73,
            "answer_question": "Stores a set of elements in a last in first out order",
            "grade": 5.0
        },
        "frequence_similarity": 3.380450906325624,
        "liv_distance": 1.2269938650306749,
        "bert_score": 4.845504462718964,
        "nota_atribuida": 4.620927782964143,
        "percentual_error": 0.07581444340717136
    },
    {
        "answer_number": 3165,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A list that can be added to or removed from only from the top",
            "grade": 5.0
        },
        "frequence_similarity": 3.681248846437237,
        "liv_distance": 1.3190184049079754,
        "bert_score": 4.912344962358475,
        "nota_atribuida": 4.939000747229282,
        "percentual_error": 0.012199850554143632
    },
    {
        "answer_number": 3166,
        "answer_values": {
            "number_question": 73,
            "answer_question": "a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects and does not support - LRB - at least in the pure stack - RRB - peeking at a element without removing the rest of the stack first",
            "grade": 5.0
        },
        "frequence_similarity": 3.5652035789773553,
        "liv_distance": 0,
        "bert_score": 4.885563850402832,
        "nota_atribuida": 5.316196395807668,
        "percentual_error": 0.059477937281816606
    },
    {
        "answer_number": 3167,
        "answer_values": {
            "number_question": 73,
            "answer_question": "Stores a set of elements in a particular order based on the principle of Last In First Out - LRB - LIFO - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 3.533439876216952,
        "liv_distance": 1.8098159509202454,
        "bert_score": 4.952102601528168,
        "nota_atribuida": 4.593706796429125,
        "percentual_error": 0.08125864071417488
    },
    {
        "answer_number": 3168,
        "answer_values": {
            "number_question": 73,
            "answer_question": "an object list that stores elements in a particular order the first object inserted is at the bottom with the last object at the top so the first object in is the last object out",
            "grade": 5.0
        },
        "frequence_similarity": 3.758322123721115,
        "liv_distance": 1.2883435582822085,
        "bert_score": 4.938908219337463,
        "nota_atribuida": 5.044227713646673,
        "percentual_error": 0.008767985142109858
    },
    {
        "answer_number": 3169,
        "answer_values": {
            "number_question": 73,
            "answer_question": "An ADT that stores a set of elements in a particular order The stack principles are LIFO The last item inserted in the list is the first out",
            "grade": 5.0
        },
        "frequence_similarity": 3.886448113739935,
        "liv_distance": 1.7484662576687116,
        "bert_score": 4.9428413808345795,
        "nota_atribuida": 5.008959436849302,
        "percentual_error": 0.001788682252722995
    },
    {
        "answer_number": 3170,
        "answer_values": {
            "number_question": 73,
            "answer_question": "An abstract data type that stores a set of elements in a particular order",
            "grade": 2.5
        },
        "frequence_similarity": 3.050281816453515,
        "liv_distance": 1.3803680981595092,
        "bert_score": 4.891609996557236,
        "nota_atribuida": 4.205389306709813,
        "percentual_error": 0.40552471657946587
    },
    {
        "answer_number": 3171,
        "answer_values": {
            "number_question": 73,
            "answer_question": "a collection of data to be executed in the order of last in first out",
            "grade": 5.0
        },
        "frequence_similarity": 3.758049020706782,
        "liv_distance": 1.5337423312883436,
        "bert_score": 4.9160464107990265,
        "nota_atribuida": 4.942030666761864,
        "percentual_error": 0.011593866647627182
    },
    {
        "answer_number": 3172,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A stack is a data structure that allows data members to be added or removed one at a time and in order They are a Last in First Out structure",
            "grade": 5.0
        },
        "frequence_similarity": 3.780514181790831,
        "liv_distance": 1.656441717791411,
        "bert_score": 4.912708401679993,
        "nota_atribuida": 4.918367527846023,
        "percentual_error": 0.01632649443079548
    },
    {
        "answer_number": 3173,
        "answer_values": {
            "number_question": 73,
            "answer_question": "Stores a set of element in a particular order",
            "grade": 2.0
        },
        "frequence_similarity": 2.644097604426059,
        "liv_distance": 0.950920245398773,
        "bert_score": 4.868457615375519,
        "nota_atribuida": 3.9131859408283103,
        "percentual_error": 0.48890749628507124
    },
    {
        "answer_number": 3174,
        "answer_values": {
            "number_question": 73,
            "answer_question": "is a list of element where the first one to be removed is the last one inserted",
            "grade": 5.0
        },
        "frequence_similarity": 3.6379481553341213,
        "liv_distance": 1.687116564417178,
        "bert_score": 4.926726967096329,
        "nota_atribuida": 4.751180296225831,
        "percentual_error": 0.04976394075483381
    },
    {
        "answer_number": 3175,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A data structure that puts elements in a list and only allows the user access to the last element",
            "grade": 4.5
        },
        "frequence_similarity": 3.8119589285149735,
        "liv_distance": 1.9325153374233128,
        "bert_score": 4.9422793090343475,
        "nota_atribuida": 4.853968732150357,
        "percentual_error": 0.0729235707279774
    },
    {
        "answer_number": 3176,
        "answer_values": {
            "number_question": 73,
            "answer_question": "a finite ordered list with zero or more elements",
            "grade": 2.0
        },
        "frequence_similarity": 2.769581933008596,
        "liv_distance": 0.950920245398773,
        "bert_score": 4.871168732643127,
        "nota_atribuida": 4.053942237877731,
        "percentual_error": 0.5066530595051066
    },
    {
        "answer_number": 3177,
        "answer_values": {
            "number_question": 73,
            "answer_question": "A storage container that holds objects in a certain order which has a LIFO priority",
            "grade": 5.0
        },
        "frequence_similarity": 3.050281816453515,
        "liv_distance": 1.2883435582822085,
        "bert_score": 4.942647218704224,
        "nota_atribuida": 4.25523013272068,
        "percentual_error": 0.14895397345586403
    },
    {
        "answer_number": 3178,
        "answer_values": {
            "number_question": 73,
            "answer_question": "Stacks are a type of container adaptors specifically designed to operate in a LIFO context - LRB - last - in first - out - RRB - where elements are inserted and extracted only from the end of the container",
            "grade": 5.0
        },
        "frequence_similarity": 3.5000692113369,
        "liv_distance": 0.3987730061349693,
        "bert_score": 4.907608330249786,
        "nota_atribuida": 5.094159244276593,
        "percentual_error": 0.018483765379416317
    },
    {
        "answer_number": 3179,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push and pop are two main functions defined in a stack",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 4.999999701976776,
        "nota_atribuida": 4.9999999183693085,
        "percentual_error": 1.6326138330136075e-08
    },
    {
        "answer_number": 3180,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0,
        "bert_score": 4.882188439369202,
        "nota_atribuida": 4.824098696061283,
        "percentual_error": 0.0351802607877435
    },
    {
        "answer_number": 3181,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push and pop",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 1.1111111111111112,
        "bert_score": 4.698686450719833,
        "nota_atribuida": 5.1713303238625725,
        "percentual_error": 0.033130802546491034
    },
    {
        "answer_number": 3182,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Pop function and Push function",
            "grade": 5.0
        },
        "frequence_similarity": 3.3964214570007956,
        "liv_distance": 1.3888888888888888,
        "bert_score": 4.8463064432144165,
        "nota_atribuida": 4.575877733521435,
        "percentual_error": 0.08482445329571298
    },
    {
        "answer_number": 3183,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push and pop",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 1.0185185185185186,
        "bert_score": 4.701962620019913,
        "nota_atribuida": 5.208310422569145,
        "percentual_error": 0.03999577706936874
    },
    {
        "answer_number": 3184,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push - LRB - insert an item - RRB - pop - LRB - remove an item - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 2.8535533905932735,
        "liv_distance": 0.09259259259259259,
        "bert_score": 4.825566411018372,
        "nota_atribuida": 4.469630360090998,
        "percentual_error": 0.10607392798180038
    },
    {
        "answer_number": 3185,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Adding a new item and removing the item",
            "grade": 5.0
        },
        "frequence_similarity": 2.7635231383473653,
        "liv_distance": 1.2962962962962963,
        "bert_score": 4.832402914762497,
        "nota_atribuida": 3.9019728768519593,
        "percentual_error": 0.2196054246296082
    },
    {
        "answer_number": 3186,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push - LRB - insert - RRB - and pop - LRB - retrieve - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 3.157793514480272,
        "liv_distance": 0.9259259259259259,
        "bert_score": 4.840104728937149,
        "nota_atribuida": 4.488334898053833,
        "percentual_error": 0.10233302038923342
    },
    {
        "answer_number": 3187,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push and pop",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 1.0185185185185186,
        "bert_score": 4.701962620019913,
        "nota_atribuida": 5.208310422569145,
        "percentual_error": 0.03999577706936874
    },
    {
        "answer_number": 3188,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push and Pop",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 1.0185185185185186,
        "bert_score": 4.723502993583679,
        "nota_atribuida": 5.214210484854649,
        "percentual_error": 0.04108205556274558
    },
    {
        "answer_number": 3189,
        "answer_values": {
            "number_question": 74,
            "answer_question": "pop and push",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.757079035043716,
        "nota_atribuida": 5.295572667641271,
        "percentual_error": 0.055815052722697045
    },
    {
        "answer_number": 3190,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push - LRB - add an element - RRB - pop - LRB - remove an element - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 2.8535533905932735,
        "liv_distance": 0,
        "bert_score": 4.836542308330536,
        "nota_atribuida": 4.508719469336235,
        "percentual_error": 0.09825610613275304
    },
    {
        "answer_number": 3191,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push and pop",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 1.1111111111111112,
        "bert_score": 4.698686450719833,
        "nota_atribuida": 5.1713303238625725,
        "percentual_error": 0.033130802546491034
    },
    {
        "answer_number": 3192,
        "answer_values": {
            "number_question": 74,
            "answer_question": "pop and push",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.757079035043716,
        "nota_atribuida": 5.295572667641271,
        "percentual_error": 0.055815052722697045
    },
    {
        "answer_number": 3193,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push - LRB - to add to a item the Stack - RRB - Pop - LRB - to pull the last item added from an array - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 2.9008918628686367,
        "liv_distance": 0,
        "bert_score": 4.84167605638504,
        "nota_atribuida": 4.562945261451861,
        "percentual_error": 0.08741094770962776
    },
    {
        "answer_number": 3194,
        "answer_values": {
            "number_question": 74,
            "answer_question": "pop and push",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.757079035043716,
        "nota_atribuida": 5.295572667641271,
        "percentual_error": 0.055815052722697045
    },
    {
        "answer_number": 3195,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push and pop push puts an object into the list and pop takes the last object off",
            "grade": 5.0
        },
        "frequence_similarity": 3.412870929175277,
        "liv_distance": 0.2777777777777778,
        "bert_score": 4.859273731708527,
        "nota_atribuida": 5.030776453479167,
        "percentual_error": 0.006117634874807876
    },
    {
        "answer_number": 3196,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push and Pop are the two main functions of a stack",
            "grade": 5.0
        },
        "frequence_similarity": 4.5,
        "liv_distance": 3.7037037037037037,
        "bert_score": 4.982147216796875,
        "nota_atribuida": 4.942375068628539,
        "percentual_error": 0.011524986274292326
    },
    {
        "answer_number": 3197,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push and Pop",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 1.0185185185185186,
        "bert_score": 4.723502993583679,
        "nota_atribuida": 5.214210484854649,
        "percentual_error": 0.04108205556274558
    },
    {
        "answer_number": 3198,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push which adds an element to the stack and pop which takes an element off the stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.2607257743127303,
        "liv_distance": 0,
        "bert_score": 4.906992614269257,
        "nota_atribuida": 4.982333705000224,
        "percentual_error": 0.003533258999955158
    },
    {
        "answer_number": 3199,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Push and Pop which add and remove data from the stack respectively",
            "grade": 5.0
        },
        "frequence_similarity": 3.5564428184106456,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.903171062469482,
        "nota_atribuida": 4.986499407211653,
        "percentual_error": 0.0027001185576693842
    },
    {
        "answer_number": 3200,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push and pop",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 1.0185185185185186,
        "bert_score": 4.701962620019913,
        "nota_atribuida": 5.208310422569145,
        "percentual_error": 0.03999577706936874
    },
    {
        "answer_number": 3201,
        "answer_values": {
            "number_question": 74,
            "answer_question": "pop to remove item push to insert an element",
            "grade": 5.0
        },
        "frequence_similarity": 2.9767312946227964,
        "liv_distance": 1.2962962962962963,
        "bert_score": 4.799259603023529,
        "nota_atribuida": 4.130789440199937,
        "percentual_error": 0.17384211196001265
    },
    {
        "answer_number": 3202,
        "answer_values": {
            "number_question": 74,
            "answer_question": "Pop and push",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.814478904008865,
        "nota_atribuida": 5.311294902033894,
        "percentual_error": 0.058609982645604464
    },
    {
        "answer_number": 3203,
        "answer_values": {
            "number_question": 74,
            "answer_question": "pop and push",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 0.8333333333333334,
        "bert_score": 4.757079035043716,
        "nota_atribuida": 5.295572667641271,
        "percentual_error": 0.055815052722697045
    },
    {
        "answer_number": 3204,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push adds an item to the top of the stack pop removes the top item from the stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.0270462766947297,
        "liv_distance": 0.18518518518518517,
        "bert_score": 4.857409745454788,
        "nota_atribuida": 4.635850740942037,
        "percentual_error": 0.07282985181159263
    },
    {
        "answer_number": 3205,
        "answer_values": {
            "number_question": 74,
            "answer_question": "push and pop Push adds a given node to the top of the stack leaving previous nodes below Pop removes and returns the current top node of the stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.3606629658238707,
        "liv_distance": 0,
        "bert_score": 4.839474558830261,
        "nota_atribuida": 5.07534858249301,
        "percentual_error": 0.014845991613840814
    },
    {
        "answer_number": 3206,
        "answer_values": {
            "number_question": 75,
            "answer_question": "If you use a dynamically allocated array you must provide a destructor and copy constructor",
            "grade": 3.0
        },
        "frequence_similarity": 2.7165063509461094,
        "liv_distance": 1.3103448275862069,
        "bert_score": 4.898367077112198,
        "nota_atribuida": 3.8621056207004107,
        "percentual_error": 0.22322165817517536
    },
    {
        "answer_number": 3207,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Use a pointer that always points to the end of the array list for push or pop modifications",
            "grade": 4.5
        },
        "frequence_similarity": 3.9748438811224087,
        "liv_distance": 1.5517241379310345,
        "bert_score": 4.943035542964935,
        "nota_atribuida": 5.184312538511325,
        "percentual_error": 0.13199677554698985
    },
    {
        "answer_number": 3208,
        "answer_values": {
            "number_question": 75,
            "answer_question": "if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also",
            "grade": 4.5
        },
        "frequence_similarity": 3.5465430730964465,
        "liv_distance": 1.3448275862068966,
        "bert_score": 4.930022358894348,
        "nota_atribuida": 4.78348217705037,
        "percentual_error": 0.05926272254351184
    },
    {
        "answer_number": 3209,
        "answer_values": {
            "number_question": 75,
            "answer_question": "You predetermine the size of the stack as you would an array This type can not grow",
            "grade": 2.5
        },
        "frequence_similarity": 3.7198750911856666,
        "liv_distance": 1.3793103448275863,
        "bert_score": 4.909485578536987,
        "nota_atribuida": 4.957820800957537,
        "percentual_error": 0.49574619568396694
    },
    {
        "answer_number": 3210,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Allocate an array of some size The bottom stack element is stored at some element Last index in the array is the top Increment top when one element is pushed decrement after pop",
            "grade": 4.5
        },
        "frequence_similarity": 3.684697755518185,
        "liv_distance": 0.7241379310344828,
        "bert_score": 4.928253591060638,
        "nota_atribuida": 5.179027540667522,
        "percentual_error": 0.13111101173638529
    },
    {
        "answer_number": 3211,
        "answer_values": {
            "number_question": 75,
            "answer_question": "You allocate an pre - defined array the bottom element is stored at element 0 and the last index is the head",
            "grade": 4.0
        },
        "frequence_similarity": 3.7247448713915885,
        "liv_distance": 1.9310344827586208,
        "bert_score": 4.933112859725952,
        "nota_atribuida": 4.754722799984637,
        "percentual_error": 0.15873118828022437
    },
    {
        "answer_number": 3212,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Make an array make the bottom at spot 0 make the last spot in the array the top and increment top when you ad",
            "grade": 4.5
        },
        "frequence_similarity": 3.926967659804405,
        "liv_distance": 1.4482758620689655,
        "bert_score": 4.923777133226395,
        "nota_atribuida": 5.1659310093989514,
        "percentual_error": 0.1289082274206429
    },
    {
        "answer_number": 3213,
        "answer_values": {
            "number_question": 75,
            "answer_question": "treat the beginning of the array as the beginning of the stack",
            "grade": 4.0
        },
        "frequence_similarity": 4.454419214059694,
        "liv_distance": 1.4827586206896552,
        "bert_score": 4.881375730037689,
        "nota_atribuida": 5.729402506291911,
        "percentual_error": 0.3018469211043764
    },
    {
        "answer_number": 3214,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Use an index value called top to keep track of the last element in the array",
            "grade": 4.5
        },
        "frequence_similarity": 3.883496476323666,
        "liv_distance": 1.4827586206896552,
        "bert_score": 4.95781883597374,
        "nota_atribuida": 5.113313014094244,
        "percentual_error": 0.11994435161777084
    },
    {
        "answer_number": 3215,
        "answer_values": {
            "number_question": 75,
            "answer_question": "create an array and implement pointers that point to the next list item down and stack them up",
            "grade": 2.0
        },
        "frequence_similarity": 3.25,
        "liv_distance": 1.4137931034482758,
        "bert_score": 4.950174987316132,
        "nota_atribuida": 4.431247994338962,
        "percentual_error": 0.5486598803418239
    },
    {
        "answer_number": 3216,
        "answer_values": {
            "number_question": 75,
            "answer_question": "for efficiency it is easiest to implement the left to right method with the right most item being the one that is retrieved when a pop is performed and a push places an object on the furthest element",
            "grade": 3.5
        },
        "frequence_similarity": 3.7111417027490754,
        "liv_distance": 0.1724137931034483,
        "bert_score": 4.933826178312302,
        "nota_atribuida": 5.425063024382116,
        "percentual_error": 0.3548462046855888
    },
    {
        "answer_number": 3217,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Create an array based on a pre - defined size N There cannot be more elements than N Bottom stack element stored at element 0 last index in the array is the top Increment top when one element is pushed decrement after pop",
            "grade": 4.5
        },
        "frequence_similarity": 3.3914996548599357,
        "liv_distance": 0,
        "bert_score": 4.914619028568268,
        "nota_atribuida": 5.130338346990739,
        "percentual_error": 0.12286486862225598
    },
    {
        "answer_number": 3218,
        "answer_values": {
            "number_question": 75,
            "answer_question": "with the element added to the array so that the last element added is at the end and when the element is popped it takes the last element off the array",
            "grade": 4.0
        },
        "frequence_similarity": 4.123086135160589,
        "liv_distance": 1.6206896551724137,
        "bert_score": 4.956731200218201,
        "nota_atribuida": 5.326595147895544,
        "percentual_error": 0.24905124400521816
    },
    {
        "answer_number": 3219,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Allocate an array of some pre - defined size Bottom stack element stored at element 0 The last index in the array is the top Increment top when one element is pushed",
            "grade": 4.5
        },
        "frequence_similarity": 3.7506508722128116,
        "liv_distance": 0.7241379310344828,
        "bert_score": 4.927918165922165,
        "nota_atribuida": 5.252525253555337,
        "percentual_error": 0.1432692309372462
    },
    {
        "answer_number": 3220,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Create an array size N N plus plus when one element is pushed N - - when one element is popped",
            "grade": 4.0
        },
        "frequence_similarity": 2.6096322524133786,
        "liv_distance": 1.3448275862068966,
        "bert_score": 4.90464985370636,
        "nota_atribuida": 3.7311401490929006,
        "percentual_error": 0.06721496272677485
    },
    {
        "answer_number": 3221,
        "answer_values": {
            "number_question": 75,
            "answer_question": "define an array and keep track of a pointer to the last element as items are added",
            "grade": 4.0
        },
        "frequence_similarity": 3.4782797401561583,
        "liv_distance": 1.5172413793103448,
        "bert_score": 4.9531155824661255,
        "nota_atribuida": 4.646451743625787,
        "percentual_error": 0.1391280442140863
    },
    {
        "answer_number": 3222,
        "answer_values": {
            "number_question": 75,
            "answer_question": "By allocating an array of predetermined size and an integer to track the top element of the stack The bottom member of the stack will go in element 0 of the array and for each element pushed the top tracking integer is incremented",
            "grade": 4.5
        },
        "frequence_similarity": 4.298905236253319,
        "liv_distance": 0,
        "bert_score": 4.877653867006302,
        "nota_atribuida": 6.132684098799984,
        "percentual_error": 0.26622667538337097
    },
    {
        "answer_number": 3223,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Allocate an array of some size bottom stack element stored at element 0",
            "grade": 4.0
        },
        "frequence_similarity": 2.948210728500398,
        "liv_distance": 1.3793103448275863,
        "bert_score": 4.880905449390411,
        "nota_atribuida": 4.08897992630244,
        "percentual_error": 0.021760910521980148
    },
    {
        "answer_number": 3224,
        "answer_values": {
            "number_question": 75,
            "answer_question": "you store the stack in the array but you have to keep in mind the first element",
            "grade": 3.0
        },
        "frequence_similarity": 3.8447858840997973,
        "liv_distance": 1.6896551724137931,
        "bert_score": 4.907765686511993,
        "nota_atribuida": 4.975784104069376,
        "percentual_error": 0.39707995016373565
    },
    {
        "answer_number": 3225,
        "answer_values": {
            "number_question": 75,
            "answer_question": "You keep track of the last item entered into the array and do not allow the user access to the other parts of the array",
            "grade": 4.0
        },
        "frequence_similarity": 4.376699909687324,
        "liv_distance": 2.0689655172413794,
        "bert_score": 4.9651676416397095,
        "nota_atribuida": 5.437194546014527,
        "percentual_error": 0.2643264893046715
    },
    {
        "answer_number": 3226,
        "answer_values": {
            "number_question": 75,
            "answer_question": "using arrays you are pushing one int at a time into the stack until you get to the end of your array",
            "grade": 4.0
        },
        "frequence_similarity": 3.67393568818739,
        "liv_distance": 1.5517241379310345,
        "bert_score": 4.946136623620987,
        "nota_atribuida": 4.849412688360338,
        "percentual_error": 0.17515784754700625
    },
    {
        "answer_number": 3227,
        "answer_values": {
            "number_question": 75,
            "answer_question": "by having a max number of elements allocating an array with that number of elements storing the elements starting at 0 and keeping track of how many elements are currently in the list",
            "grade": 4.0
        },
        "frequence_similarity": 3.6518033440636586,
        "liv_distance": 0.5517241379310345,
        "bert_score": 4.932176321744919,
        "nota_atribuida": 5.210587405320797,
        "percentual_error": 0.2323322326547299
    },
    {
        "answer_number": 3228,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Stack usually holds a bunch of items with the same type therefore u can use an array to hold the content of the stack and an integer top that holds the index of the element at the top of the stack u Choose an array size Then the sequence of operations used u have to decide what data types are needed for this stack data structure",
            "grade": 3.0
        },
        "frequence_similarity": 4.300607536360992,
        "liv_distance": 0,
        "bert_score": 4.860333800315857,
        "nota_atribuida": 6.129839411979549,
        "percentual_error": 0.5105907678205895
    },
    {
        "answer_number": 3229,
        "answer_values": {
            "number_question": 75,
            "answer_question": "An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array",
            "grade": 5.0
        },
        "frequence_similarity": 4.105654072333142,
        "liv_distance": 0,
        "bert_score": 4.827625006437302,
        "nota_atribuida": 5.903353822882618,
        "percentual_error": 0.15302383187350765
    },
    {
        "answer_number": 3230,
        "answer_values": {
            "number_question": 75,
            "answer_question": "By implementing an array of a pre - defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top You increment top when an element is pushed and you decrement it when an item is popped",
            "grade": 5.0
        },
        "frequence_similarity": 3.665631010300392,
        "liv_distance": 0,
        "bert_score": 4.900978654623032,
        "nota_atribuida": 5.432474179245918,
        "percentual_error": 0.07960906301186499
    },
    {
        "answer_number": 3231,
        "answer_values": {
            "number_question": 75,
            "answer_question": "If you use a dynamically allocated array you must provide a destructor and copy constructor",
            "grade": 3.0
        },
        "frequence_similarity": 2.7165063509461094,
        "liv_distance": 1.3103448275862069,
        "bert_score": 4.898367077112198,
        "nota_atribuida": 3.8621056207004107,
        "percentual_error": 0.22322165817517536
    },
    {
        "answer_number": 3232,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Create a int value that stores the head of the stack Increment the top when one element is pushed and decrement after it is popped",
            "grade": 5.0
        },
        "frequence_similarity": 3.8340858878835347,
        "liv_distance": 1.6206896551724137,
        "bert_score": 4.945050030946732,
        "nota_atribuida": 5.000933057209892,
        "percentual_error": 0.00018657662464538483
    },
    {
        "answer_number": 3233,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Use a pointer that always points to the end of the array list for push or pop modifications",
            "grade": 4.5
        },
        "frequence_similarity": 3.9748438811224087,
        "liv_distance": 1.5517241379310345,
        "bert_score": 4.943035542964935,
        "nota_atribuida": 5.184312538511325,
        "percentual_error": 0.13199677554698985
    },
    {
        "answer_number": 3234,
        "answer_values": {
            "number_question": 75,
            "answer_question": "if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also",
            "grade": 4.5
        },
        "frequence_similarity": 3.5465430730964465,
        "liv_distance": 1.3448275862068966,
        "bert_score": 4.930022358894348,
        "nota_atribuida": 4.78348217705037,
        "percentual_error": 0.05926272254351184
    },
    {
        "answer_number": 3235,
        "answer_values": {
            "number_question": 75,
            "answer_question": "You predetermine the size of the stack as you would an array This type can not grow",
            "grade": 2.5
        },
        "frequence_similarity": 3.7198750911856666,
        "liv_distance": 1.3793103448275863,
        "bert_score": 4.909485578536987,
        "nota_atribuida": 4.957820800957537,
        "percentual_error": 0.49574619568396694
    },
    {
        "answer_number": 3236,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Declare a variable that points the last item in the array which increases - LRB - plus plus - RRB - when items are pushed onto the stack and decreases - LRB - - - - RRB - when an item is popped off the top",
            "grade": 5.0
        },
        "frequence_similarity": 3.721719560378128,
        "liv_distance": 0,
        "bert_score": 4.911815822124481,
        "nota_atribuida": 5.498025396205463,
        "percentual_error": 0.0905825928976578
    },
    {
        "answer_number": 3237,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Allocate an array of some size The bottom stack element is stored at some element Last index in the array is the top Increment top when one element is pushed decrement after pop",
            "grade": 4.5
        },
        "frequence_similarity": 3.684697755518185,
        "liv_distance": 0.7241379310344828,
        "bert_score": 4.928253591060638,
        "nota_atribuida": 5.179027540667522,
        "percentual_error": 0.13111101173638529
    },
    {
        "answer_number": 3238,
        "answer_values": {
            "number_question": 75,
            "answer_question": "You allocate an pre - defined array the bottom element is stored at element 0 and the last index is the head",
            "grade": 4.0
        },
        "frequence_similarity": 3.7247448713915885,
        "liv_distance": 1.9310344827586208,
        "bert_score": 4.933112859725952,
        "nota_atribuida": 4.754722799984637,
        "percentual_error": 0.15873118828022437
    },
    {
        "answer_number": 3239,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Make an array make the bottom at spot 0 make the last spot in the array the top and increment top when you ad",
            "grade": 4.5
        },
        "frequence_similarity": 3.926967659804405,
        "liv_distance": 1.4482758620689655,
        "bert_score": 4.923777133226395,
        "nota_atribuida": 5.1659310093989514,
        "percentual_error": 0.1289082274206429
    },
    {
        "answer_number": 3240,
        "answer_values": {
            "number_question": 75,
            "answer_question": "treat the beginning of the array as the beginning of the stack",
            "grade": 4.0
        },
        "frequence_similarity": 4.454419214059694,
        "liv_distance": 1.4827586206896552,
        "bert_score": 4.881375730037689,
        "nota_atribuida": 5.729402506291911,
        "percentual_error": 0.3018469211043764
    },
    {
        "answer_number": 3241,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Use an index value called top to keep track of the last element in the array",
            "grade": 4.5
        },
        "frequence_similarity": 3.883496476323666,
        "liv_distance": 1.4827586206896552,
        "bert_score": 4.95781883597374,
        "nota_atribuida": 5.113313014094244,
        "percentual_error": 0.11994435161777084
    },
    {
        "answer_number": 3242,
        "answer_values": {
            "number_question": 75,
            "answer_question": "create an array and implement pointers that point to the next list item down and stack them up",
            "grade": 2.0
        },
        "frequence_similarity": 3.25,
        "liv_distance": 1.4137931034482758,
        "bert_score": 4.950174987316132,
        "nota_atribuida": 4.431247994338962,
        "percentual_error": 0.5486598803418239
    },
    {
        "answer_number": 3243,
        "answer_values": {
            "number_question": 75,
            "answer_question": "for efficiency it is easiest to implement the left to right method with the right most item being the one that is retrieved when a pop is performed and a push places an object on the furthest element",
            "grade": 3.5
        },
        "frequence_similarity": 3.7111417027490754,
        "liv_distance": 0.1724137931034483,
        "bert_score": 4.933826178312302,
        "nota_atribuida": 5.425063024382116,
        "percentual_error": 0.3548462046855888
    },
    {
        "answer_number": 3244,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Create an array based on a pre - defined size N There cannot be more elements than N Bottom stack element stored at element 0 last index in the array is the top Increment top when one element is pushed decrement after pop",
            "grade": 4.5
        },
        "frequence_similarity": 3.3914996548599357,
        "liv_distance": 0,
        "bert_score": 4.914619028568268,
        "nota_atribuida": 5.130338346990739,
        "percentual_error": 0.12286486862225598
    },
    {
        "answer_number": 3245,
        "answer_values": {
            "number_question": 75,
            "answer_question": "with the element added to the array so that the last element added is at the end and when the element is popped it takes the last element off the array",
            "grade": 4.0
        },
        "frequence_similarity": 4.123086135160589,
        "liv_distance": 1.6206896551724137,
        "bert_score": 4.956731200218201,
        "nota_atribuida": 5.326595147895544,
        "percentual_error": 0.24905124400521816
    },
    {
        "answer_number": 3246,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Allocate an array of some pre - defined size Bottom stack element stored at element 0 The last index in the array is the top Increment top when one element is pushed",
            "grade": 4.5
        },
        "frequence_similarity": 3.7506508722128116,
        "liv_distance": 0.7241379310344828,
        "bert_score": 4.927918165922165,
        "nota_atribuida": 5.252525253555337,
        "percentual_error": 0.1432692309372462
    },
    {
        "answer_number": 3247,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Create an array size N N plus plus when one element is pushed N - - when one element is popped",
            "grade": 4.0
        },
        "frequence_similarity": 2.6096322524133786,
        "liv_distance": 1.3448275862068966,
        "bert_score": 4.90464985370636,
        "nota_atribuida": 3.7311401490929006,
        "percentual_error": 0.06721496272677485
    },
    {
        "answer_number": 3248,
        "answer_values": {
            "number_question": 75,
            "answer_question": "define an array and keep track of a pointer to the last element as items are added",
            "grade": 4.0
        },
        "frequence_similarity": 3.4782797401561583,
        "liv_distance": 1.5172413793103448,
        "bert_score": 4.9531155824661255,
        "nota_atribuida": 4.646451743625787,
        "percentual_error": 0.1391280442140863
    },
    {
        "answer_number": 3249,
        "answer_values": {
            "number_question": 75,
            "answer_question": "By allocating an array of predetermined size and an integer to track the top element of the stack The bottom member of the stack will go in element 0 of the array and for each element pushed the top tracking integer is incremented",
            "grade": 4.5
        },
        "frequence_similarity": 4.298905236253319,
        "liv_distance": 0,
        "bert_score": 4.877653867006302,
        "nota_atribuida": 6.132684098799984,
        "percentual_error": 0.26622667538337097
    },
    {
        "answer_number": 3250,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Allocate an array of some size bottom stack element stored at element 0",
            "grade": 4.0
        },
        "frequence_similarity": 2.948210728500398,
        "liv_distance": 1.3793103448275863,
        "bert_score": 4.880905449390411,
        "nota_atribuida": 4.08897992630244,
        "percentual_error": 0.021760910521980148
    },
    {
        "answer_number": 3251,
        "answer_values": {
            "number_question": 75,
            "answer_question": "you store the stack in the array but you have to keep in mind the first element",
            "grade": 3.0
        },
        "frequence_similarity": 3.8447858840997973,
        "liv_distance": 1.6896551724137931,
        "bert_score": 4.907765686511993,
        "nota_atribuida": 4.975784104069376,
        "percentual_error": 0.39707995016373565
    },
    {
        "answer_number": 3252,
        "answer_values": {
            "number_question": 75,
            "answer_question": "You keep track of the last item entered into the array and do not allow the user access to the other parts of the array",
            "grade": 4.0
        },
        "frequence_similarity": 4.376699909687324,
        "liv_distance": 2.0689655172413794,
        "bert_score": 4.9651676416397095,
        "nota_atribuida": 5.437194546014527,
        "percentual_error": 0.2643264893046715
    },
    {
        "answer_number": 3253,
        "answer_values": {
            "number_question": 75,
            "answer_question": "using arrays you are pushing one int at a time into the stack until you get to the end of your array",
            "grade": 4.0
        },
        "frequence_similarity": 3.67393568818739,
        "liv_distance": 1.5517241379310345,
        "bert_score": 4.946136623620987,
        "nota_atribuida": 4.849412688360338,
        "percentual_error": 0.17515784754700625
    },
    {
        "answer_number": 3254,
        "answer_values": {
            "number_question": 75,
            "answer_question": "by having a max number of elements allocating an array with that number of elements storing the elements starting at 0 and keeping track of how many elements are currently in the list",
            "grade": 4.0
        },
        "frequence_similarity": 3.6518033440636586,
        "liv_distance": 0.5517241379310345,
        "bert_score": 4.932176321744919,
        "nota_atribuida": 5.210587405320797,
        "percentual_error": 0.2323322326547299
    },
    {
        "answer_number": 3255,
        "answer_values": {
            "number_question": 75,
            "answer_question": "Stack usually holds a bunch of items with the same type therefore u can use an array to hold the content of the stack and an integer top that holds the index of the element at the top of the stack u Choose an array size Then the sequence of operations used u have to decide what data types are needed for this stack data structure",
            "grade": 3.0
        },
        "frequence_similarity": 4.300607536360992,
        "liv_distance": 0,
        "bert_score": 4.860333800315857,
        "nota_atribuida": 6.129839411979549,
        "percentual_error": 0.5105907678205895
    },
    {
        "answer_number": 3256,
        "answer_values": {
            "number_question": 76,
            "answer_question": "You can add an element to the end of the linked list and update a pointer called top each time you modify the list",
            "grade": 3.0
        },
        "frequence_similarity": 4.0957118462605635,
        "liv_distance": 2.156862745098039,
        "bert_score": 4.951387047767639,
        "nota_atribuida": 5.085644314058025,
        "percentual_error": 0.41010424348646823
    },
    {
        "answer_number": 3257,
        "answer_values": {
            "number_question": 76,
            "answer_question": "This is the implementation of the stack using single linked list The operations performed on a stack are 1 - RRB - push - LRB - - RRB - : This is the function which is for insertion - LRB - pushing - RRB - of an element into stack It is similar to the insertion of an element at the end of a single linked list see the function insert end - LRB - - RRB - in the program for operations of single linked list 2 - RRB - pop - LRB - - RRB - : This is the function which is for deletion - LRB - popping up - RRB - of an element from the stack It is similar to the deletion of an element at the end of a single linked list see the function delete end - LRB - - RRB - in the program for operations of single linked list 3 - RRB - stack display - LRB - - RRB - : This is the function which is for displaying the elements of a stack",
            "grade": 4.0
        },
        "frequence_similarity": 4.118114724143819,
        "liv_distance": 0,
        "bert_score": 4.665075838565826,
        "nota_atribuida": 5.8727338693021505,
        "percentual_error": 0.3188862139814085
    },
    {
        "answer_number": 3258,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Using nodes to keep track of the head of the stack Then using Push - LRB - - RRB - and Pop - LRB - - RRB - to create the stack as needed",
            "grade": 4.0
        },
        "frequence_similarity": 4.007556722888818,
        "liv_distance": 1.5359477124183007,
        "bert_score": 4.923923015594482,
        "nota_atribuida": 5.221725994054696,
        "percentual_error": 0.23396976314837603
    },
    {
        "answer_number": 3259,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Use the head as the top of the stack only modify the head when you push or pop push would add a new item to the head pop would remove the item from the head",
            "grade": 4.5
        },
        "frequence_similarity": 4.371137997959372,
        "liv_distance": 1.7647058823529411,
        "bert_score": 4.905765205621719,
        "nota_atribuida": 5.533285894365701,
        "percentual_error": 0.18674001562396225
    },
    {
        "answer_number": 3260,
        "answer_values": {
            "number_question": 76,
            "answer_question": "you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item",
            "grade": 4.5
        },
        "frequence_similarity": 4.399187895707324,
        "liv_distance": 0.8169934640522876,
        "bert_score": 4.956533312797546,
        "nota_atribuida": 5.947806715091971,
        "percentual_error": 0.24341858847200015
    },
    {
        "answer_number": 3261,
        "answer_values": {
            "number_question": 76,
            "answer_question": "You dynamicly create space as the stack grows The stack can be as long as you need",
            "grade": 2.5
        },
        "frequence_similarity": 3.3253126141202305,
        "liv_distance": 1.2091503267973855,
        "bert_score": 4.9289271235466,
        "nota_atribuida": 4.589208802576701,
        "percentual_error": 0.4552437887340567
    },
    {
        "answer_number": 3262,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Creating a linked list Add an element to the top of the stack when pushing and deleting an element when popping",
            "grade": 4.0
        },
        "frequence_similarity": 3.8123766423931507,
        "liv_distance": 1.6666666666666667,
        "bert_score": 4.946357607841492,
        "nota_atribuida": 4.959151388746708,
        "percentual_error": 0.1934103868906304
    },
    {
        "answer_number": 3263,
        "answer_values": {
            "number_question": 76,
            "answer_question": "A singly - linked list is already a lot like a stack it just depends on the way you address moving the head",
            "grade": 3.5
        },
        "frequence_similarity": 3.651705531801071,
        "liv_distance": 1.5032679738562091,
        "bert_score": 4.91800844669342,
        "nota_atribuida": 4.835787127010576,
        "percentual_error": 0.27622951381574634
    },
    {
        "answer_number": 3264,
        "answer_values": {
            "number_question": 76,
            "answer_question": "make a list make the bottom the head add on the end and make the end top",
            "grade": 3.5
        },
        "frequence_similarity": 4.0740740740740735,
        "liv_distance": 1.4379084967320261,
        "bert_score": 4.921925961971283,
        "nota_atribuida": 5.333603386369329,
        "percentual_error": 0.3437832274996909
    },
    {
        "answer_number": 3265,
        "answer_values": {
            "number_question": 76,
            "answer_question": "use the add function with a list as the beginning of the stack and remove for pop",
            "grade": 4.5
        },
        "frequence_similarity": 4.3951174787165375,
        "liv_distance": 1.4705882352941178,
        "bert_score": 4.951028674840927,
        "nota_atribuida": 5.687055598335407,
        "percentual_error": 0.2087293816298994
    },
    {
        "answer_number": 3266,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Use head as the top and push and pop nodes from the head",
            "grade": 4.5
        },
        "frequence_similarity": 3.8382584475782764,
        "liv_distance": 1.4052287581699345,
        "bert_score": 4.922233819961548,
        "nota_atribuida": 5.083302932620706,
        "percentual_error": 0.11474880414415567
    },
    {
        "answer_number": 3267,
        "answer_values": {
            "number_question": 76,
            "answer_question": "create a node based list that points to the next list item down",
            "grade": 1.5
        },
        "frequence_similarity": 3.390870806374748,
        "liv_distance": 1.3071895424836601,
        "bert_score": 4.940616190433502,
        "nota_atribuida": 4.6273542122787665,
        "percentual_error": 0.67584067888736
    },
    {
        "answer_number": 3268,
        "answer_values": {
            "number_question": 76,
            "answer_question": "have the head of the list be the last item added and a push just adds a new head",
            "grade": 4.5
        },
        "frequence_similarity": 4.166666666666666,
        "liv_distance": 1.5359477124183007,
        "bert_score": 4.943017959594727,
        "nota_atribuida": 5.404488941250041,
        "percentual_error": 0.16735882912933409
    },
    {
        "answer_number": 3269,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Create a new list Pop elements in the stack as needed Push the stack to remove items unless the stack is empty The top item is at the head of the list The last item is at the end",
            "grade": 4.5
        },
        "frequence_similarity": 4.468564963589725,
        "liv_distance": 1.0457516339869282,
        "bert_score": 4.932025671005249,
        "nota_atribuida": 5.929358308648348,
        "percentual_error": 0.2410645864601466
    },
    {
        "answer_number": 3270,
        "answer_values": {
            "number_question": 76,
            "answer_question": "adding the element to the end of the list so that it links to the element before it when popping the element it takes the last element in the list and sets the previous one as the end of the list",
            "grade": 3.5
        },
        "frequence_similarity": 4.382708192682296,
        "liv_distance": 1.0130718954248366,
        "bert_score": 4.949865639209747,
        "nota_atribuida": 5.851182071338269,
        "percentual_error": 0.40183026996466575
    },
    {
        "answer_number": 3271,
        "answer_values": {
            "number_question": 76,
            "answer_question": "You can implement a stack using arrays or and linked list By the use of pointers that point element - LRB - node - RRB - to the next element in the stack By the use of pointers the stack becomes a linked list",
            "grade": 2.5
        },
        "frequence_similarity": 4.166963411379544,
        "liv_distance": 0.49019607843137253,
        "bert_score": 4.926581680774689,
        "nota_atribuida": 5.807840656786029,
        "percentual_error": 0.5695474191291843
    },
    {
        "answer_number": 3272,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Elements are only inserted and removed from the head of the list There is no header node or current pointer",
            "grade": 4.5
        },
        "frequence_similarity": 3.8621156878275107,
        "liv_distance": 1.5686274509803921,
        "bert_score": 4.930016994476318,
        "nota_atribuida": 5.048378972765443,
        "percentual_error": 0.10862476365656981
    },
    {
        "answer_number": 3273,
        "answer_values": {
            "number_question": 76,
            "answer_question": "use a linked list and keep track of a pointer that points to the first item",
            "grade": 4.0
        },
        "frequence_similarity": 3.687827741832997,
        "liv_distance": 1.3725490196078431,
        "bert_score": 4.946939051151276,
        "nota_atribuida": 4.934956423991469,
        "percentual_error": 0.18945586215232713
    },
    {
        "answer_number": 3274,
        "answer_values": {
            "number_question": 76,
            "answer_question": "A singly linked list can already be easily used for LIFO data storage Members of a stack can simply be pushed and popped from a list the first item in will be the last out",
            "grade": 4.5
        },
        "frequence_similarity": 3.546914390895013,
        "liv_distance": 0.7843137254901961,
        "bert_score": 4.94893878698349,
        "nota_atribuida": 5.007506447706026,
        "percentual_error": 0.10134913514460242
    },
    {
        "answer_number": 3275,
        "answer_values": {
            "number_question": 76,
            "answer_question": "using pointer",
            "grade": 1.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.35947712418300654,
        "bert_score": 4.827024340629578,
        "nota_atribuida": 3.9715364752804234,
        "percentual_error": 0.622312420058011
    },
    {
        "answer_number": 3276,
        "answer_values": {
            "number_question": 76,
            "answer_question": "the top is the first pointer",
            "grade": 3.0
        },
        "frequence_similarity": 3.973139127471974,
        "liv_distance": 0.8169934640522876,
        "bert_score": 4.880558550357819,
        "nota_atribuida": 5.451617278871718,
        "percentual_error": 0.44970458369724586
    },
    {
        "answer_number": 3277,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Keep a pointer pointing to the last element entered at the front of the array and move the pointer back when you delete an element",
            "grade": 2.5
        },
        "frequence_similarity": 4.08113883008419,
        "liv_distance": 1.8954248366013071,
        "bert_score": 4.968930184841156,
        "nota_atribuida": 5.176069788495372,
        "percentual_error": 0.517008057820889
    },
    {
        "answer_number": 3278,
        "answer_values": {
            "number_question": 76,
            "answer_question": "using linked list you are pushing the node that contains each int to the stack until you get to the end of your linked list",
            "grade": 2.5
        },
        "frequence_similarity": 3.9678414098799655,
        "liv_distance": 1.5686274509803921,
        "bert_score": 4.966433942317963,
        "nota_atribuida": 5.176321154005983,
        "percentual_error": 0.5170315122226841
    },
    {
        "answer_number": 3279,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Using a linked list is one way to implement a stack so that it can handle essentially any number of elements It is usually convenient to put a data structure in its own module thus you will want to create files stack h and a stack c",
            "grade": 2.0
        },
        "frequence_similarity": 3.0886810475844637,
        "liv_distance": 0,
        "bert_score": 4.815150201320648,
        "nota_atribuida": 4.765212251645742,
        "percentual_error": 0.580291518114588
    },
    {
        "answer_number": 3280,
        "answer_values": {
            "number_question": 76,
            "answer_question": "You can add an element to the end of the linked list and update a pointer called top each time you modify the list",
            "grade": 3.0
        },
        "frequence_similarity": 4.0957118462605635,
        "liv_distance": 2.156862745098039,
        "bert_score": 4.951387047767639,
        "nota_atribuida": 5.085644314058025,
        "percentual_error": 0.41010424348646823
    },
    {
        "answer_number": 3281,
        "answer_values": {
            "number_question": 76,
            "answer_question": "You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to",
            "grade": 5.0
        },
        "frequence_similarity": 4.155673622436778,
        "liv_distance": 0,
        "bert_score": 4.950132071971893,
        "nota_atribuida": 5.992720515697591,
        "percentual_error": 0.16565439904918233
    },
    {
        "answer_number": 3282,
        "answer_values": {
            "number_question": 76,
            "answer_question": "This is the implementation of the stack using single linked list The operations performed on a stack are 1 - RRB - push - LRB - - RRB - : This is the function which is for insertion - LRB - pushing - RRB - of an element into stack It is similar to the insertion of an element at the end of a single linked list see the function insert end - LRB - - RRB - in the program for operations of single linked list 2 - RRB - pop - LRB - - RRB - : This is the function which is for deletion - LRB - popping up - RRB - of an element from the stack It is similar to the deletion of an element at the end of a single linked list see the function delete end - LRB - - RRB - in the program for operations of single linked list 3 - RRB - stack display - LRB - - RRB - : This is the function which is for displaying the elements of a stack",
            "grade": 4.0
        },
        "frequence_similarity": 4.118114724143819,
        "liv_distance": 0,
        "bert_score": 4.665075838565826,
        "nota_atribuida": 5.8727338693021505,
        "percentual_error": 0.3188862139814085
    },
    {
        "answer_number": 3283,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Using nodes to keep track of the head of the stack Then using Push - LRB - - RRB - and Pop - LRB - - RRB - to create the stack as needed",
            "grade": 4.0
        },
        "frequence_similarity": 4.007556722888818,
        "liv_distance": 1.5359477124183007,
        "bert_score": 4.923923015594482,
        "nota_atribuida": 5.221725994054696,
        "percentual_error": 0.23396976314837603
    },
    {
        "answer_number": 3284,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Use the head as the top of the stack only modify the head when you push or pop push would add a new item to the head pop would remove the item from the head",
            "grade": 4.5
        },
        "frequence_similarity": 4.371137997959372,
        "liv_distance": 1.7647058823529411,
        "bert_score": 4.905765205621719,
        "nota_atribuida": 5.533285894365701,
        "percentual_error": 0.18674001562396225
    },
    {
        "answer_number": 3285,
        "answer_values": {
            "number_question": 76,
            "answer_question": "you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item",
            "grade": 4.5
        },
        "frequence_similarity": 4.399187895707324,
        "liv_distance": 0.8169934640522876,
        "bert_score": 4.956533312797546,
        "nota_atribuida": 5.947806715091971,
        "percentual_error": 0.24341858847200015
    },
    {
        "answer_number": 3286,
        "answer_values": {
            "number_question": 76,
            "answer_question": "You dynamicly create space as the stack grows The stack can be as long as you need",
            "grade": 2.5
        },
        "frequence_similarity": 3.3253126141202305,
        "liv_distance": 1.2091503267973855,
        "bert_score": 4.9289271235466,
        "nota_atribuida": 4.589208802576701,
        "percentual_error": 0.4552437887340567
    },
    {
        "answer_number": 3287,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Declare a pointer that points to the head of the linked list only add and remove nodes from the beginning of the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.5277677641345315,
        "liv_distance": 2.9084967320261437,
        "bert_score": 4.966138303279877,
        "nota_atribuida": 5.278860002268822,
        "percentual_error": 0.05282579991683245
    },
    {
        "answer_number": 3288,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Creating a linked list Add an element to the top of the stack when pushing and deleting an element when popping",
            "grade": 4.0
        },
        "frequence_similarity": 3.8123766423931507,
        "liv_distance": 1.6666666666666667,
        "bert_score": 4.946357607841492,
        "nota_atribuida": 4.959151388746708,
        "percentual_error": 0.1934103868906304
    },
    {
        "answer_number": 3289,
        "answer_values": {
            "number_question": 76,
            "answer_question": "A singly - linked list is already a lot like a stack it just depends on the way you address moving the head",
            "grade": 3.5
        },
        "frequence_similarity": 3.651705531801071,
        "liv_distance": 1.5032679738562091,
        "bert_score": 4.91800844669342,
        "nota_atribuida": 4.835787127010576,
        "percentual_error": 0.27622951381574634
    },
    {
        "answer_number": 3290,
        "answer_values": {
            "number_question": 76,
            "answer_question": "make a list make the bottom the head add on the end and make the end top",
            "grade": 3.5
        },
        "frequence_similarity": 4.0740740740740735,
        "liv_distance": 1.4379084967320261,
        "bert_score": 4.921925961971283,
        "nota_atribuida": 5.333603386369329,
        "percentual_error": 0.3437832274996909
    },
    {
        "answer_number": 3291,
        "answer_values": {
            "number_question": 76,
            "answer_question": "use the add function with a list as the beginning of the stack and remove for pop",
            "grade": 4.5
        },
        "frequence_similarity": 4.3951174787165375,
        "liv_distance": 1.4705882352941178,
        "bert_score": 4.951028674840927,
        "nota_atribuida": 5.687055598335407,
        "percentual_error": 0.2087293816298994
    },
    {
        "answer_number": 3292,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Use head as the top and push and pop nodes from the head",
            "grade": 4.5
        },
        "frequence_similarity": 3.8382584475782764,
        "liv_distance": 1.4052287581699345,
        "bert_score": 4.922233819961548,
        "nota_atribuida": 5.083302932620706,
        "percentual_error": 0.11474880414415567
    },
    {
        "answer_number": 3293,
        "answer_values": {
            "number_question": 76,
            "answer_question": "create a node based list that points to the next list item down",
            "grade": 1.5
        },
        "frequence_similarity": 3.390870806374748,
        "liv_distance": 1.3071895424836601,
        "bert_score": 4.940616190433502,
        "nota_atribuida": 4.6273542122787665,
        "percentual_error": 0.67584067888736
    },
    {
        "answer_number": 3294,
        "answer_values": {
            "number_question": 76,
            "answer_question": "have the head of the list be the last item added and a push just adds a new head",
            "grade": 4.5
        },
        "frequence_similarity": 4.166666666666666,
        "liv_distance": 1.5359477124183007,
        "bert_score": 4.943017959594727,
        "nota_atribuida": 5.404488941250041,
        "percentual_error": 0.16735882912933409
    },
    {
        "answer_number": 3295,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Create a new list Pop elements in the stack as needed Push the stack to remove items unless the stack is empty The top item is at the head of the list The last item is at the end",
            "grade": 4.5
        },
        "frequence_similarity": 4.468564963589725,
        "liv_distance": 1.0457516339869282,
        "bert_score": 4.932025671005249,
        "nota_atribuida": 5.929358308648348,
        "percentual_error": 0.2410645864601466
    },
    {
        "answer_number": 3296,
        "answer_values": {
            "number_question": 76,
            "answer_question": "adding the element to the end of the list so that it links to the element before it when popping the element it takes the last element in the list and sets the previous one as the end of the list",
            "grade": 3.5
        },
        "frequence_similarity": 4.382708192682296,
        "liv_distance": 1.0130718954248366,
        "bert_score": 4.949865639209747,
        "nota_atribuida": 5.851182071338269,
        "percentual_error": 0.40183026996466575
    },
    {
        "answer_number": 3297,
        "answer_values": {
            "number_question": 76,
            "answer_question": "You can implement a stack using arrays or and linked list By the use of pointers that point element - LRB - node - RRB - to the next element in the stack By the use of pointers the stack becomes a linked list",
            "grade": 2.5
        },
        "frequence_similarity": 4.166963411379544,
        "liv_distance": 0.49019607843137253,
        "bert_score": 4.926581680774689,
        "nota_atribuida": 5.807840656786029,
        "percentual_error": 0.5695474191291843
    },
    {
        "answer_number": 3298,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Elements are only inserted and removed from the head of the list There is no header node or current pointer",
            "grade": 4.5
        },
        "frequence_similarity": 3.8621156878275107,
        "liv_distance": 1.5686274509803921,
        "bert_score": 4.930016994476318,
        "nota_atribuida": 5.048378972765443,
        "percentual_error": 0.10862476365656981
    },
    {
        "answer_number": 3299,
        "answer_values": {
            "number_question": 76,
            "answer_question": "use a linked list and keep track of a pointer that points to the first item",
            "grade": 4.0
        },
        "frequence_similarity": 3.687827741832997,
        "liv_distance": 1.3725490196078431,
        "bert_score": 4.946939051151276,
        "nota_atribuida": 4.934956423991469,
        "percentual_error": 0.18945586215232713
    },
    {
        "answer_number": 3300,
        "answer_values": {
            "number_question": 76,
            "answer_question": "A singly linked list can already be easily used for LIFO data storage Members of a stack can simply be pushed and popped from a list the first item in will be the last out",
            "grade": 4.5
        },
        "frequence_similarity": 3.546914390895013,
        "liv_distance": 0.7843137254901961,
        "bert_score": 4.94893878698349,
        "nota_atribuida": 5.007506447706026,
        "percentual_error": 0.10134913514460242
    },
    {
        "answer_number": 3301,
        "answer_values": {
            "number_question": 76,
            "answer_question": "using pointer",
            "grade": 1.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.35947712418300654,
        "bert_score": 4.827024340629578,
        "nota_atribuida": 3.9715364752804234,
        "percentual_error": 0.622312420058011
    },
    {
        "answer_number": 3302,
        "answer_values": {
            "number_question": 76,
            "answer_question": "the top is the first pointer",
            "grade": 3.0
        },
        "frequence_similarity": 3.973139127471974,
        "liv_distance": 0.8169934640522876,
        "bert_score": 4.880558550357819,
        "nota_atribuida": 5.451617278871718,
        "percentual_error": 0.44970458369724586
    },
    {
        "answer_number": 3303,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Keep a pointer pointing to the last element entered at the front of the array and move the pointer back when you delete an element",
            "grade": 2.5
        },
        "frequence_similarity": 4.08113883008419,
        "liv_distance": 1.8954248366013071,
        "bert_score": 4.968930184841156,
        "nota_atribuida": 5.176069788495372,
        "percentual_error": 0.517008057820889
    },
    {
        "answer_number": 3304,
        "answer_values": {
            "number_question": 76,
            "answer_question": "using linked list you are pushing the node that contains each int to the stack until you get to the end of your linked list",
            "grade": 2.5
        },
        "frequence_similarity": 3.9678414098799655,
        "liv_distance": 1.5686274509803921,
        "bert_score": 4.966433942317963,
        "nota_atribuida": 5.176321154005983,
        "percentual_error": 0.5170315122226841
    },
    {
        "answer_number": 3305,
        "answer_values": {
            "number_question": 76,
            "answer_question": "have a linked list and for each push add an item onto beginning of the list and for each pop remove the first element in the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.0913098741604195,
        "liv_distance": 1.8300653594771241,
        "bert_score": 4.9539995193481445,
        "nota_atribuida": 5.20879904890728,
        "percentual_error": 0.040085833019625206
    },
    {
        "answer_number": 3306,
        "answer_values": {
            "number_question": 76,
            "answer_question": "Using a linked list is one way to implement a stack so that it can handle essentially any number of elements It is usually convenient to put a data structure in its own module thus you will want to create files stack h and a stack c",
            "grade": 2.0
        },
        "frequence_similarity": 3.0886810475844637,
        "liv_distance": 0,
        "bert_score": 4.815150201320648,
        "nota_atribuida": 4.765212251645742,
        "percentual_error": 0.580291518114588
    },
    {
        "answer_number": 3307,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Array based because they are faster easier to keep track of and less complexity in code",
            "grade": 2.5
        },
        "frequence_similarity": 3.253778361444409,
        "liv_distance": 1.5068493150684932,
        "bert_score": 4.9099478125572205,
        "nota_atribuida": 4.388181925967527,
        "percentual_error": 0.4302879775321101
    },
    {
        "answer_number": 3308,
        "answer_values": {
            "number_question": 77,
            "answer_question": "The list - based implementation is preferred since the big O - LRB - 1 - RRB - is very efficient",
            "grade": 3.0
        },
        "frequence_similarity": 3.033001790889026,
        "liv_distance": 0.4794520547945205,
        "bert_score": 4.907774925231934,
        "nota_atribuida": 4.541617315562633,
        "percentual_error": 0.33944236346818923
    },
    {
        "answer_number": 3309,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Linked list implementation is preferred That way the list can be moved along without iteration",
            "grade": 3.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.136986301369863,
        "bert_score": 4.900606572628021,
        "nota_atribuida": 4.078394404526491,
        "percentual_error": 0.2644164093913066
    },
    {
        "answer_number": 3310,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Linked list because it takes up less memory and is scalable",
            "grade": 3.0
        },
        "frequence_similarity": 2.727272727272727,
        "liv_distance": 1.643835616438356,
        "bert_score": 4.921172261238098,
        "nota_atribuida": 3.750405903069563,
        "percentual_error": 0.20008658328299467
    },
    {
        "answer_number": 3311,
        "answer_values": {
            "number_question": 77,
            "answer_question": "list based because the nodes are easier to work with and can be traversed easier",
            "grade": 3.0
        },
        "frequence_similarity": 3.0484543180953483,
        "liv_distance": 1.7808219178082192,
        "bert_score": 4.914762079715729,
        "nota_atribuida": 4.0536374749768305,
        "percentual_error": 0.25992395261809953
    },
    {
        "answer_number": 3312,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Array is preferred Linked list implementation requires extra space to store pointers Space is allocated dynamically in the list - based which takes more time",
            "grade": 2.5
        },
        "frequence_similarity": 2.6376204706407953,
        "liv_distance": 0,
        "bert_score": 4.889694452285767,
        "nota_atribuida": 4.282343213997219,
        "percentual_error": 0.4162074651493304
    },
    {
        "answer_number": 3313,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Array based implementation requires less memory than a list based inceasing the size of a resizeable array can waste storage and time",
            "grade": 3.5
        },
        "frequence_similarity": 2.961593091172498,
        "liv_distance": 0,
        "bert_score": 4.878334254026413,
        "nota_atribuida": 4.6407158065938265,
        "percentual_error": 0.24580600367146477
    },
    {
        "answer_number": 3314,
        "answer_values": {
            "number_question": 77,
            "answer_question": "i would think a list based would be better because you can change the pointers of the nodes to add or remove things from your stack",
            "grade": 4.0
        },
        "frequence_similarity": 2.7849014411490947,
        "liv_distance": 0,
        "bert_score": 4.893417954444885,
        "nota_atribuida": 4.447697206333168,
        "percentual_error": 0.10065820256281899
    },
    {
        "answer_number": 3315,
        "answer_values": {
            "number_question": 77,
            "answer_question": "array based list is preferred because it can hold any size as long as u specify it",
            "grade": 1.0
        },
        "frequence_similarity": 3.0056498968474314,
        "liv_distance": 1.2328767123287672,
        "bert_score": 4.873126149177551,
        "nota_atribuida": 4.208003197540376,
        "percentual_error": 0.7623575950264223
    },
    {
        "answer_number": 3316,
        "answer_values": {
            "number_question": 77,
            "answer_question": "List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer",
            "grade": 5.0
        },
        "frequence_similarity": 2.9222003309207487,
        "liv_distance": 0,
        "bert_score": 4.913432002067566,
        "nota_atribuida": 4.606375425949044,
        "percentual_error": 0.07872491481019117
    },
    {
        "answer_number": 3317,
        "answer_values": {
            "number_question": 77,
            "answer_question": "List based is preferred because the stack you create is not limited in size and can increase or decrease in size as needed",
            "grade": 5.0
        },
        "frequence_similarity": 3.0598925109558546,
        "liv_distance": 0,
        "bert_score": 4.913756400346756,
        "nota_atribuida": 4.7600993377847765,
        "percentual_error": 0.047980132443044665
    },
    {
        "answer_number": 3318,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Array - based prevents the push operation from adding an item to the stack if the stack size limit which is the size of the array has been reached List - base much simpler to write and does not have a fixed size",
            "grade": 5.0
        },
        "frequence_similarity": 2.8553345272593504,
        "liv_distance": 0,
        "bert_score": 4.889889508485794,
        "nota_atribuida": 4.525319016777481,
        "percentual_error": 0.0949361966445037
    },
    {
        "answer_number": 3319,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Array based because they are faster easier to keep track of and less complexity in code",
            "grade": 2.5
        },
        "frequence_similarity": 3.253778361444409,
        "liv_distance": 1.5068493150684932,
        "bert_score": 4.9099478125572205,
        "nota_atribuida": 4.388181925967527,
        "percentual_error": 0.4302879775321101
    },
    {
        "answer_number": 3320,
        "answer_values": {
            "number_question": 77,
            "answer_question": "list - based because it does not use a fixed size like an array would",
            "grade": 5.0
        },
        "frequence_similarity": 3.127181507505318,
        "liv_distance": 1.9863013698630136,
        "bert_score": 4.926786422729492,
        "nota_atribuida": 4.064699743698236,
        "percentual_error": 0.18706005126035274
    },
    {
        "answer_number": 3321,
        "answer_values": {
            "number_question": 77,
            "answer_question": "usually linked list because it does not have a fixed size But if you know or want to set a max size array is better",
            "grade": 5.0
        },
        "frequence_similarity": 2.9522670168666454,
        "liv_distance": 0,
        "bert_score": 4.914654940366745,
        "nota_atribuida": 4.6402583956612125,
        "percentual_error": 0.07194832086775749
    },
    {
        "answer_number": 3322,
        "answer_values": {
            "number_question": 77,
            "answer_question": "List - based Allows more flexablity with size of the stack",
            "grade": 5.0
        },
        "frequence_similarity": 2.9767312946227964,
        "liv_distance": 1.7808219178082192,
        "bert_score": 4.897977709770203,
        "nota_atribuida": 3.9690125445457225,
        "percentual_error": 0.2061974910908555
    },
    {
        "answer_number": 3323,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Linked lists are preferred for implementing stacks because they are not limited to a set number of elements",
            "grade": 5.0
        },
        "frequence_similarity": 3.1917144638660746,
        "liv_distance": 0,
        "bert_score": 4.87395241856575,
        "nota_atribuida": 4.89628188011625,
        "percentual_error": 0.020743623976750003
    },
    {
        "answer_number": 3324,
        "answer_values": {
            "number_question": 77,
            "answer_question": "The list - based implementation is preferred since the big O - LRB - 1 - RRB - is very efficient",
            "grade": 3.0
        },
        "frequence_similarity": 3.033001790889026,
        "liv_distance": 0.4794520547945205,
        "bert_score": 4.907774925231934,
        "nota_atribuida": 4.541617315562633,
        "percentual_error": 0.33944236346818923
    },
    {
        "answer_number": 3325,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Linked list implementation is preferred That way the list can be moved along without iteration",
            "grade": 3.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.136986301369863,
        "bert_score": 4.900606572628021,
        "nota_atribuida": 4.078394404526491,
        "percentual_error": 0.2644164093913066
    },
    {
        "answer_number": 3326,
        "answer_values": {
            "number_question": 77,
            "answer_question": "list because it its size is not determined",
            "grade": 5.0
        },
        "frequence_similarity": 3.033001790889026,
        "liv_distance": 1.5068493150684932,
        "bert_score": 4.880459010601044,
        "nota_atribuida": 4.133765245550276,
        "percentual_error": 0.1732469508899449
    },
    {
        "answer_number": 3327,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Linked list because it takes up less memory and is scalable",
            "grade": 3.0
        },
        "frequence_similarity": 2.727272727272727,
        "liv_distance": 1.643835616438356,
        "bert_score": 4.921172261238098,
        "nota_atribuida": 3.750405903069563,
        "percentual_error": 0.20008658328299467
    },
    {
        "answer_number": 3328,
        "answer_values": {
            "number_question": 77,
            "answer_question": "List - based as the list can be grown dynamically and as the head node is easily accessible",
            "grade": 5.0
        },
        "frequence_similarity": 2.657173653365483,
        "liv_distance": 1.0273972602739727,
        "bert_score": 4.915225058794022,
        "nota_atribuida": 3.9107833585065372,
        "percentual_error": 0.21784332829869257
    },
    {
        "answer_number": 3329,
        "answer_values": {
            "number_question": 77,
            "answer_question": "list based because the nodes are easier to work with and can be traversed easier",
            "grade": 3.0
        },
        "frequence_similarity": 3.0484543180953483,
        "liv_distance": 1.7808219178082192,
        "bert_score": 4.914762079715729,
        "nota_atribuida": 4.0536374749768305,
        "percentual_error": 0.25992395261809953
    },
    {
        "answer_number": 3330,
        "answer_values": {
            "number_question": 77,
            "answer_question": "list based because of the lower processing overhead and nearly unlimited space due to linked list design",
            "grade": 5.0
        },
        "frequence_similarity": 2.8458572319330373,
        "liv_distance": 0.2054794520547945,
        "bert_score": 4.924898445606232,
        "nota_atribuida": 4.444259568855697,
        "percentual_error": 0.11114808622886052
    },
    {
        "answer_number": 3331,
        "answer_values": {
            "number_question": 77,
            "answer_question": "list - based It can grow and shrink dynamically unlike the fixed size array",
            "grade": 5.0
        },
        "frequence_similarity": 2.9181210050035453,
        "liv_distance": 1.5068493150684932,
        "bert_score": 4.918111562728882,
        "nota_atribuida": 4.015896134404882,
        "percentual_error": 0.19682077311902368
    },
    {
        "answer_number": 3332,
        "answer_values": {
            "number_question": 77,
            "answer_question": "list based because arrays can become full lists can grow or shrink as needed",
            "grade": 5.0
        },
        "frequence_similarity": 2.8768891807222046,
        "liv_distance": 1.5753424657534247,
        "bert_score": 4.9103885889053345,
        "nota_atribuida": 3.9410835130184987,
        "percentual_error": 0.2117832973963003
    },
    {
        "answer_number": 3333,
        "answer_values": {
            "number_question": 77,
            "answer_question": "List - bases implentation is preferred One of the main reasons is because of that the list has no fixed size",
            "grade": 5.0
        },
        "frequence_similarity": 2.927352161723642,
        "liv_distance": 0,
        "bert_score": 4.921671897172928,
        "nota_atribuida": 4.614380734671916,
        "percentual_error": 0.07712385306561687
    },
    {
        "answer_number": 3334,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Array is preferred Linked list implementation requires extra space to store pointers Space is allocated dynamically in the list - based which takes more time",
            "grade": 2.5
        },
        "frequence_similarity": 2.6376204706407953,
        "liv_distance": 0,
        "bert_score": 4.889694452285767,
        "nota_atribuida": 4.282343213997219,
        "percentual_error": 0.4162074651493304
    },
    {
        "answer_number": 3335,
        "answer_values": {
            "number_question": 77,
            "answer_question": "link list is preferred because it makes pushing elements easier because there is no limit other than memory to the number of elements",
            "grade": 5.0
        },
        "frequence_similarity": 3.0598925109558546,
        "liv_distance": 0,
        "bert_score": 4.905530512332916,
        "nota_atribuida": 4.757846208260743,
        "percentual_error": 0.04843075834785149
    },
    {
        "answer_number": 3336,
        "answer_values": {
            "number_question": 77,
            "answer_question": "List - based implementation is much easier to implement and allows the stack to scale as necessary It is therefore the preferred implementation",
            "grade": 5.0
        },
        "frequence_similarity": 2.6376204706407953,
        "liv_distance": 0,
        "bert_score": 4.911757707595825,
        "nota_atribuida": 4.28838649733049,
        "percentual_error": 0.14232270053390206
    },
    {
        "answer_number": 3337,
        "answer_values": {
            "number_question": 77,
            "answer_question": "Array based implementation requires less memory than a list based inceasing the size of a resizeable array can waste storage and time",
            "grade": 3.5
        },
        "frequence_similarity": 2.961593091172498,
        "liv_distance": 0,
        "bert_score": 4.878334254026413,
        "nota_atribuida": 4.6407158065938265,
        "percentual_error": 0.24580600367146477
    },
    {
        "answer_number": 3338,
        "answer_values": {
            "number_question": 77,
            "answer_question": "in an array based stack you would need to pre - determine a size where in a list you can increase or decrease the size however you want",
            "grade": 5.0
        },
        "frequence_similarity": 2.882235393578219,
        "liv_distance": 0,
        "bert_score": 4.891344904899597,
        "nota_atribuida": 4.555733280060027,
        "percentual_error": 0.0888533439879946
    },
    {
        "answer_number": 3339,
        "answer_values": {
            "number_question": 77,
            "answer_question": "A list - based implementation is preferred because the list is more flexible than a array",
            "grade": 5.0
        },
        "frequence_similarity": 2.8656362120635652,
        "liv_distance": 0.684931506849315,
        "bert_score": 4.875575751066208,
        "nota_atribuida": 4.265979491902023,
        "percentual_error": 0.14680410161959545
    },
    {
        "answer_number": 3340,
        "answer_values": {
            "number_question": 77,
            "answer_question": "i would think a list based would be better because you can change the pointers of the nodes to add or remove things from your stack",
            "grade": 4.0
        },
        "frequence_similarity": 2.7849014411490947,
        "liv_distance": 0,
        "bert_score": 4.893417954444885,
        "nota_atribuida": 4.447697206333168,
        "percentual_error": 0.10065820256281899
    },
    {
        "answer_number": 3341,
        "answer_values": {
            "number_question": 77,
            "answer_question": "list based because it is much more flexible easier to use and doesnt need to have a max size defined when it is made",
            "grade": 5.0
        },
        "frequence_similarity": 2.919919383216891,
        "liv_distance": 0,
        "bert_score": 4.915029853582382,
        "nota_atribuida": 4.604268038556517,
        "percentual_error": 0.07914639228869658
    },
    {
        "answer_number": 3342,
        "answer_values": {
            "number_question": 77,
            "answer_question": "array based list is preferred because it can hold any size as long as u specify it",
            "grade": 1.0
        },
        "frequence_similarity": 3.0056498968474314,
        "liv_distance": 1.2328767123287672,
        "bert_score": 4.873126149177551,
        "nota_atribuida": 4.208003197540376,
        "percentual_error": 0.7623575950264223
    },
    {
        "answer_number": 3343,
        "answer_values": {
            "number_question": 78,
            "answer_question": "By using parentheses to have order in the expression",
            "grade": 2.5
        },
        "frequence_similarity": 3.1063390625908323,
        "liv_distance": 1.648936170212766,
        "bert_score": 4.819391369819641,
        "nota_atribuida": 4.143496784458086,
        "percentual_error": 0.3966448799049891
    },
    {
        "answer_number": 3344,
        "answer_values": {
            "number_question": 78,
            "answer_question": "In postfix notation",
            "grade": 4.0
        },
        "frequence_similarity": 3.200140042014005,
        "liv_distance": 0.9042553191489362,
        "bert_score": 4.744420051574707,
        "nota_atribuida": 4.517820753792424,
        "percentual_error": 0.11461737461756238
    },
    {
        "answer_number": 3345,
        "answer_values": {
            "number_question": 78,
            "answer_question": "in postfix format",
            "grade": 4.0
        },
        "frequence_similarity": 3.200140042014005,
        "liv_distance": 0.9042553191489362,
        "bert_score": 4.770681411027908,
        "nota_atribuida": 4.5250139278577315,
        "percentual_error": 0.11602482030509187
    },
    {
        "answer_number": 3346,
        "answer_values": {
            "number_question": 78,
            "answer_question": "they use parenthisis and a stack to determine which evaluations need to be made first",
            "grade": 3.0
        },
        "frequence_similarity": 2.803169531295416,
        "liv_distance": 1.648936170212766,
        "bert_score": 4.907398819923401,
        "nota_atribuida": 3.829330225287459,
        "percentual_error": 0.21657318029426498
    },
    {
        "answer_number": 3347,
        "answer_values": {
            "number_question": 78,
            "answer_question": "By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered",
            "grade": 4.5
        },
        "frequence_similarity": 3.1755660236665673,
        "liv_distance": 0,
        "bert_score": 4.880037605762482,
        "nota_atribuida": 4.879930447020571,
        "percentual_error": 0.07785570945023124
    },
    {
        "answer_number": 3348,
        "answer_values": {
            "number_question": 78,
            "answer_question": "by being passed to the function by a leading term",
            "grade": 1.5
        },
        "frequence_similarity": 3.0484543180953483,
        "liv_distance": 1.4361702127659575,
        "bert_score": 4.874291270971298,
        "nota_atribuida": 4.176860764260821,
        "percentual_error": 0.6408786204139953
    },
    {
        "answer_number": 3349,
        "answer_values": {
            "number_question": 78,
            "answer_question": "i have an hard time explaining this so i will show how infix is evaluated instead Start with an infix expression like - LRB - - LRB - - LRB - 5 plus 2 - RRB - multiplied by 5 - RRB - plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - and push items until you get a - RRB - and once that happens perform the operations until you reach an - LRB - with that complete you will now have - LRB - - LRB - 7 multiplied by 5 - RRB - plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - as now the expression that will be evaluated perform last step again - LRB - 35 plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - is now the stack repeat agian - LRB - 35 plus - LRB - 400 divided by 5 - RRB - - RRB - is now the stack after that repeat - LRB - 35 plus 80 - RRB - is now the stack repeat again 115 is now the stack and is returned",
            "grade": 2.5
        },
        "frequence_similarity": 2.8402069087198862,
        "liv_distance": 0,
        "bert_score": 4.605076462030411,
        "nota_atribuida": 4.430427497088375,
        "percentual_error": 0.4357203674717687
    },
    {
        "answer_number": 3350,
        "answer_values": {
            "number_question": 78,
            "answer_question": "infix expressions are pointers evaluated by reference to the memory location",
            "grade": 1.5
        },
        "frequence_similarity": 3.0484543180953483,
        "liv_distance": 1.5425531914893618,
        "bert_score": 4.8909541964530945,
        "nota_atribuida": 4.139968102143744,
        "percentual_error": 0.637678367805956
    },
    {
        "answer_number": 3351,
        "answer_values": {
            "number_question": 78,
            "answer_question": "When an operand is entered the computer Pushes it onto a stack When an operator is entered the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",
            "grade": 4.0
        },
        "frequence_similarity": 3.1501300390130043,
        "liv_distance": 0,
        "bert_score": 4.797084331512451,
        "nota_atribuida": 4.828827827453871,
        "percentual_error": 0.1716416192645437
    },
    {
        "answer_number": 3352,
        "answer_values": {
            "number_question": 78,
            "answer_question": "They are converted to post fix expressions It still follow the order of precedence for the operators",
            "grade": 5.0
        },
        "frequence_similarity": 3.334622326111986,
        "liv_distance": 1.648936170212766,
        "bert_score": 4.886045008897781,
        "nota_atribuida": 4.416469045055397,
        "percentual_error": 0.11670619098892066
    },
    {
        "answer_number": 3353,
        "answer_values": {
            "number_question": 78,
            "answer_question": "They are first converted to postfix expressions and then evaluated",
            "grade": 5.0
        },
        "frequence_similarity": 3.6504474832710554,
        "liv_distance": 1.9148936170212767,
        "bert_score": 4.923715889453888,
        "nota_atribuida": 4.675538880802056,
        "percentual_error": 0.06489222383958881
    },
    {
        "answer_number": 3354,
        "answer_values": {
            "number_question": 78,
            "answer_question": "Computers cannot evaulate infix expressions it must first convert infix to postfix expression then it can evaluate",
            "grade": 5.0
        },
        "frequence_similarity": 3.0292561240249634,
        "liv_distance": 0.6382978723404256,
        "bert_score": 4.892025589942932,
        "nota_atribuida": 4.471222911667314,
        "percentual_error": 0.10575541766653718
    },
    {
        "answer_number": 3355,
        "answer_values": {
            "number_question": 78,
            "answer_question": "By using parentheses to have order in the expression",
            "grade": 2.5
        },
        "frequence_similarity": 3.1063390625908323,
        "liv_distance": 1.648936170212766,
        "bert_score": 4.819391369819641,
        "nota_atribuida": 4.143496784458086,
        "percentual_error": 0.3966448799049891
    },
    {
        "answer_number": 3356,
        "answer_values": {
            "number_question": 78,
            "answer_question": "In postfix notation",
            "grade": 4.0
        },
        "frequence_similarity": 3.200140042014005,
        "liv_distance": 0.9042553191489362,
        "bert_score": 4.744420051574707,
        "nota_atribuida": 4.517820753792424,
        "percentual_error": 0.11461737461756238
    },
    {
        "answer_number": 3357,
        "answer_values": {
            "number_question": 78,
            "answer_question": "computers usually convert infix expressions to post fix expression and evaluate them using a stack",
            "grade": 5.0
        },
        "frequence_similarity": 2.662050930888041,
        "liv_distance": 1.2765957446808511,
        "bert_score": 4.855646342039108,
        "nota_atribuida": 3.8027952895079826,
        "percentual_error": 0.2394409420984035
    },
    {
        "answer_number": 3358,
        "answer_values": {
            "number_question": 78,
            "answer_question": "they are converted to postfix",
            "grade": 5.0
        },
        "frequence_similarity": 3.8558153613666013,
        "liv_distance": 1.5425531914893618,
        "bert_score": 4.867662191390991,
        "nota_atribuida": 5.0344306978832405,
        "percentual_error": 0.006839044958492968
    },
    {
        "answer_number": 3359,
        "answer_values": {
            "number_question": 78,
            "answer_question": "Infix expressions are interpreted as postfix expressions by implementing stacks",
            "grade": 5.0
        },
        "frequence_similarity": 3.200140042014005,
        "liv_distance": 1.3297872340425532,
        "bert_score": 4.8751890659332275,
        "nota_atribuida": 4.387812295497103,
        "percentual_error": 0.12243754090057946
    },
    {
        "answer_number": 3360,
        "answer_values": {
            "number_question": 78,
            "answer_question": "They are first converted into an equivalent postfix expression so it can be read by the computer",
            "grade": 5.0
        },
        "frequence_similarity": 4.117647058823529,
        "liv_distance": 1.3829787234042554,
        "bert_score": 4.955237507820129,
        "nota_atribuida": 5.412751575314442,
        "percentual_error": 0.0762554071753172
    },
    {
        "answer_number": 3361,
        "answer_values": {
            "number_question": 78,
            "answer_question": "The computer translates the infix expression to a postfix expression then solves",
            "grade": 5.0
        },
        "frequence_similarity": 3.439336436627724,
        "liv_distance": 1.4361702127659575,
        "bert_score": 4.9057334661483765,
        "nota_atribuida": 4.62161394381311,
        "percentual_error": 0.07567721123737792
    },
    {
        "answer_number": 3362,
        "answer_values": {
            "number_question": 78,
            "answer_question": "in postfix format",
            "grade": 4.0
        },
        "frequence_similarity": 3.200140042014005,
        "liv_distance": 0.9042553191489362,
        "bert_score": 4.770681411027908,
        "nota_atribuida": 4.5250139278577315,
        "percentual_error": 0.11602482030509187
    },
    {
        "answer_number": 3363,
        "answer_values": {
            "number_question": 78,
            "answer_question": "they use parenthisis and a stack to determine which evaluations need to be made first",
            "grade": 3.0
        },
        "frequence_similarity": 2.803169531295416,
        "liv_distance": 1.648936170212766,
        "bert_score": 4.907398819923401,
        "nota_atribuida": 3.829330225287459,
        "percentual_error": 0.21657318029426498
    },
    {
        "answer_number": 3364,
        "answer_values": {
            "number_question": 78,
            "answer_question": "By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered",
            "grade": 4.5
        },
        "frequence_similarity": 3.1755660236665673,
        "liv_distance": 0,
        "bert_score": 4.880037605762482,
        "nota_atribuida": 4.879930447020571,
        "percentual_error": 0.07785570945023124
    },
    {
        "answer_number": 3365,
        "answer_values": {
            "number_question": 78,
            "answer_question": "by being passed to the function by a leading term",
            "grade": 1.5
        },
        "frequence_similarity": 3.0484543180953483,
        "liv_distance": 1.4361702127659575,
        "bert_score": 4.874291270971298,
        "nota_atribuida": 4.176860764260821,
        "percentual_error": 0.6408786204139953
    },
    {
        "answer_number": 3366,
        "answer_values": {
            "number_question": 78,
            "answer_question": "i have an hard time explaining this so i will show how infix is evaluated instead Start with an infix expression like - LRB - - LRB - - LRB - 5 plus 2 - RRB - multiplied by 5 - RRB - plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - and push items until you get a - RRB - and once that happens perform the operations until you reach an - LRB - with that complete you will now have - LRB - - LRB - 7 multiplied by 5 - RRB - plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - as now the expression that will be evaluated perform last step again - LRB - 35 plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - is now the stack repeat agian - LRB - 35 plus - LRB - 400 divided by 5 - RRB - - RRB - is now the stack after that repeat - LRB - 35 plus 80 - RRB - is now the stack repeat again 115 is now the stack and is returned",
            "grade": 2.5
        },
        "frequence_similarity": 2.8402069087198862,
        "liv_distance": 0,
        "bert_score": 4.605076462030411,
        "nota_atribuida": 4.430427497088375,
        "percentual_error": 0.4357203674717687
    },
    {
        "answer_number": 3367,
        "answer_values": {
            "number_question": 78,
            "answer_question": "The infix expression is converted to postfix form",
            "grade": 5.0
        },
        "frequence_similarity": 3.7862393885688164,
        "liv_distance": 1.3829787234042554,
        "bert_score": 4.919650554656982,
        "nota_atribuida": 5.033223895282083,
        "percentual_error": 0.0066009174186002495
    },
    {
        "answer_number": 3368,
        "answer_values": {
            "number_question": 78,
            "answer_question": "by converting them to postfix expressions and putting the operations in a stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.200140042014005,
        "liv_distance": 1.648936170212766,
        "bert_score": 4.876889586448669,
        "nota_atribuida": 4.263907810691623,
        "percentual_error": 0.14721843786167543
    },
    {
        "answer_number": 3369,
        "answer_values": {
            "number_question": 78,
            "answer_question": "The computer converts the infix expression to postfix form Then evaluates the postfix expression",
            "grade": 5.0
        },
        "frequence_similarity": 3.7376844287208435,
        "liv_distance": 2.3404255319148937,
        "bert_score": 4.921318888664246,
        "nota_atribuida": 4.606393093229437,
        "percentual_error": 0.07872138135411255
    },
    {
        "answer_number": 3370,
        "answer_values": {
            "number_question": 78,
            "answer_question": "infix expressions are converted to postfix expressions before they can be evaluated by a computer Operands stay in the same order Operators always follow the operands",
            "grade": 5.0
        },
        "frequence_similarity": 3.371213683738064,
        "liv_distance": 0,
        "bert_score": 4.889285862445831,
        "nota_atribuida": 5.100764601767408,
        "percentual_error": 0.019754803374477103
    },
    {
        "answer_number": 3371,
        "answer_values": {
            "number_question": 78,
            "answer_question": "infix expressions are pointers evaluated by reference to the memory location",
            "grade": 1.5
        },
        "frequence_similarity": 3.0484543180953483,
        "liv_distance": 1.5425531914893618,
        "bert_score": 4.8909541964530945,
        "nota_atribuida": 4.139968102143744,
        "percentual_error": 0.637678367805956
    },
    {
        "answer_number": 3372,
        "answer_values": {
            "number_question": 78,
            "answer_question": "computers convert infix expressions to postfix form before evaluation",
            "grade": 5.0
        },
        "frequence_similarity": 3.308452083454443,
        "liv_distance": 1.5957446808510638,
        "bert_score": 4.8650310933589935,
        "nota_atribuida": 4.402241161757056,
        "percentual_error": 0.11955176764858888
    },
    {
        "answer_number": 3373,
        "answer_values": {
            "number_question": 78,
            "answer_question": "convert infix expressions to postfix expression and evaluate the postfix expression",
            "grade": 5.0
        },
        "frequence_similarity": 3.595892509399011,
        "liv_distance": 2.5531914893617023,
        "bert_score": 4.911486506462097,
        "nota_atribuida": 4.362576930426652,
        "percentual_error": 0.1274846139146696
    },
    {
        "answer_number": 3374,
        "answer_values": {
            "number_question": 78,
            "answer_question": "When an operand is entered the computer Pushes it onto a stack When an operator is entered the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",
            "grade": 4.0
        },
        "frequence_similarity": 3.1501300390130043,
        "liv_distance": 0,
        "bert_score": 4.797084331512451,
        "nota_atribuida": 4.828827827453871,
        "percentual_error": 0.1716416192645437
    },
    {
        "answer_number": 3375,
        "answer_values": {
            "number_question": 78,
            "answer_question": "Computers convert an infix expression into a postfix expression They then push the numbers onto a stack and pop them out as they are needed",
            "grade": 5.0
        },
        "frequence_similarity": 3.666900070023341,
        "liv_distance": 0,
        "bert_score": 4.920532256364822,
        "nota_atribuida": 5.439246050061517,
        "percentual_error": 0.08075495133310795
    },
    {
        "answer_number": 3376,
        "answer_values": {
            "number_question": 78,
            "answer_question": "infix expressions are converted to postfix - LRB - i e 3 plus 2 is changed to 32 plus - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 3.07166195047503,
        "liv_distance": 1.5425531914893618,
        "bert_score": 4.892766773700714,
        "nota_atribuida": 4.166359339743584,
        "percentual_error": 0.16672813205128312
    },
    {
        "answer_number": 3377,
        "answer_values": {
            "number_question": 78,
            "answer_question": "they are transformed into post - fix expressions then evaluated with a stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.0484543180953483,
        "liv_distance": 2.074468085106383,
        "bert_score": 4.906222224235535,
        "nota_atribuida": 3.9368663415368257,
        "percentual_error": 0.2126267316926349
    },
    {
        "answer_number": 3378,
        "answer_values": {
            "number_question": 78,
            "answer_question": "Writing arithmetic expressions is called infix notation This is because a binary operator - LRB - like plus - RRB - is written in between its two operands - LRB - as in a plus b - RRB - There are two alternative forms of notation used in certain situations One is prefix notation in which an operator is written before its operands In prefix notation the sum of a and b is written plus a b This is the notation used to write function calls in mathematics and computer science It is also used in the Lisp and Scheme programming languages In postfix notation an operator is written after its operands The sum of a and b is written a b plus - LRB - You may have seen this as reverse Polish notation - RRB - Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations",
            "grade": 5.0
        },
        "frequence_similarity": 3.1551633789629934,
        "liv_distance": 0,
        "bert_score": 4.560057520866394,
        "nota_atribuida": 4.769520621874994,
        "percentual_error": 0.04609587562500117
    },
    {
        "answer_number": 3379,
        "answer_values": {
            "number_question": 79,
            "answer_question": "isEmptry - LRB - - RRB - or or determines if the stack is full or not pop - LRB - - RRB - or or to remove the top element if it is not the on you are looking for search - LRB - - RRB - or or you compare each element of the stack to the data you are looking for",
            "grade": 3.0
        },
        "frequence_similarity": 3.443299960147786,
        "liv_distance": 0,
        "bert_score": 4.7920627892017365,
        "nota_atribuida": 5.154567391279665,
        "percentual_error": 0.41799189490173205
    },
    {
        "answer_number": 3380,
        "answer_values": {
            "number_question": 79,
            "answer_question": "You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for",
            "grade": 3.0
        },
        "frequence_similarity": 3.3964214570007956,
        "liv_distance": 0.9022556390977443,
        "bert_score": 4.919880628585815,
        "nota_atribuida": 4.78566804856291,
        "percentual_error": 0.37312827184056974
    },
    {
        "answer_number": 3381,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Push adds a given node to the top of the stack leaving previous nodes below Pop removes and returns the current top node of the stack",
            "grade": 3.0
        },
        "frequence_similarity": 3.7777777777777777,
        "liv_distance": 1.7293233082706767,
        "bert_score": 4.912261962890625,
        "nota_atribuida": 4.886790519892886,
        "percentual_error": 0.3861001432765001
    },
    {
        "answer_number": 3382,
        "answer_values": {
            "number_question": 79,
            "answer_question": "if the stack is implemented using an array you could simply search the array for the item If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty you would then have to have the items put back into the list",
            "grade": 4.5
        },
        "frequence_similarity": 4.00208188857998,
        "liv_distance": 0,
        "bert_score": 4.840461164712906,
        "nota_atribuida": 5.791305308126574,
        "percentual_error": 0.22297310181774854
    },
    {
        "answer_number": 3383,
        "answer_values": {
            "number_question": 79,
            "answer_question": "You need to pop each item on the stack and compare the item Once the item is found no more items need to be removed",
            "grade": 3.5
        },
        "frequence_similarity": 3.664050492949297,
        "liv_distance": 1.5413533834586466,
        "bert_score": 4.932031631469727,
        "nota_atribuida": 4.838560879868348,
        "percentual_error": 0.2766444224020529
    },
    {
        "answer_number": 3384,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Basically pop the stack until you find the given element",
            "grade": 3.5
        },
        "frequence_similarity": 3.8985773194637896,
        "liv_distance": 1.4285714285714286,
        "bert_score": 4.926098436117172,
        "nota_atribuida": 5.142567966124675,
        "percentual_error": 0.3194061754642161
    },
    {
        "answer_number": 3385,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Iterate through the stack checking the number against the current element",
            "grade": 1.5
        },
        "frequence_similarity": 3.8558153613666013,
        "liv_distance": 1.5413533834586466,
        "bert_score": 4.929351806640625,
        "nota_atribuida": 5.051795481849701,
        "percentual_error": 0.7030758657215515
    },
    {
        "answer_number": 3386,
        "answer_values": {
            "number_question": 79,
            "answer_question": "pop and push",
            "grade": 3.0
        },
        "frequence_similarity": 3.145497224367903,
        "liv_distance": 0.41353383458646614,
        "bert_score": 4.774348586797714,
        "nota_atribuida": 4.656279661063665,
        "percentual_error": 0.35570880222544665
    },
    {
        "answer_number": 3387,
        "answer_values": {
            "number_question": 79,
            "answer_question": "either traverse the entire list and pop the given part or create a pointer system that automatically points to it",
            "grade": 3.0
        },
        "frequence_similarity": 3.3132500607904447,
        "liv_distance": 1.3909774436090225,
        "bert_score": 4.887486398220062,
        "nota_atribuida": 4.493541811606118,
        "percentual_error": 0.3323751895995565
    },
    {
        "answer_number": 3388,
        "answer_values": {
            "number_question": 79,
            "answer_question": "if top item ! equals given element pop the stack Repeat until item is found or stack is empty",
            "grade": 3.5
        },
        "frequence_similarity": 3.565016084037823,
        "liv_distance": 1.5413533834586466,
        "bert_score": 4.905693829059601,
        "nota_atribuida": 4.720845524561133,
        "percentual_error": 0.25860738679320106
    },
    {
        "answer_number": 3389,
        "answer_values": {
            "number_question": 79,
            "answer_question": "could traverse through the list or array to find the element",
            "grade": 2.0
        },
        "frequence_similarity": 3.4302605094190635,
        "liv_distance": 1.3533834586466165,
        "bert_score": 4.897742718458176,
        "nota_atribuida": 4.6415598859829625,
        "percentual_error": 0.5691103747169575
    },
    {
        "answer_number": 3390,
        "answer_values": {
            "number_question": 79,
            "answer_question": "you need the pop opertation to go throught the stack and find the element",
            "grade": 3.5
        },
        "frequence_similarity": 3.9166666666666665,
        "liv_distance": 1.5789473684210527,
        "bert_score": 4.897005259990692,
        "nota_atribuida": 5.096182456163913,
        "percentual_error": 0.313211402828269
    },
    {
        "answer_number": 3391,
        "answer_values": {
            "number_question": 79,
            "answer_question": "createStack push isEmpty pop and a boolean return value",
            "grade": 3.0
        },
        "frequence_similarity": 2.8952847075210473,
        "liv_distance": 1.1278195488721805,
        "bert_score": 4.899372905492783,
        "nota_atribuida": 4.1329884933620695,
        "percentual_error": 0.2741329900099517
    },
    {
        "answer_number": 3392,
        "answer_values": {
            "number_question": 79,
            "answer_question": "you would have to traverse the stack popping each element to search it",
            "grade": 3.5
        },
        "frequence_similarity": 3.1735753140545633,
        "liv_distance": 1.5413533834586466,
        "bert_score": 4.892864376306534,
        "nota_atribuida": 4.280567172528249,
        "percentual_error": 0.18235134295701738
    },
    {
        "answer_number": 3393,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Pop each element off the stack - LRB - and into another stack for storage - RRB - until the desired element is found",
            "grade": 4.0
        },
        "frequence_similarity": 3.9617633655117155,
        "liv_distance": 1.6541353383458646,
        "bert_score": 4.923513829708099,
        "nota_atribuida": 5.124461360493249,
        "percentual_error": 0.21943015692580325
    },
    {
        "answer_number": 3394,
        "answer_values": {
            "number_question": 79,
            "answer_question": "pop operation",
            "grade": 2.5
        },
        "frequence_similarity": 2.7635231383473653,
        "liv_distance": 0.41353383458646614,
        "bert_score": 4.7817263007164,
        "nota_atribuida": 4.232098993291168,
        "percentual_error": 0.40927657789596505
    },
    {
        "answer_number": 3395,
        "answer_values": {
            "number_question": 79,
            "answer_question": "to pop elements then push them back",
            "grade": 4.5
        },
        "frequence_similarity": 3.486013297183269,
        "liv_distance": 1.2030075187969924,
        "bert_score": 4.861833453178406,
        "nota_atribuida": 4.752532809857502,
        "percentual_error": 0.05313646848133469
    },
    {
        "answer_number": 3396,
        "answer_values": {
            "number_question": 79,
            "answer_question": "A function to keep track of the elements popped and a function to put the popped elements backinto the function",
            "grade": 4.5
        },
        "frequence_similarity": 3.5559209893749006,
        "liv_distance": 1.5037593984962405,
        "bert_score": 4.927397072315216,
        "nota_atribuida": 4.731292147420518,
        "percentual_error": 0.04888561944893166
    },
    {
        "answer_number": 3397,
        "answer_values": {
            "number_question": 79,
            "answer_question": "you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost",
            "grade": 4.5
        },
        "frequence_similarity": 3.467301666813349,
        "liv_distance": 1.9172932330827068,
        "bert_score": 4.911965429782867,
        "nota_atribuida": 4.467033626584618,
        "percentual_error": 0.00732586075897379
    },
    {
        "answer_number": 3398,
        "answer_values": {
            "number_question": 79,
            "answer_question": "you would need to perform a search through the list of elements - LRB - i dont really understand what this question is asking its not very clear - RRB -",
            "grade": 1.5
        },
        "frequence_similarity": 3.021749194749951,
        "liv_distance": 0.7894736842105263,
        "bert_score": 4.855193495750427,
        "nota_atribuida": 4.393845975548288,
        "percentual_error": 0.658613431525027
    },
    {
        "answer_number": 3399,
        "answer_values": {
            "number_question": 79,
            "answer_question": "StackPush - LRB - - RRB - StackPop - LRB - - RRB - StackIsEmpty - LRB - - RRB -",
            "grade": 3.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.9774436090225563,
        "bert_score": 4.837006032466888,
        "nota_atribuida": 3.733453002745193,
        "percentual_error": 0.19645432852801092
    },
    {
        "answer_number": 3400,
        "answer_values": {
            "number_question": 79,
            "answer_question": "isEmptry - LRB - - RRB - or or determines if the stack is full or not pop - LRB - - RRB - or or to remove the top element if it is not the on you are looking for search - LRB - - RRB - or or you compare each element of the stack to the data you are looking for",
            "grade": 3.0
        },
        "frequence_similarity": 3.443299960147786,
        "liv_distance": 0,
        "bert_score": 4.7920627892017365,
        "nota_atribuida": 5.154567391279665,
        "percentual_error": 0.41799189490173205
    },
    {
        "answer_number": 3401,
        "answer_values": {
            "number_question": 79,
            "answer_question": "You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for",
            "grade": 3.0
        },
        "frequence_similarity": 3.3964214570007956,
        "liv_distance": 0.9022556390977443,
        "bert_score": 4.919880628585815,
        "nota_atribuida": 4.78566804856291,
        "percentual_error": 0.37312827184056974
    },
    {
        "answer_number": 3402,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Push adds a given node to the top of the stack leaving previous nodes below Pop removes and returns the current top node of the stack",
            "grade": 3.0
        },
        "frequence_similarity": 3.7777777777777777,
        "liv_distance": 1.7293233082706767,
        "bert_score": 4.912261962890625,
        "nota_atribuida": 4.886790519892886,
        "percentual_error": 0.3861001432765001
    },
    {
        "answer_number": 3403,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again",
            "grade": 5.0
        },
        "frequence_similarity": 3.900177463427367,
        "liv_distance": 0,
        "bert_score": 4.774993062019348,
        "nota_atribuida": 5.659669558891409,
        "percentual_error": 0.11655619679333751
    },
    {
        "answer_number": 3404,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Pop each item off the top until you find what you are looking for If the stack ends up empty and you never found the item then it does not exist in the stack It may also be necessary to save the popped values in case you want to recreate the stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.755133491826478,
        "liv_distance": 0,
        "bert_score": 4.941335916519165,
        "nota_atribuida": 5.543393970121293,
        "percentual_error": 0.09802550081234851
    },
    {
        "answer_number": 3405,
        "answer_values": {
            "number_question": 79,
            "answer_question": "if the stack is implemented using an array you could simply search the array for the item If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty you would then have to have the items put back into the list",
            "grade": 4.5
        },
        "frequence_similarity": 4.00208188857998,
        "liv_distance": 0,
        "bert_score": 4.840461164712906,
        "nota_atribuida": 5.791305308126574,
        "percentual_error": 0.22297310181774854
    },
    {
        "answer_number": 3406,
        "answer_values": {
            "number_question": 79,
            "answer_question": "You need to pop each item on the stack and compare the item Once the item is found no more items need to be removed",
            "grade": 3.5
        },
        "frequence_similarity": 3.664050492949297,
        "liv_distance": 1.5413533834586466,
        "bert_score": 4.932031631469727,
        "nota_atribuida": 4.838560879868348,
        "percentual_error": 0.2766444224020529
    },
    {
        "answer_number": 3407,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Pop an element from one stack check to see if it is the desired element if not push it onto another stack When finished pop the items from the second stack and push them back onto the first stack - LRB - this will ensure the order of the elements is maintained - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 4.1420195913661235,
        "liv_distance": 0,
        "bert_score": 4.891514182090759,
        "nota_atribuida": 5.961429674995993,
        "percentual_error": 0.16127501747248896
    },
    {
        "answer_number": 3408,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Basically pop the stack until you find the given element",
            "grade": 3.5
        },
        "frequence_similarity": 3.8985773194637896,
        "liv_distance": 1.4285714285714286,
        "bert_score": 4.926098436117172,
        "nota_atribuida": 5.142567966124675,
        "percentual_error": 0.3194061754642161
    },
    {
        "answer_number": 3409,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Iterate through the stack checking the number against the current element",
            "grade": 1.5
        },
        "frequence_similarity": 3.8558153613666013,
        "liv_distance": 1.5413533834586466,
        "bert_score": 4.929351806640625,
        "nota_atribuida": 5.051795481849701,
        "percentual_error": 0.7030758657215515
    },
    {
        "answer_number": 3410,
        "answer_values": {
            "number_question": 79,
            "answer_question": "pop and push",
            "grade": 3.0
        },
        "frequence_similarity": 3.145497224367903,
        "liv_distance": 0.41353383458646614,
        "bert_score": 4.774348586797714,
        "nota_atribuida": 4.656279661063665,
        "percentual_error": 0.35570880222544665
    },
    {
        "answer_number": 3411,
        "answer_values": {
            "number_question": 79,
            "answer_question": "pop all elements off stack until you find that element and then push the popped elements back on the stack",
            "grade": 5.0
        },
        "frequence_similarity": 4.473380543440816,
        "liv_distance": 2.518796992481203,
        "bert_score": 4.961869120597839,
        "nota_atribuida": 5.368869583238535,
        "percentual_error": 0.06870526048726078
    },
    {
        "answer_number": 3412,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Keep popping nodes and storing them in an alternate stack until the given element is found then pop the given element and push the previously popped nodes back onto the stack",
            "grade": 5.0
        },
        "frequence_similarity": 4.138120311557204,
        "liv_distance": 1.6917293233082706,
        "bert_score": 4.969427287578583,
        "nota_atribuida": 5.31916392827098,
        "percentual_error": 0.06000264939658018
    },
    {
        "answer_number": 3413,
        "answer_values": {
            "number_question": 79,
            "answer_question": "either traverse the entire list and pop the given part or create a pointer system that automatically points to it",
            "grade": 3.0
        },
        "frequence_similarity": 3.3132500607904447,
        "liv_distance": 1.3909774436090225,
        "bert_score": 4.887486398220062,
        "nota_atribuida": 4.493541811606118,
        "percentual_error": 0.3323751895995565
    },
    {
        "answer_number": 3414,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Depends on the type of stack on a true stack you will haft to pop all of the elements of the stack until you find the element you want and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed With a Java style stack where there is a peek function it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack",
            "grade": 5.0
        },
        "frequence_similarity": 4.067363289193635,
        "liv_distance": 0,
        "bert_score": 4.780212938785553,
        "nota_atribuida": 5.8476429849900855,
        "percentual_error": 0.1449546402141585
    },
    {
        "answer_number": 3415,
        "answer_values": {
            "number_question": 79,
            "answer_question": "if top item ! equals given element pop the stack Repeat until item is found or stack is empty",
            "grade": 3.5
        },
        "frequence_similarity": 3.565016084037823,
        "liv_distance": 1.5413533834586466,
        "bert_score": 4.905693829059601,
        "nota_atribuida": 4.720845524561133,
        "percentual_error": 0.25860738679320106
    },
    {
        "answer_number": 3416,
        "answer_values": {
            "number_question": 79,
            "answer_question": "could traverse through the list or array to find the element",
            "grade": 2.0
        },
        "frequence_similarity": 3.4302605094190635,
        "liv_distance": 1.3533834586466165,
        "bert_score": 4.897742718458176,
        "nota_atribuida": 4.6415598859829625,
        "percentual_error": 0.5691103747169575
    },
    {
        "answer_number": 3417,
        "answer_values": {
            "number_question": 79,
            "answer_question": "you need the pop opertation to go throught the stack and find the element",
            "grade": 3.5
        },
        "frequence_similarity": 3.9166666666666665,
        "liv_distance": 1.5789473684210527,
        "bert_score": 4.897005259990692,
        "nota_atribuida": 5.096182456163913,
        "percentual_error": 0.313211402828269
    },
    {
        "answer_number": 3418,
        "answer_values": {
            "number_question": 79,
            "answer_question": "createStack push isEmpty pop and a boolean return value",
            "grade": 3.0
        },
        "frequence_similarity": 2.8952847075210473,
        "liv_distance": 1.1278195488721805,
        "bert_score": 4.899372905492783,
        "nota_atribuida": 4.1329884933620695,
        "percentual_error": 0.2741329900099517
    },
    {
        "answer_number": 3419,
        "answer_values": {
            "number_question": 79,
            "answer_question": "you would have to traverse the stack popping each element to search it",
            "grade": 3.5
        },
        "frequence_similarity": 3.1735753140545633,
        "liv_distance": 1.5413533834586466,
        "bert_score": 4.892864376306534,
        "nota_atribuida": 4.280567172528249,
        "percentual_error": 0.18235134295701738
    },
    {
        "answer_number": 3420,
        "answer_values": {
            "number_question": 79,
            "answer_question": "Pop each element off the stack - LRB - and into another stack for storage - RRB - until the desired element is found",
            "grade": 4.0
        },
        "frequence_similarity": 3.9617633655117155,
        "liv_distance": 1.6541353383458646,
        "bert_score": 4.923513829708099,
        "nota_atribuida": 5.124461360493249,
        "percentual_error": 0.21943015692580325
    },
    {
        "answer_number": 3421,
        "answer_values": {
            "number_question": 79,
            "answer_question": "pop operation",
            "grade": 2.5
        },
        "frequence_similarity": 2.7635231383473653,
        "liv_distance": 0.41353383458646614,
        "bert_score": 4.7817263007164,
        "nota_atribuida": 4.232098993291168,
        "percentual_error": 0.40927657789596505
    },
    {
        "answer_number": 3422,
        "answer_values": {
            "number_question": 79,
            "answer_question": "to pop elements then push them back",
            "grade": 4.5
        },
        "frequence_similarity": 3.486013297183269,
        "liv_distance": 1.2030075187969924,
        "bert_score": 4.861833453178406,
        "nota_atribuida": 4.752532809857502,
        "percentual_error": 0.05313646848133469
    },
    {
        "answer_number": 3423,
        "answer_values": {
            "number_question": 79,
            "answer_question": "A function to keep track of the elements popped and a function to put the popped elements backinto the function",
            "grade": 4.5
        },
        "frequence_similarity": 3.5559209893749006,
        "liv_distance": 1.5037593984962405,
        "bert_score": 4.927397072315216,
        "nota_atribuida": 4.731292147420518,
        "percentual_error": 0.04888561944893166
    },
    {
        "answer_number": 3424,
        "answer_values": {
            "number_question": 79,
            "answer_question": "you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost",
            "grade": 4.5
        },
        "frequence_similarity": 3.467301666813349,
        "liv_distance": 1.9172932330827068,
        "bert_score": 4.911965429782867,
        "nota_atribuida": 4.467033626584618,
        "percentual_error": 0.00732586075897379
    },
    {
        "answer_number": 3425,
        "answer_values": {
            "number_question": 79,
            "answer_question": "you would need to perform a search through the list of elements - LRB - i dont really understand what this question is asking its not very clear - RRB -",
            "grade": 1.5
        },
        "frequence_similarity": 3.021749194749951,
        "liv_distance": 0.7894736842105263,
        "bert_score": 4.855193495750427,
        "nota_atribuida": 4.393845975548288,
        "percentual_error": 0.658613431525027
    },
    {
        "answer_number": 3426,
        "answer_values": {
            "number_question": 79,
            "answer_question": "StackPush - LRB - - RRB - StackPop - LRB - - RRB - StackIsEmpty - LRB - - RRB -",
            "grade": 3.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0.9774436090225563,
        "bert_score": 4.837006032466888,
        "nota_atribuida": 3.733453002745193,
        "percentual_error": 0.19645432852801092
    },
    {
        "answer_number": 3427,
        "answer_values": {
            "number_question": 80,
            "answer_question": "rear and front",
            "grade": 2.5
        },
        "frequence_similarity": 3.333333333333334,
        "liv_distance": 1.5789473684210527,
        "bert_score": 4.737447202205658,
        "nota_atribuida": 4.4016029850037555,
        "percentual_error": 0.4320251034640129
    },
    {
        "answer_number": 3428,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue which adds data to the queue and dequeue which deletes data from the queue",
            "grade": 5.0
        },
        "frequence_similarity": 3.4028938981432693,
        "liv_distance": 0,
        "bert_score": 4.868636876344681,
        "nota_atribuida": 5.130457048101911,
        "percentual_error": 0.025427958343433588
    },
    {
        "answer_number": 3429,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue which inserts a specified element at the head of the specified queue and dequeue which removes the specified element from the queue",
            "grade": 5.0
        },
        "frequence_similarity": 3.1384423980690612,
        "liv_distance": 0,
        "bert_score": 4.887850135564804,
        "nota_atribuida": 4.840648319574648,
        "percentual_error": 0.03187033608507028
    },
    {
        "answer_number": 3430,
        "answer_values": {
            "number_question": 80,
            "answer_question": "The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue",
            "grade": 5.0
        },
        "frequence_similarity": 3.0685735326841774,
        "liv_distance": 0,
        "bert_score": 4.848599433898926,
        "nota_atribuida": 4.751938544610164,
        "percentual_error": 0.04961229107796716
    },
    {
        "answer_number": 3431,
        "answer_values": {
            "number_question": 80,
            "answer_question": "The two main functions are enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 4.030931089239486,
        "liv_distance": 0,
        "bert_score": 4.870960712432861,
        "nota_atribuida": 5.831848896942408,
        "percentual_error": 0.14263896607104143
    },
    {
        "answer_number": 3432,
        "answer_values": {
            "number_question": 80,
            "answer_question": "Enqueue and Dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 4.473684210526316,
        "bert_score": 4.938810616731644,
        "nota_atribuida": 5.188341638549281,
        "percentual_error": 0.036300932295958765
    },
    {
        "answer_number": 3433,
        "answer_values": {
            "number_question": 80,
            "answer_question": "Enqueue and Dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 4.473684210526316,
        "bert_score": 4.938810616731644,
        "nota_atribuida": 5.188341638549281,
        "percentual_error": 0.036300932295958765
    },
    {
        "answer_number": 3434,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue insert into queue dequeue remove element",
            "grade": 5.0
        },
        "frequence_similarity": 3.591089451179962,
        "liv_distance": 0,
        "bert_score": 4.871289432048798,
        "nota_atribuida": 5.341169633797812,
        "percentual_error": 0.06387545372814252
    },
    {
        "answer_number": 3435,
        "answer_values": {
            "number_question": 80,
            "answer_question": "Remove the item added first add items to the back",
            "grade": 5.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.856585711240768,
        "nota_atribuida": 4.119719448706141,
        "percentual_error": 0.17605611025877188
    },
    {
        "answer_number": 3436,
        "answer_values": {
            "number_question": 80,
            "answer_question": "The two main functions of a queue are enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 3.8693063937629155,
        "liv_distance": 0,
        "bert_score": 4.854521751403809,
        "nota_atribuida": 5.64700751681458,
        "percentual_error": 0.11457528875037704
    },
    {
        "answer_number": 3437,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3438,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3439,
        "answer_values": {
            "number_question": 80,
            "answer_question": "Enqueue and Dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 4.473684210526316,
        "bert_score": 4.938810616731644,
        "nota_atribuida": 5.188341638549281,
        "percentual_error": 0.036300932295958765
    },
    {
        "answer_number": 3440,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3441,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3442,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enque - LRB - Data - RRB - Deque - LRB - - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.845969080924988,
        "nota_atribuida": 4.116811477777046,
        "percentual_error": 0.17663770444459082
    },
    {
        "answer_number": 3443,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3444,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3445,
        "answer_values": {
            "number_question": 80,
            "answer_question": "The two functions are Enqueue and Dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 4.1366341767699435,
        "liv_distance": 0,
        "bert_score": 4.86463725566864,
        "nota_atribuida": 5.948058920570338,
        "percentual_error": 0.15938963168162967
    },
    {
        "answer_number": 3446,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 4.541241452319315,
        "liv_distance": 3.9473684210526314,
        "bert_score": 4.924869984388351,
        "nota_atribuida": 4.8777485161120335,
        "percentual_error": 0.02445029677759325
    },
    {
        "answer_number": 3447,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue that adds an item to the queue dequeue that takes the first item out of the queue",
            "grade": 5.0
        },
        "frequence_similarity": 3.0270462766947297,
        "liv_distance": 0,
        "bert_score": 4.889517277479172,
        "nota_atribuida": 4.716810688497614,
        "percentual_error": 0.05663786230047718
    },
    {
        "answer_number": 3448,
        "answer_values": {
            "number_question": 80,
            "answer_question": "Enqueue and dequeue which add and remove elements from the queue",
            "grade": 5.0
        },
        "frequence_similarity": 4.101281538050872,
        "liv_distance": 0,
        "bert_score": 4.886620044708252,
        "nota_atribuida": 5.9146341714244555,
        "percentual_error": 0.15463917884276834
    },
    {
        "answer_number": 3449,
        "answer_values": {
            "number_question": 80,
            "answer_question": "Enqueue and Dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 4.473684210526316,
        "bert_score": 4.938810616731644,
        "nota_atribuida": 5.188341638549281,
        "percentual_error": 0.036300932295958765
    },
    {
        "answer_number": 3450,
        "answer_values": {
            "number_question": 80,
            "answer_question": "dequeue and enqueue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 3.9473684210526314,
        "bert_score": 4.994184970855713,
        "nota_atribuida": 5.408610917945208,
        "percentual_error": 0.0755482182290983
    },
    {
        "answer_number": 3451,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3452,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue and dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3453,
        "answer_values": {
            "number_question": 80,
            "answer_question": "enqueue dequeue",
            "grade": 5.0
        },
        "frequence_similarity": 4.541241452319315,
        "liv_distance": 3.9473684210526314,
        "bert_score": 4.924869984388351,
        "nota_atribuida": 4.8777485161120335,
        "percentual_error": 0.02445029677759325
    },
    {
        "answer_number": 3454,
        "answer_values": {
            "number_question": 80,
            "answer_question": "rear and front",
            "grade": 2.5
        },
        "frequence_similarity": 3.333333333333334,
        "liv_distance": 1.5789473684210527,
        "bert_score": 4.737447202205658,
        "nota_atribuida": 4.4016029850037555,
        "percentual_error": 0.4320251034640129
    },
    {
        "answer_number": 3455,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Make use of a front pointer and a tail pointer When the tail pointer reaches the end of an array it gets reset to the front of the array If the two pointers are equal then the queue is either full or just has one element",
            "grade": 4.5
        },
        "frequence_similarity": 4.324501122999404,
        "liv_distance": 0.39473684210526316,
        "bert_score": 4.882059991359711,
        "nota_atribuida": 6.008624123147409,
        "percentual_error": 0.2510764681278097
    },
    {
        "answer_number": 3456,
        "answer_values": {
            "number_question": 81,
            "answer_question": "you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure",
            "grade": 3.0
        },
        "frequence_similarity": 3.7742547525710126,
        "liv_distance": 1.644736842105263,
        "bert_score": 4.922474026679993,
        "nota_atribuida": 4.9186195306744525,
        "percentual_error": 0.3900727671065395
    },
    {
        "answer_number": 3457,
        "answer_values": {
            "number_question": 81,
            "answer_question": "By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array",
            "grade": 3.0
        },
        "frequence_similarity": 4.267766952966369,
        "liv_distance": 2.0065789473684212,
        "bert_score": 4.877868741750717,
        "nota_atribuida": 5.316048487171726,
        "percentual_error": 0.4356710614586443
    },
    {
        "answer_number": 3458,
        "answer_values": {
            "number_question": 81,
            "answer_question": "For applications in which a fixed - sized queue does not present a problem you can use an array to represent a queue",
            "grade": 2.5
        },
        "frequence_similarity": 2.863696483726654,
        "liv_distance": 1.480263157894737,
        "bert_score": 4.891610741615295,
        "nota_atribuida": 3.958271684342665,
        "percentual_error": 0.36841121596352344
    },
    {
        "answer_number": 3459,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Keep track of the front and the back of the array as you increase and decrease the elements inside the array",
            "grade": 4.0
        },
        "frequence_similarity": 4.48538460649912,
        "liv_distance": 1.8421052631578947,
        "bert_score": 4.907902181148529,
        "nota_atribuida": 5.63118399863911,
        "percentual_error": 0.28966980994286795
    },
    {
        "answer_number": 3460,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Declare the size of an array and have special conditional statements - LRB - pointers - RRB - to make sure you re - use ALL of the array Say you have an array of 20 elements you load up 18 then dequeue 3 when you enqueue 4 more elements you want to loop back to index 0 and continue from there this process saves resources",
            "grade": 4.5
        },
        "frequence_similarity": 3.4173255366707496,
        "liv_distance": 0,
        "bert_score": 4.8225292563438416,
        "nota_atribuida": 5.133930466885712,
        "percentual_error": 0.12347858448310067
    },
    {
        "answer_number": 3461,
        "answer_values": {
            "number_question": 81,
            "answer_question": "you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular",
            "grade": 4.0
        },
        "frequence_similarity": 3.9978191146106146,
        "liv_distance": 0.4276315789473684,
        "bert_score": 4.927372634410858,
        "nota_atribuida": 5.6437093843408945,
        "percentual_error": 0.29124628367675187
    },
    {
        "answer_number": 3462,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Utilizing indexes for the front and the back Front is 0 and as you add items the back index is incremented",
            "grade": 4.0
        },
        "frequence_similarity": 3.7862393885688164,
        "liv_distance": 1.5460526315789473,
        "bert_score": 4.903143048286438,
        "nota_atribuida": 4.965153527434211,
        "percentual_error": 0.19438543483124937
    },
    {
        "answer_number": 3463,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Declare two variables front and rear to be used to denote which elements in the array can be accessed Increment rear whenever data is enqueued to the end and increment front whenever data is dequeued",
            "grade": 4.5
        },
        "frequence_similarity": 3.5849075915068656,
        "liv_distance": 0.6907894736842105,
        "bert_score": 4.886189699172974,
        "nota_atribuida": 5.0691571132486155,
        "percentual_error": 0.11227845192666874
    },
    {
        "answer_number": 3464,
        "answer_values": {
            "number_question": 81,
            "answer_question": "It is an array of fixed size A queue of maximum N elements",
            "grade": 2.5
        },
        "frequence_similarity": 3.039291857441195,
        "liv_distance": 1.0855263157894737,
        "bert_score": 4.821995496749878,
        "nota_atribuida": 4.288956880639723,
        "percentual_error": 0.41710768618706406
    },
    {
        "answer_number": 3465,
        "answer_values": {
            "number_question": 81,
            "answer_question": "make an array of a size and add on to the front and delete from the back keep track of the two so that you know when it is full and where to add or subtract from",
            "grade": 4.0
        },
        "frequence_similarity": 3.8734258264944033,
        "liv_distance": 1.25,
        "bert_score": 4.921407848596573,
        "nota_atribuida": 5.182807614800023,
        "percentual_error": 0.22821754205623956
    },
    {
        "answer_number": 3466,
        "answer_values": {
            "number_question": 81,
            "answer_question": "By using the beginning of the array as the removal point of the queue - LRB - or beginning of the queue - RRB - and the ith element as the end of the queue",
            "grade": 3.5
        },
        "frequence_similarity": 4.4688651418434775,
        "liv_distance": 1.3157894736842106,
        "bert_score": 4.914522022008896,
        "nota_atribuida": 5.819666874971122,
        "percentual_error": 0.39859100611882226
    },
    {
        "answer_number": 3467,
        "answer_values": {
            "number_question": 81,
            "answer_question": "add in data from the first element to the last take out data from the first element to the last",
            "grade": 3.0
        },
        "frequence_similarity": 3.7562972690740146,
        "liv_distance": 1.611842105263158,
        "bert_score": 4.899938106536865,
        "nota_atribuida": 4.90522893135794,
        "percentual_error": 0.38840774977458714
    },
    {
        "answer_number": 3468,
        "answer_values": {
            "number_question": 81,
            "answer_question": "you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom",
            "grade": 3.5
        },
        "frequence_similarity": 3.68732601942758,
        "liv_distance": 1.611842105263158,
        "bert_score": 4.910634756088257,
        "nota_atribuida": 4.831201640306315,
        "percentual_error": 0.2755425542995783
    },
    {
        "answer_number": 3469,
        "answer_values": {
            "number_question": 81,
            "answer_question": "create a fixed array size with with 2 integers to point to the beginning and the end of the que and special cases to know when the que is empty or full",
            "grade": 4.0
        },
        "frequence_similarity": 4.0498314730572575,
        "liv_distance": 1.513157894736842,
        "bert_score": 4.90386426448822,
        "nota_atribuida": 5.272282392575961,
        "percentual_error": 0.24131529721691214
    },
    {
        "answer_number": 3470,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Keep track of the front and rear indexes Either : 1 - RRB - Dequeue items by shifting the array left 2 - RRB - Use wrapped configuration",
            "grade": 4.0
        },
        "frequence_similarity": 3.888888888888889,
        "liv_distance": 1.2828947368421053,
        "bert_score": 4.915834963321686,
        "nota_atribuida": 5.185715770345551,
        "percentual_error": 0.22865035857268756
    },
    {
        "answer_number": 3471,
        "answer_values": {
            "number_question": 81,
            "answer_question": "add items into a fixed size array pull the items out by calling on them with the starting index increase starting index so when it calls again its now the next index element in the array",
            "grade": 3.5
        },
        "frequence_similarity": 3.6572347642739897,
        "liv_distance": 0.7894736842105263,
        "bert_score": 4.901375770568848,
        "nota_atribuida": 5.1155617633276815,
        "percentual_error": 0.3158131673649769
    },
    {
        "answer_number": 3472,
        "answer_values": {
            "number_question": 81,
            "answer_question": "To use and array to implement a Queue element or item 0 should be the top element in the array Every time an element is inserted all the items in the array are pushed back one space The top element is always removed first",
            "grade": 3.0
        },
        "frequence_similarity": 3.891726898432457,
        "liv_distance": 0.06578947368421052,
        "bert_score": 4.868501573801041,
        "nota_atribuida": 5.650215452465243,
        "percentual_error": 0.46904679560651596
    },
    {
        "answer_number": 3473,
        "answer_values": {
            "number_question": 81,
            "answer_question": "fixed size array with max N elements Need to keep track of front and rear of array",
            "grade": 4.0
        },
        "frequence_similarity": 3.431694990624912,
        "liv_distance": 1.611842105263158,
        "bert_score": 4.876882880926132,
        "nota_atribuida": 4.536727144450744,
        "percentual_error": 0.11830712479750083
    },
    {
        "answer_number": 3474,
        "answer_values": {
            "number_question": 81,
            "answer_question": "A pointer based implementation of a queue could use a linear linked list with two external pointers one to the front and one to the back",
            "grade": 2.0
        },
        "frequence_similarity": 3.7379689211803457,
        "liv_distance": 1.513157894736842,
        "bert_score": 4.932996928691864,
        "nota_atribuida": 4.932290054900321,
        "percentual_error": 0.5945088432070285
    },
    {
        "answer_number": 3475,
        "answer_values": {
            "number_question": 81,
            "answer_question": "remove the element then shift the elements one space back",
            "grade": 3.0
        },
        "frequence_similarity": 3.6226255234242726,
        "liv_distance": 1.1842105263157894,
        "bert_score": 4.910627007484436,
        "nota_atribuida": 4.92565283826038,
        "percentual_error": 0.3909436782273258
    },
    {
        "answer_number": 3476,
        "answer_values": {
            "number_question": 81,
            "answer_question": "an array is a type of queue with a fixed length",
            "grade": 1.5
        },
        "frequence_similarity": 2.962962962962963,
        "liv_distance": 1.1513157894736843,
        "bert_score": 4.835078120231628,
        "nota_atribuida": 4.181735834132596,
        "percentual_error": 0.6412972843103706
    },
    {
        "answer_number": 3477,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Make use of a front pointer and a tail pointer When the tail pointer reaches the end of an array it gets reset to the front of the array If the two pointers are equal then the queue is either full or just has one element",
            "grade": 4.5
        },
        "frequence_similarity": 4.324501122999404,
        "liv_distance": 0.39473684210526316,
        "bert_score": 4.882059991359711,
        "nota_atribuida": 6.008624123147409,
        "percentual_error": 0.2510764681278097
    },
    {
        "answer_number": 3478,
        "answer_values": {
            "number_question": 81,
            "answer_question": "you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure",
            "grade": 3.0
        },
        "frequence_similarity": 3.7742547525710126,
        "liv_distance": 1.644736842105263,
        "bert_score": 4.922474026679993,
        "nota_atribuida": 4.9186195306744525,
        "percentual_error": 0.3900727671065395
    },
    {
        "answer_number": 3479,
        "answer_values": {
            "number_question": 81,
            "answer_question": "By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array",
            "grade": 3.0
        },
        "frequence_similarity": 4.267766952966369,
        "liv_distance": 2.0065789473684212,
        "bert_score": 4.877868741750717,
        "nota_atribuida": 5.316048487171726,
        "percentual_error": 0.4356710614586443
    },
    {
        "answer_number": 3480,
        "answer_values": {
            "number_question": 81,
            "answer_question": "For applications in which a fixed - sized queue does not present a problem you can use an array to represent a queue",
            "grade": 2.5
        },
        "frequence_similarity": 2.863696483726654,
        "liv_distance": 1.480263157894737,
        "bert_score": 4.891610741615295,
        "nota_atribuida": 3.958271684342665,
        "percentual_error": 0.36841121596352344
    },
    {
        "answer_number": 3481,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Keep track of the front and the back of the array as you increase and decrease the elements inside the array",
            "grade": 4.0
        },
        "frequence_similarity": 4.48538460649912,
        "liv_distance": 1.8421052631578947,
        "bert_score": 4.907902181148529,
        "nota_atribuida": 5.63118399863911,
        "percentual_error": 0.28966980994286795
    },
    {
        "answer_number": 3482,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Declare the size of an array and have special conditional statements - LRB - pointers - RRB - to make sure you re - use ALL of the array Say you have an array of 20 elements you load up 18 then dequeue 3 when you enqueue 4 more elements you want to loop back to index 0 and continue from there this process saves resources",
            "grade": 4.5
        },
        "frequence_similarity": 3.4173255366707496,
        "liv_distance": 0,
        "bert_score": 4.8225292563438416,
        "nota_atribuida": 5.133930466885712,
        "percentual_error": 0.12347858448310067
    },
    {
        "answer_number": 3483,
        "answer_values": {
            "number_question": 81,
            "answer_question": "you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular",
            "grade": 4.0
        },
        "frequence_similarity": 3.9978191146106146,
        "liv_distance": 0.4276315789473684,
        "bert_score": 4.927372634410858,
        "nota_atribuida": 5.6437093843408945,
        "percentual_error": 0.29124628367675187
    },
    {
        "answer_number": 3484,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Utilizing indexes for the front and the back Front is 0 and as you add items the back index is incremented",
            "grade": 4.0
        },
        "frequence_similarity": 3.7862393885688164,
        "liv_distance": 1.5460526315789473,
        "bert_score": 4.903143048286438,
        "nota_atribuida": 4.965153527434211,
        "percentual_error": 0.19438543483124937
    },
    {
        "answer_number": 3485,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Declare two variables front and rear to be used to denote which elements in the array can be accessed Increment rear whenever data is enqueued to the end and increment front whenever data is dequeued",
            "grade": 4.5
        },
        "frequence_similarity": 3.5849075915068656,
        "liv_distance": 0.6907894736842105,
        "bert_score": 4.886189699172974,
        "nota_atribuida": 5.0691571132486155,
        "percentual_error": 0.11227845192666874
    },
    {
        "answer_number": 3486,
        "answer_values": {
            "number_question": 81,
            "answer_question": "It is an array of fixed size A queue of maximum N elements",
            "grade": 2.5
        },
        "frequence_similarity": 3.039291857441195,
        "liv_distance": 1.0855263157894737,
        "bert_score": 4.821995496749878,
        "nota_atribuida": 4.288956880639723,
        "percentual_error": 0.41710768618706406
    },
    {
        "answer_number": 3487,
        "answer_values": {
            "number_question": 81,
            "answer_question": "make an array of a size and add on to the front and delete from the back keep track of the two so that you know when it is full and where to add or subtract from",
            "grade": 4.0
        },
        "frequence_similarity": 3.8734258264944033,
        "liv_distance": 1.25,
        "bert_score": 4.921407848596573,
        "nota_atribuida": 5.182807614800023,
        "percentual_error": 0.22821754205623956
    },
    {
        "answer_number": 3488,
        "answer_values": {
            "number_question": 81,
            "answer_question": "By using the beginning of the array as the removal point of the queue - LRB - or beginning of the queue - RRB - and the ith element as the end of the queue",
            "grade": 3.5
        },
        "frequence_similarity": 4.4688651418434775,
        "liv_distance": 1.3157894736842106,
        "bert_score": 4.914522022008896,
        "nota_atribuida": 5.819666874971122,
        "percentual_error": 0.39859100611882226
    },
    {
        "answer_number": 3489,
        "answer_values": {
            "number_question": 81,
            "answer_question": "add in data from the first element to the last take out data from the first element to the last",
            "grade": 3.0
        },
        "frequence_similarity": 3.7562972690740146,
        "liv_distance": 1.611842105263158,
        "bert_score": 4.899938106536865,
        "nota_atribuida": 4.90522893135794,
        "percentual_error": 0.38840774977458714
    },
    {
        "answer_number": 3490,
        "answer_values": {
            "number_question": 81,
            "answer_question": "you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom",
            "grade": 3.5
        },
        "frequence_similarity": 3.68732601942758,
        "liv_distance": 1.611842105263158,
        "bert_score": 4.910634756088257,
        "nota_atribuida": 4.831201640306315,
        "percentual_error": 0.2755425542995783
    },
    {
        "answer_number": 3491,
        "answer_values": {
            "number_question": 81,
            "answer_question": "create a fixed array size with with 2 integers to point to the beginning and the end of the que and special cases to know when the que is empty or full",
            "grade": 4.0
        },
        "frequence_similarity": 4.0498314730572575,
        "liv_distance": 1.513157894736842,
        "bert_score": 4.90386426448822,
        "nota_atribuida": 5.272282392575961,
        "percentual_error": 0.24131529721691214
    },
    {
        "answer_number": 3492,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Keep track of the front and rear indexes Either : 1 - RRB - Dequeue items by shifting the array left 2 - RRB - Use wrapped configuration",
            "grade": 4.0
        },
        "frequence_similarity": 3.888888888888889,
        "liv_distance": 1.2828947368421053,
        "bert_score": 4.915834963321686,
        "nota_atribuida": 5.185715770345551,
        "percentual_error": 0.22865035857268756
    },
    {
        "answer_number": 3493,
        "answer_values": {
            "number_question": 81,
            "answer_question": "add items into a fixed size array pull the items out by calling on them with the starting index increase starting index so when it calls again its now the next index element in the array",
            "grade": 3.5
        },
        "frequence_similarity": 3.6572347642739897,
        "liv_distance": 0.7894736842105263,
        "bert_score": 4.901375770568848,
        "nota_atribuida": 5.1155617633276815,
        "percentual_error": 0.3158131673649769
    },
    {
        "answer_number": 3494,
        "answer_values": {
            "number_question": 81,
            "answer_question": "To use and array to implement a Queue element or item 0 should be the top element in the array Every time an element is inserted all the items in the array are pushed back one space The top element is always removed first",
            "grade": 3.0
        },
        "frequence_similarity": 3.891726898432457,
        "liv_distance": 0.06578947368421052,
        "bert_score": 4.868501573801041,
        "nota_atribuida": 5.650215452465243,
        "percentual_error": 0.46904679560651596
    },
    {
        "answer_number": 3495,
        "answer_values": {
            "number_question": 81,
            "answer_question": "fixed size array with max N elements Need to keep track of front and rear of array",
            "grade": 4.0
        },
        "frequence_similarity": 3.431694990624912,
        "liv_distance": 1.611842105263158,
        "bert_score": 4.876882880926132,
        "nota_atribuida": 4.536727144450744,
        "percentual_error": 0.11830712479750083
    },
    {
        "answer_number": 3496,
        "answer_values": {
            "number_question": 81,
            "answer_question": "by keeping track of a front item and a rear item or with a circular array that uses the modulo function",
            "grade": 5.0
        },
        "frequence_similarity": 3.5559209893749006,
        "liv_distance": 1.381578947368421,
        "bert_score": 4.900670200586319,
        "nota_atribuida": 4.771584395214639,
        "percentual_error": 0.045683120957072276
    },
    {
        "answer_number": 3497,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Using an array for a queue the size of the array allocated limits the size of the queue An array based queue class must keep track of both the front and back of the queue which may need to wrap around the array",
            "grade": 5.0
        },
        "frequence_similarity": 4.395833743615958,
        "liv_distance": 0.9868421052631579,
        "bert_score": 4.8272863030433655,
        "nota_atribuida": 5.842473604758801,
        "percentual_error": 0.1441981019944345
    },
    {
        "answer_number": 3498,
        "answer_values": {
            "number_question": 81,
            "answer_question": "A pointer based implementation of a queue could use a linear linked list with two external pointers one to the front and one to the back",
            "grade": 2.0
        },
        "frequence_similarity": 3.7379689211803457,
        "liv_distance": 1.513157894736842,
        "bert_score": 4.932996928691864,
        "nota_atribuida": 4.932290054900321,
        "percentual_error": 0.5945088432070285
    },
    {
        "answer_number": 3499,
        "answer_values": {
            "number_question": 81,
            "answer_question": "remove the element then shift the elements one space back",
            "grade": 3.0
        },
        "frequence_similarity": 3.6226255234242726,
        "liv_distance": 1.1842105263157894,
        "bert_score": 4.910627007484436,
        "nota_atribuida": 4.92565283826038,
        "percentual_error": 0.3909436782273258
    },
    {
        "answer_number": 3500,
        "answer_values": {
            "number_question": 81,
            "answer_question": "By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered A method must be created so that the tail pointer does not leave the array",
            "grade": 5.0
        },
        "frequence_similarity": 4.006461512629556,
        "liv_distance": 0.4276315789473684,
        "bert_score": 4.8953984677791595,
        "nota_atribuida": 5.64459450141187,
        "percentual_error": 0.11419677733283395
    },
    {
        "answer_number": 3501,
        "answer_values": {
            "number_question": 81,
            "answer_question": "an array is a type of queue with a fixed length",
            "grade": 1.5
        },
        "frequence_similarity": 2.962962962962963,
        "liv_distance": 1.1513157894736843,
        "bert_score": 4.835078120231628,
        "nota_atribuida": 4.181735834132596,
        "percentual_error": 0.6412972843103706
    },
    {
        "answer_number": 3502,
        "answer_values": {
            "number_question": 81,
            "answer_question": "your storage class has an array and you keep track of the index of the first and last item in the array and wrap around when end of the array is full",
            "grade": 5.0
        },
        "frequence_similarity": 4.2638906527804235,
        "liv_distance": 1.5789473684210527,
        "bert_score": 4.892550706863403,
        "nota_atribuida": 5.482390110969001,
        "percentual_error": 0.087989015959271
    },
    {
        "answer_number": 3503,
        "answer_values": {
            "number_question": 81,
            "answer_question": "Boolean isFullQ - LRB - queue - RRB - : : equals rear equals equals MAX QUEUE SIZE - 1",
            "grade": 5.0
        },
        "frequence_similarity": 2.7484519974999766,
        "liv_distance": 1.0526315789473684,
        "bert_score": 4.871494770050049,
        "nota_atribuida": 3.990818801255491,
        "percentual_error": 0.20183623974890186
    },
    {
        "answer_number": 3504,
        "answer_values": {
            "number_question": 82,
            "answer_question": "theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array the downside to this method is after you use element one it is still in memory or im crazy who knows",
            "grade": 2.0
        },
        "frequence_similarity": 3.857444133011014,
        "liv_distance": 0,
        "bert_score": 4.7739772498607635,
        "nota_atribuida": 5.611710053339627,
        "percentual_error": 0.6436023990922759
    },
    {
        "answer_number": 3505,
        "answer_values": {
            "number_question": 82,
            "answer_question": "You can use list to represent the items in a queue",
            "grade": 1.5
        },
        "frequence_similarity": 3.5092167846991638,
        "liv_distance": 0.78125,
        "bert_score": 4.886604845523834,
        "nota_atribuida": 4.9495641746072785,
        "percentual_error": 0.6969430141555812
    },
    {
        "answer_number": 3506,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Have a pointer to the last element in the list and then use enqueue to insert items there Link the first and last elements together to dequeue the list",
            "grade": 3.5
        },
        "frequence_similarity": 3.9886473612212416,
        "liv_distance": 1.77734375,
        "bert_score": 4.929640591144562,
        "nota_atribuida": 5.108122801503661,
        "percentual_error": 0.3148167857339458
    },
    {
        "answer_number": 3507,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Utilizing a front pointer and a back pointer The front poiner and back pointer points to the first item into the queue As you add items the front remains the same but the back poiner next points to the new item and the new item is assigned to become the new back pointer",
            "grade": 4.5
        },
        "frequence_similarity": 4.031125681527531,
        "liv_distance": 1.328125,
        "bert_score": 4.943287670612335,
        "nota_atribuida": 5.334315196635113,
        "percentual_error": 0.15640530525106555
    },
    {
        "answer_number": 3508,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head",
            "grade": 4.5
        },
        "frequence_similarity": 3.604451480718528,
        "liv_distance": 1.3671875,
        "bert_score": 4.921026825904846,
        "nota_atribuida": 4.836918134500454,
        "percentual_error": 0.06965553791314072
    },
    {
        "answer_number": 3509,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Check if list is empty and add elements to the list",
            "grade": 2.5
        },
        "frequence_similarity": 3.586310236566852,
        "liv_distance": 0.8203125,
        "bert_score": 4.910880625247955,
        "nota_atribuida": 5.027010903711753,
        "percentual_error": 0.5026865769966611
    },
    {
        "answer_number": 3510,
        "answer_values": {
            "number_question": 82,
            "answer_question": "make a linked list and add on to the front and delete from the back keep track of both to do so",
            "grade": 4.5
        },
        "frequence_similarity": 3.923803571617217,
        "liv_distance": 1.30859375,
        "bert_score": 4.908990561962128,
        "nota_atribuida": 5.212783628089315,
        "percentual_error": 0.13673762023200975
    },
    {
        "answer_number": 3511,
        "answer_values": {
            "number_question": 82,
            "answer_question": "by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue",
            "grade": 4.5
        },
        "frequence_similarity": 4.656274638660052,
        "liv_distance": 1.66015625,
        "bert_score": 4.939620494842529,
        "nota_atribuida": 5.901452988795891,
        "percentual_error": 0.23747592185460042
    },
    {
        "answer_number": 3512,
        "answer_values": {
            "number_question": 82,
            "answer_question": "throw in data at the head and take it out at the tail",
            "grade": 4.5
        },
        "frequence_similarity": 3.731417631852185,
        "liv_distance": 0.91796875,
        "bert_score": 4.893329292535782,
        "nota_atribuida": 5.146056314162069,
        "percentual_error": 0.12554396507168164
    },
    {
        "answer_number": 3513,
        "answer_values": {
            "number_question": 82,
            "answer_question": "You create a list of nodes that had a head and a top pointer and the functions are basically the same substituting pop and push with enqueue and dequeue",
            "grade": 3.0
        },
        "frequence_similarity": 3.532153529805963,
        "liv_distance": 1.4453125,
        "bert_score": 4.909651279449463,
        "nota_atribuida": 4.722688417725061,
        "percentual_error": 0.36476859478163237
    },
    {
        "answer_number": 3514,
        "answer_values": {
            "number_question": 82,
            "answer_question": "fairly easy singly linked list with a pointer to the head and tail of hte list deque first item in que create temp pointer to next element delete head and then make head the temporary pointer enque new item use pointer to end of list add a new item to the next item of the tail and make the tail the next item of the current tail",
            "grade": 4.5
        },
        "frequence_similarity": 4.078139765621367,
        "liv_distance": 1.015625,
        "bert_score": 4.874620735645294,
        "nota_atribuida": 5.489743728496637,
        "percentual_error": 0.18028960502454594
    },
    {
        "answer_number": 3515,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Use a linked list with 2 pointers one to the front and one to the back As long as back ! equals front the queue is not empty",
            "grade": 4.5
        },
        "frequence_similarity": 3.8366628175747985,
        "liv_distance": 1.54296875,
        "bert_score": 4.906763881444931,
        "nota_atribuida": 5.023608842638069,
        "percentual_error": 0.10422962038642802
    },
    {
        "answer_number": 3516,
        "answer_values": {
            "number_question": 82,
            "answer_question": "create a node with the input data continue to add to the list when dequeueing get the first elements data and set the next element in the list as the new first element",
            "grade": 4.0
        },
        "frequence_similarity": 4.158315920138232,
        "liv_distance": 1.71875,
        "bert_score": 4.923297017812729,
        "nota_atribuida": 5.318532719932165,
        "percentual_error": 0.24791287171943577
    },
    {
        "answer_number": 3517,
        "answer_values": {
            "number_question": 82,
            "answer_question": "A linked list with Stack principles The Queue top element is the element that is always being removed first Must use nodes to contain each element with a pointer to the top element which also could be called the head pointer",
            "grade": 3.0
        },
        "frequence_similarity": 3.7394334537179823,
        "liv_distance": 1.5234375,
        "bert_score": 4.902015328407288,
        "nota_atribuida": 4.921432183097495,
        "percentual_error": 0.3904213472038879
    },
    {
        "answer_number": 3518,
        "answer_values": {
            "number_question": 82,
            "answer_question": "linked list checking for front and rear Keep enqueueing elements until front equal to rear 1",
            "grade": 3.5
        },
        "frequence_similarity": 2.9992019148942948,
        "liv_distance": 1.19140625,
        "bert_score": 4.844682514667511,
        "nota_atribuida": 4.209178482479532,
        "percentual_error": 0.16848382301473974
    },
    {
        "answer_number": 3519,
        "answer_values": {
            "number_question": 82,
            "answer_question": "a queue can be implemented in a list by keeping track of two pointers a head and a tail",
            "grade": 4.5
        },
        "frequence_similarity": 3.061833218719368,
        "liv_distance": 1.25,
        "bert_score": 4.928073137998581,
        "nota_atribuida": 4.279069320827588,
        "percentual_error": 0.049095706482758183
    },
    {
        "answer_number": 3520,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Implement the operation dequeue - LRB - - RRB - as the list operation remove - LRB - 1 - RRB - and the operation getFront - LRB - queueFront - RRB - as the list operation retrieve - LRB - 1 queueFront - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.6854591075010545,
        "liv_distance": 1.6796875,
        "bert_score": 4.929281920194626,
        "nota_atribuida": 4.80778724687881,
        "percentual_error": 0.16801642947142081
    },
    {
        "answer_number": 3521,
        "answer_values": {
            "number_question": 82,
            "answer_question": "remove the first element and reference the second element as the new head of the list",
            "grade": 3.5
        },
        "frequence_similarity": 4.3009848907972295,
        "liv_distance": 1.2890625,
        "bert_score": 4.921122789382935,
        "nota_atribuida": 5.644571705754883,
        "percentual_error": 0.3799352400056146
    },
    {
        "answer_number": 3522,
        "answer_values": {
            "number_question": 82,
            "answer_question": "you would have your list and add a back pointer so that your program knows where the end is",
            "grade": 4.0
        },
        "frequence_similarity": 3.278498944161523,
        "liv_distance": 1.1328125,
        "bert_score": 4.88286554813385,
        "nota_atribuida": 4.55410650903343,
        "percentual_error": 0.12167183791909908
    },
    {
        "answer_number": 3523,
        "answer_values": {
            "number_question": 82,
            "answer_question": "your queue storage class has a list and for enqueue you add the item to the end of the list and for dequeue you return the first item in the list",
            "grade": 4.5
        },
        "frequence_similarity": 4.25890964871903,
        "liv_distance": 1.85546875,
        "bert_score": 4.944474548101425,
        "nota_atribuida": 5.383296097710492,
        "percentual_error": 0.16408090539291653
    },
    {
        "answer_number": 3524,
        "answer_values": {
            "number_question": 82,
            "answer_question": "temp implies next equals NULL; if - LRB - front - RRB - - LRB - rear - RRB - implies next equals temp; else front equals temp; rear equals temp;",
            "grade": 3.5
        },
        "frequence_similarity": 2.575543268183223,
        "liv_distance": 1.23046875,
        "bert_score": 4.803557842969894,
        "nota_atribuida": 3.709979197437851,
        "percentual_error": 0.05659848378202903
    },
    {
        "answer_number": 3525,
        "answer_values": {
            "number_question": 82,
            "answer_question": "A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front",
            "grade": 5.0
        },
        "frequence_similarity": 4.134029899273688,
        "liv_distance": 1.484375,
        "bert_score": 4.9000583589077,
        "nota_atribuida": 5.376403890936898,
        "percentual_error": 0.07001034493919056
    },
    {
        "answer_number": 3526,
        "answer_values": {
            "number_question": 82,
            "answer_question": "theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array the downside to this method is after you use element one it is still in memory or im crazy who knows",
            "grade": 2.0
        },
        "frequence_similarity": 3.857444133011014,
        "liv_distance": 0,
        "bert_score": 4.7739772498607635,
        "nota_atribuida": 5.611710053339627,
        "percentual_error": 0.6436023990922759
    },
    {
        "answer_number": 3527,
        "answer_values": {
            "number_question": 82,
            "answer_question": "By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list Also items can only be removed from the front of the list and can only be added to the back of the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.366439721393979,
        "liv_distance": 1.2109375,
        "bert_score": 4.953722059726715,
        "nota_atribuida": 5.756979291874936,
        "percentual_error": 0.13148897251433445
    },
    {
        "answer_number": 3528,
        "answer_values": {
            "number_question": 82,
            "answer_question": "You can use list to represent the items in a queue",
            "grade": 1.5
        },
        "frequence_similarity": 3.5092167846991638,
        "liv_distance": 0.78125,
        "bert_score": 4.886604845523834,
        "nota_atribuida": 4.9495641746072785,
        "percentual_error": 0.6969430141555812
    },
    {
        "answer_number": 3529,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Have a pointer to the last element in the list and then use enqueue to insert items there Link the first and last elements together to dequeue the list",
            "grade": 3.5
        },
        "frequence_similarity": 3.9886473612212416,
        "liv_distance": 1.77734375,
        "bert_score": 4.929640591144562,
        "nota_atribuida": 5.108122801503661,
        "percentual_error": 0.3148167857339458
    },
    {
        "answer_number": 3530,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Enqueue to the end of the linked list dequeue items from the beginning - LRB - head - RRB - of the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.584235014108437,
        "liv_distance": 1.6015625,
        "bert_score": 4.927774965763092,
        "nota_atribuida": 5.840661187184681,
        "percentual_error": 0.14393253781424997
    },
    {
        "answer_number": 3531,
        "answer_values": {
            "number_question": 82,
            "answer_question": "you use the first element in the list as the remove point for the queue and insert items at the end of the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.5160491225300206,
        "liv_distance": 1.6796875,
        "bert_score": 4.948437213897705,
        "nota_atribuida": 5.7397950310778825,
        "percentual_error": 0.12888875422768464
    },
    {
        "answer_number": 3532,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Utilizing a front pointer and a back pointer The front poiner and back pointer points to the first item into the queue As you add items the front remains the same but the back poiner next points to the new item and the new item is assigned to become the new back pointer",
            "grade": 4.5
        },
        "frequence_similarity": 4.031125681527531,
        "liv_distance": 1.328125,
        "bert_score": 4.943287670612335,
        "nota_atribuida": 5.334315196635113,
        "percentual_error": 0.15640530525106555
    },
    {
        "answer_number": 3533,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head",
            "grade": 4.5
        },
        "frequence_similarity": 3.604451480718528,
        "liv_distance": 1.3671875,
        "bert_score": 4.921026825904846,
        "nota_atribuida": 4.836918134500454,
        "percentual_error": 0.06965553791314072
    },
    {
        "answer_number": 3534,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Check if list is empty and add elements to the list",
            "grade": 2.5
        },
        "frequence_similarity": 3.586310236566852,
        "liv_distance": 0.8203125,
        "bert_score": 4.910880625247955,
        "nota_atribuida": 5.027010903711753,
        "percentual_error": 0.5026865769966611
    },
    {
        "answer_number": 3535,
        "answer_values": {
            "number_question": 82,
            "answer_question": "make a linked list and add on to the front and delete from the back keep track of both to do so",
            "grade": 4.5
        },
        "frequence_similarity": 3.923803571617217,
        "liv_distance": 1.30859375,
        "bert_score": 4.908990561962128,
        "nota_atribuida": 5.212783628089315,
        "percentual_error": 0.13673762023200975
    },
    {
        "answer_number": 3536,
        "answer_values": {
            "number_question": 82,
            "answer_question": "by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue",
            "grade": 4.5
        },
        "frequence_similarity": 4.656274638660052,
        "liv_distance": 1.66015625,
        "bert_score": 4.939620494842529,
        "nota_atribuida": 5.901452988795891,
        "percentual_error": 0.23747592185460042
    },
    {
        "answer_number": 3537,
        "answer_values": {
            "number_question": 82,
            "answer_question": "throw in data at the head and take it out at the tail",
            "grade": 4.5
        },
        "frequence_similarity": 3.731417631852185,
        "liv_distance": 0.91796875,
        "bert_score": 4.893329292535782,
        "nota_atribuida": 5.146056314162069,
        "percentual_error": 0.12554396507168164
    },
    {
        "answer_number": 3538,
        "answer_values": {
            "number_question": 82,
            "answer_question": "You create a list of nodes that had a head and a top pointer and the functions are basically the same substituting pop and push with enqueue and dequeue",
            "grade": 3.0
        },
        "frequence_similarity": 3.532153529805963,
        "liv_distance": 1.4453125,
        "bert_score": 4.909651279449463,
        "nota_atribuida": 4.722688417725061,
        "percentual_error": 0.36476859478163237
    },
    {
        "answer_number": 3539,
        "answer_values": {
            "number_question": 82,
            "answer_question": "fairly easy singly linked list with a pointer to the head and tail of hte list deque first item in que create temp pointer to next element delete head and then make head the temporary pointer enque new item use pointer to end of list add a new item to the next item of the tail and make the tail the next item of the current tail",
            "grade": 4.5
        },
        "frequence_similarity": 4.078139765621367,
        "liv_distance": 1.015625,
        "bert_score": 4.874620735645294,
        "nota_atribuida": 5.489743728496637,
        "percentual_error": 0.18028960502454594
    },
    {
        "answer_number": 3540,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Use a linked list with 2 pointers one to the front and one to the back As long as back ! equals front the queue is not empty",
            "grade": 4.5
        },
        "frequence_similarity": 3.8366628175747985,
        "liv_distance": 1.54296875,
        "bert_score": 4.906763881444931,
        "nota_atribuida": 5.023608842638069,
        "percentual_error": 0.10422962038642802
    },
    {
        "answer_number": 3541,
        "answer_values": {
            "number_question": 82,
            "answer_question": "create a node with the input data continue to add to the list when dequeueing get the first elements data and set the next element in the list as the new first element",
            "grade": 4.0
        },
        "frequence_similarity": 4.158315920138232,
        "liv_distance": 1.71875,
        "bert_score": 4.923297017812729,
        "nota_atribuida": 5.318532719932165,
        "percentual_error": 0.24791287171943577
    },
    {
        "answer_number": 3542,
        "answer_values": {
            "number_question": 82,
            "answer_question": "A linked list with Stack principles The Queue top element is the element that is always being removed first Must use nodes to contain each element with a pointer to the top element which also could be called the head pointer",
            "grade": 3.0
        },
        "frequence_similarity": 3.7394334537179823,
        "liv_distance": 1.5234375,
        "bert_score": 4.902015328407288,
        "nota_atribuida": 4.921432183097495,
        "percentual_error": 0.3904213472038879
    },
    {
        "answer_number": 3543,
        "answer_values": {
            "number_question": 82,
            "answer_question": "linked list checking for front and rear Keep enqueueing elements until front equal to rear 1",
            "grade": 3.5
        },
        "frequence_similarity": 2.9992019148942948,
        "liv_distance": 1.19140625,
        "bert_score": 4.844682514667511,
        "nota_atribuida": 4.209178482479532,
        "percentual_error": 0.16848382301473974
    },
    {
        "answer_number": 3544,
        "answer_values": {
            "number_question": 82,
            "answer_question": "a queue can be implemented in a list by keeping track of two pointers a head and a tail",
            "grade": 4.5
        },
        "frequence_similarity": 3.061833218719368,
        "liv_distance": 1.25,
        "bert_score": 4.928073137998581,
        "nota_atribuida": 4.279069320827588,
        "percentual_error": 0.049095706482758183
    },
    {
        "answer_number": 3545,
        "answer_values": {
            "number_question": 82,
            "answer_question": "each element of a queue can be allocated in the nodes of an linked list New elements should be added to the head of the list with each dequeued element coming off the tail",
            "grade": 5.0
        },
        "frequence_similarity": 4.199723534122512,
        "liv_distance": 2.05078125,
        "bert_score": 4.9415163695812225,
        "nota_atribuida": 5.240334757995752,
        "percentual_error": 0.04586248190137987
    },
    {
        "answer_number": 3546,
        "answer_values": {
            "number_question": 82,
            "answer_question": "Implement the operation dequeue - LRB - - RRB - as the list operation remove - LRB - 1 - RRB - and the operation getFront - LRB - queueFront - RRB - as the list operation retrieve - LRB - 1 queueFront - RRB -",
            "grade": 4.0
        },
        "frequence_similarity": 3.6854591075010545,
        "liv_distance": 1.6796875,
        "bert_score": 4.929281920194626,
        "nota_atribuida": 4.80778724687881,
        "percentual_error": 0.16801642947142081
    },
    {
        "answer_number": 3547,
        "answer_values": {
            "number_question": 82,
            "answer_question": "remove the first element and reference the second element as the new head of the list",
            "grade": 3.5
        },
        "frequence_similarity": 4.3009848907972295,
        "liv_distance": 1.2890625,
        "bert_score": 4.921122789382935,
        "nota_atribuida": 5.644571705754883,
        "percentual_error": 0.3799352400056146
    },
    {
        "answer_number": 3548,
        "answer_values": {
            "number_question": 82,
            "answer_question": "By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list",
            "grade": 5.0
        },
        "frequence_similarity": 4.489458925207975,
        "liv_distance": 1.7578125,
        "bert_score": 4.889551997184753,
        "nota_atribuida": 5.663552164186482,
        "percentual_error": 0.11716183500214927
    },
    {
        "answer_number": 3549,
        "answer_values": {
            "number_question": 82,
            "answer_question": "you would have your list and add a back pointer so that your program knows where the end is",
            "grade": 4.0
        },
        "frequence_similarity": 3.278498944161523,
        "liv_distance": 1.1328125,
        "bert_score": 4.88286554813385,
        "nota_atribuida": 4.55410650903343,
        "percentual_error": 0.12167183791909908
    },
    {
        "answer_number": 3550,
        "answer_values": {
            "number_question": 82,
            "answer_question": "your queue storage class has a list and for enqueue you add the item to the end of the list and for dequeue you return the first item in the list",
            "grade": 4.5
        },
        "frequence_similarity": 4.25890964871903,
        "liv_distance": 1.85546875,
        "bert_score": 4.944474548101425,
        "nota_atribuida": 5.383296097710492,
        "percentual_error": 0.16408090539291653
    },
    {
        "answer_number": 3551,
        "answer_values": {
            "number_question": 82,
            "answer_question": "temp implies next equals NULL; if - LRB - front - RRB - - LRB - rear - RRB - implies next equals temp; else front equals temp; rear equals temp;",
            "grade": 3.5
        },
        "frequence_similarity": 2.575543268183223,
        "liv_distance": 1.23046875,
        "bert_score": 4.803557842969894,
        "nota_atribuida": 3.709979197437851,
        "percentual_error": 0.05659848378202903
    },
    {
        "answer_number": 3552,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List based Because it is on the run time order of N also it does not have a limited size like an array does",
            "grade": 4.5
        },
        "frequence_similarity": 2.943484296991812,
        "liv_distance": 0.0684931506849315,
        "bert_score": 4.924369752407074,
        "nota_atribuida": 4.60642837666577,
        "percentual_error": 0.02310431596090612
    },
    {
        "answer_number": 3553,
        "answer_values": {
            "number_question": 83,
            "answer_question": "A list - based implementation would be preferred The array is slightly more complicated where you would need to keep track of both front and rear",
            "grade": 3.5
        },
        "frequence_similarity": 2.647828098997271,
        "liv_distance": 0,
        "bert_score": 4.9017734825611115,
        "nota_atribuida": 4.297041279250875,
        "percentual_error": 0.1854860652839312
    },
    {
        "answer_number": 3554,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List - based Array - based queues have a way to complicate things to an extent",
            "grade": 3.5
        },
        "frequence_similarity": 2.8656362120635652,
        "liv_distance": 1.4383561643835616,
        "bert_score": 4.887194931507111,
        "nota_atribuida": 3.975557368262595,
        "percentual_error": 0.1196203008058776
    },
    {
        "answer_number": 3555,
        "answer_values": {
            "number_question": 83,
            "answer_question": "array - based is preferred because all you have to keep track of is the array itself and the count",
            "grade": 1.5
        },
        "frequence_similarity": 2.8015113445777633,
        "liv_distance": 0.410958904109589,
        "bert_score": 4.90122064948082,
        "nota_atribuida": 4.308219505720102,
        "percentual_error": 0.6518283253654038
    },
    {
        "answer_number": 3556,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List - based because when you enqueue - LRB - or dequeue depending upon your implementation - RRB - you would need to shift all elements to another space with an array causing a horrid time complexity for large data sets where as you can just modify the pointers in a list for a constant time complexity",
            "grade": 4.5
        },
        "frequence_similarity": 2.873978796003383,
        "liv_distance": 0,
        "bert_score": 4.874352812767029,
        "nota_atribuida": 4.541866425586772,
        "percentual_error": 0.0092178901059079
    },
    {
        "answer_number": 3557,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based its much simpler and the run time is better",
            "grade": 4.0
        },
        "frequence_similarity": 2.727272727272727,
        "liv_distance": 1.5068493150684932,
        "bert_score": 4.868482351303101,
        "nota_atribuida": 3.7893564328873173,
        "percentual_error": 0.05266089177817068
    },
    {
        "answer_number": 3558,
        "answer_values": {
            "number_question": 83,
            "answer_question": "I think array based is batter because of fixed size but on other had list base is more flaxible You do not have to worry about the size",
            "grade": 4.0
        },
        "frequence_similarity": 3.0415303610738826,
        "liv_distance": 0,
        "bert_score": 4.895294159650803,
        "nota_atribuida": 4.73455416165287,
        "percentual_error": 0.1551474830729218
    },
    {
        "answer_number": 3559,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based because you dont need to shift the elements like you do in array based queues",
            "grade": 4.0
        },
        "frequence_similarity": 2.9934637712198264,
        "liv_distance": 1.0273972602739727,
        "bert_score": 4.885925054550171,
        "nota_atribuida": 4.277985805557426,
        "percentual_error": 0.06498053481063493
    },
    {
        "answer_number": 3560,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List based Because it is on the run time order of N also it does not have a limited size like an array does",
            "grade": 4.5
        },
        "frequence_similarity": 2.943484296991812,
        "liv_distance": 0.0684931506849315,
        "bert_score": 4.924369752407074,
        "nota_atribuida": 4.60642837666577,
        "percentual_error": 0.02310431596090612
    },
    {
        "answer_number": 3561,
        "answer_values": {
            "number_question": 83,
            "answer_question": "linked list based because it does not store the items linearly in memory but instead as individual blocks",
            "grade": 5.0
        },
        "frequence_similarity": 2.8553345272593504,
        "liv_distance": 0.273972602739726,
        "bert_score": 4.92083340883255,
        "nota_atribuida": 4.427029426731122,
        "percentual_error": 0.11459411465377567
    },
    {
        "answer_number": 3562,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List based is preferred because there are no size restrictions",
            "grade": 5.0
        },
        "frequence_similarity": 3.6918282365569906,
        "liv_distance": 1.9863013698630136,
        "bert_score": 4.880034029483795,
        "nota_atribuida": 4.681919049418706,
        "percentual_error": 0.06361619011625874
    },
    {
        "answer_number": 3563,
        "answer_values": {
            "number_question": 83,
            "answer_question": "A list - based implementation would be preferred The array is slightly more complicated where you would need to keep track of both front and rear",
            "grade": 3.5
        },
        "frequence_similarity": 2.647828098997271,
        "liv_distance": 0,
        "bert_score": 4.9017734825611115,
        "nota_atribuida": 4.297041279250875,
        "percentual_error": 0.1854860652839312
    },
    {
        "answer_number": 3564,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List - based Array - based queues have a way to complicate things to an extent",
            "grade": 3.5
        },
        "frequence_similarity": 2.8656362120635652,
        "liv_distance": 1.4383561643835616,
        "bert_score": 4.887194931507111,
        "nota_atribuida": 3.975557368262595,
        "percentual_error": 0.1196203008058776
    },
    {
        "answer_number": 3565,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List - based Less code and no size limitation or declaration which means it is also more efficient and versatile",
            "grade": 5.0
        },
        "frequence_similarity": 2.9934637712198264,
        "liv_distance": 0,
        "bert_score": 4.905385971069336,
        "nota_atribuida": 4.683686335440989,
        "percentual_error": 0.06326273291180229
    },
    {
        "answer_number": 3566,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based is prefered because it does not have a set size and insertion and deletion can be done very quickly of you keep pointers to first element and last",
            "grade": 5.0
        },
        "frequence_similarity": 2.882235393578219,
        "liv_distance": 0,
        "bert_score": 4.897629767656326,
        "nota_atribuida": 4.557454748892068,
        "percentual_error": 0.0885090502215864
    },
    {
        "answer_number": 3567,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List based is preferred because there are space issues with array based due to rightward drift The fix for rightward drift requires constant shifting of the queue data",
            "grade": 5.0
        },
        "frequence_similarity": 3.002518907629606,
        "liv_distance": 0,
        "bert_score": 4.918684363365173,
        "nota_atribuida": 4.697432457869783,
        "percentual_error": 0.060513508426043416
    },
    {
        "answer_number": 3568,
        "answer_values": {
            "number_question": 83,
            "answer_question": "Similar to stacks linked lists are preferable for queues because the size can be adjusted",
            "grade": 5.0
        },
        "frequence_similarity": 3.0838742081211423,
        "liv_distance": 0.3424657534246575,
        "bert_score": 4.9109748005867,
        "nota_atribuida": 4.652639206480715,
        "percentual_error": 0.06947215870385703
    },
    {
        "answer_number": 3569,
        "answer_values": {
            "number_question": 83,
            "answer_question": "array - based is preferred because all you have to keep track of is the array itself and the count",
            "grade": 1.5
        },
        "frequence_similarity": 2.8015113445777633,
        "liv_distance": 0.410958904109589,
        "bert_score": 4.90122064948082,
        "nota_atribuida": 4.308219505720102,
        "percentual_error": 0.6518283253654038
    },
    {
        "answer_number": 3570,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list because its size is not defined",
            "grade": 5.0
        },
        "frequence_similarity": 3.0698028822981898,
        "liv_distance": 1.4383561643835616,
        "bert_score": 4.908181726932526,
        "nota_atribuida": 4.209112188045251,
        "percentual_error": 0.15817756239094982
    },
    {
        "answer_number": 3571,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List - based because when you enqueue - LRB - or dequeue depending upon your implementation - RRB - you would need to shift all elements to another space with an array causing a horrid time complexity for large data sets where as you can just modify the pointers in a list for a constant time complexity",
            "grade": 4.5
        },
        "frequence_similarity": 2.873978796003383,
        "liv_distance": 0,
        "bert_score": 4.874352812767029,
        "nota_atribuida": 4.541866425586772,
        "percentual_error": 0.0092178901059079
    },
    {
        "answer_number": 3572,
        "answer_values": {
            "number_question": 83,
            "answer_question": "queue are best with lists especially if the tail is kept track of as the list can be dynamically grown without losing track of the head or tail",
            "grade": 5.0
        },
        "frequence_similarity": 2.619182823655699,
        "liv_distance": 0,
        "bert_score": 4.916113317012787,
        "nota_atribuida": 4.269007054803911,
        "percentual_error": 0.14619858903921779
    },
    {
        "answer_number": 3573,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based its much simpler and the run time is better",
            "grade": 4.0
        },
        "frequence_similarity": 2.727272727272727,
        "liv_distance": 1.5068493150684932,
        "bert_score": 4.868482351303101,
        "nota_atribuida": 3.7893564328873173,
        "percentual_error": 0.05266089177817068
    },
    {
        "answer_number": 3574,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based because of the lessened memory usage initially and the increased limits on how large the que can become",
            "grade": 5.0
        },
        "frequence_similarity": 2.795656197994542,
        "liv_distance": 0,
        "bert_score": 4.908931851387024,
        "nota_atribuida": 4.463946584625633,
        "percentual_error": 0.10721068307487336
    },
    {
        "answer_number": 3575,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List - based because it is not fixed size",
            "grade": 5.0
        },
        "frequence_similarity": 3.2995026863335393,
        "liv_distance": 1.917808219178082,
        "bert_score": 4.917675256729126,
        "nota_atribuida": 4.281169088048435,
        "percentual_error": 0.1437661823903129
    },
    {
        "answer_number": 3576,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list its dynamic and no size needs to be declared",
            "grade": 5.0
        },
        "frequence_similarity": 3.2150969419341946,
        "liv_distance": 1.5068493150684932,
        "bert_score": 4.89124059677124,
        "nota_atribuida": 4.339897685442232,
        "percentual_error": 0.13202046291155356
    },
    {
        "answer_number": 3577,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list bases implementatoin is best because you use pointers to keep track of the front and back pointers Easier to maintain but uses more memory",
            "grade": 5.0
        },
        "frequence_similarity": 2.6399731277389638,
        "liv_distance": 0,
        "bert_score": 4.917529225349426,
        "nota_atribuida": 4.292592420004748,
        "percentual_error": 0.14148151599905034
    },
    {
        "answer_number": 3578,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based It can dynamically grow and has fewer restrictions",
            "grade": 5.0
        },
        "frequence_similarity": 2.738365647311398,
        "liv_distance": 1.5068493150684932,
        "bert_score": 4.896438270807266,
        "nota_atribuida": 3.80939108797227,
        "percentual_error": 0.23812178240554593
    },
    {
        "answer_number": 3579,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based is preferred because memory allocation is not an issue",
            "grade": 5.0
        },
        "frequence_similarity": 2.9181210050035453,
        "liv_distance": 1.4383561643835616,
        "bert_score": 4.86066073179245,
        "nota_atribuida": 4.0268512775471335,
        "percentual_error": 0.19462974449057335
    },
    {
        "answer_number": 3580,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List based solutions are preferred because they allow for queues of any size",
            "grade": 5.0
        },
        "frequence_similarity": 3.5453025125088633,
        "liv_distance": 1.0273972602739727,
        "bert_score": 4.887196570634842,
        "nota_atribuida": 4.894068225221035,
        "percentual_error": 0.02118635495579313
    },
    {
        "answer_number": 3581,
        "answer_values": {
            "number_question": 83,
            "answer_question": "I think array based is batter because of fixed size but on other had list base is more flaxible You do not have to worry about the size",
            "grade": 4.0
        },
        "frequence_similarity": 3.0415303610738826,
        "liv_distance": 0,
        "bert_score": 4.895294159650803,
        "nota_atribuida": 4.73455416165287,
        "percentual_error": 0.1551474830729218
    },
    {
        "answer_number": 3582,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based because you dont need to shift the elements like you do in array based queues",
            "grade": 4.0
        },
        "frequence_similarity": 2.9934637712198264,
        "liv_distance": 1.0273972602739727,
        "bert_score": 4.885925054550171,
        "nota_atribuida": 4.277985805557426,
        "percentual_error": 0.06498053481063493
    },
    {
        "answer_number": 3583,
        "answer_values": {
            "number_question": 83,
            "answer_question": "List - based because memory is not constricted",
            "grade": 5.0
        },
        "frequence_similarity": 3.0698028822981898,
        "liv_distance": 2.3972602739726026,
        "bert_score": 4.905505180358887,
        "nota_atribuida": 3.8347003534442465,
        "percentual_error": 0.23305992931115072
    },
    {
        "answer_number": 3584,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based because the array based has to have a fixed size it cannot be added to or removed from as easily",
            "grade": 5.0
        },
        "frequence_similarity": 3.1030226891555275,
        "liv_distance": 0.273972602739726,
        "bert_score": 4.920724630355835,
        "nota_atribuida": 4.703366704945198,
        "percentual_error": 0.05932665901096035
    },
    {
        "answer_number": 3585,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list - based array is easier and more scalable",
            "grade": 5.0
        },
        "frequence_similarity": 2.766500895444513,
        "liv_distance": 1.5753424657534247,
        "bert_score": 4.875809699296951,
        "nota_atribuida": 3.808442364600979,
        "percentual_error": 0.2383115270798042
    },
    {
        "answer_number": 3586,
        "answer_values": {
            "number_question": 83,
            "answer_question": "list based becuase an arrary based has to have an arrary size and needs to be pre - defined and cannot be changed dynamically",
            "grade": 5.0
        },
        "frequence_similarity": 2.882235393578219,
        "liv_distance": 0,
        "bert_score": 4.900750666856766,
        "nota_atribuida": 4.558309585490647,
        "percentual_error": 0.08833808290187073
    },
    {
        "answer_number": 3587,
        "answer_values": {
            "number_question": 84,
            "answer_question": "The stack operation is almost the opposite of the enqueue operation",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.712917059659958,
        "nota_atribuida": 4.080367578122656,
        "percentual_error": 0.3873101008340456
    },
    {
        "answer_number": 3588,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push equals enqueue pop equals dequeue",
            "grade": 4.5
        },
        "frequence_similarity": 3.3838834764831844,
        "liv_distance": 0,
        "bert_score": 4.748988747596741,
        "nota_atribuida": 5.076473001165784,
        "percentual_error": 0.11355777939396117
    },
    {
        "answer_number": 3589,
        "answer_values": {
            "number_question": 84,
            "answer_question": "enqueue corresponds with push dequeue corresponds with pop",
            "grade": 4.5
        },
        "frequence_similarity": 3.2216878364870323,
        "liv_distance": 0,
        "bert_score": 4.794609844684601,
        "nota_atribuida": 4.9079932624401685,
        "percentual_error": 0.08312832569727724
    },
    {
        "answer_number": 3590,
        "answer_values": {
            "number_question": 84,
            "answer_question": "FIFO : First in First out",
            "grade": 1.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.7386594116687775,
        "nota_atribuida": 4.087418592339183,
        "percentual_error": 0.6330202140756112
    },
    {
        "answer_number": 3591,
        "answer_values": {
            "number_question": 84,
            "answer_question": "Push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 3.75,
        "bert_score": 4.838356226682663,
        "nota_atribuida": 5.442841504081336,
        "percentual_error": 0.08136218990563471
    },
    {
        "answer_number": 3592,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push which inserts something at the top of the stack",
            "grade": 5.0
        },
        "frequence_similarity": 3.2216878364870323,
        "liv_distance": 0,
        "bert_score": 4.841863960027695,
        "nota_atribuida": 4.9209365023958425,
        "percentual_error": 0.01581269952083153
    },
    {
        "answer_number": 3593,
        "answer_values": {
            "number_question": 84,
            "answer_question": "The stack operation corresponding to enqueue in queues is the push operation",
            "grade": 5.0
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0,
        "bert_score": 4.743072986602783,
        "nota_atribuida": 4.7859939791784365,
        "percentual_error": 0.042801204164312656
    },
    {
        "answer_number": 3594,
        "answer_values": {
            "number_question": 84,
            "answer_question": "Push in a stack operation corresponds to the enqueue operation in queues These operations insert a new item into one end - LRB - the top and back respectively - RRB - of the ADT",
            "grade": 5.0
        },
        "frequence_similarity": 2.900320384512718,
        "liv_distance": 0,
        "bert_score": 4.701655805110931,
        "nota_atribuida": 4.523955066033929,
        "percentual_error": 0.0952089867932141
    },
    {
        "answer_number": 3595,
        "answer_values": {
            "number_question": 84,
            "answer_question": "The stack operation is almost the opposite of the enqueue operation",
            "grade": 2.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.712917059659958,
        "nota_atribuida": 4.080367578122656,
        "percentual_error": 0.3873101008340456
    },
    {
        "answer_number": 3596,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push equals enqueue pop equals dequeue",
            "grade": 4.5
        },
        "frequence_similarity": 3.3838834764831844,
        "liv_distance": 0,
        "bert_score": 4.748988747596741,
        "nota_atribuida": 5.076473001165784,
        "percentual_error": 0.11355777939396117
    },
    {
        "answer_number": 3597,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3598,
        "answer_values": {
            "number_question": 84,
            "answer_question": "Not sure what this question means You can use the stack push operation and the enqueue operation to detect palindromes",
            "grade": 5.0
        },
        "frequence_similarity": 3.010310363079829,
        "liv_distance": 0,
        "bert_score": 4.800826758146286,
        "nota_atribuida": 4.673844017119458,
        "percentual_error": 0.06523119657610843
    },
    {
        "answer_number": 3599,
        "answer_values": {
            "number_question": 84,
            "answer_question": "Enqueue is the queue equivalent of push and dequeue is the queue equivalent to pop",
            "grade": 5.0
        },
        "frequence_similarity": 3.021286035142687,
        "liv_distance": 0,
        "bert_score": 4.827514588832855,
        "nota_atribuida": 4.693400509920672,
        "percentual_error": 0.06131989801586557
    },
    {
        "answer_number": 3600,
        "answer_values": {
            "number_question": 84,
            "answer_question": "Push operation",
            "grade": 5.0
        },
        "frequence_similarity": 4.267766952966369,
        "liv_distance": 0,
        "bert_score": 4.760322719812393,
        "nota_atribuida": 6.065802587052527,
        "percentual_error": 0.17570677115794797
    },
    {
        "answer_number": 3601,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3602,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3603,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3604,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3605,
        "answer_values": {
            "number_question": 84,
            "answer_question": "that would be the push operation if it put the item at the end of the list",
            "grade": 5.0
        },
        "frequence_similarity": 2.9642383454426295,
        "liv_distance": 0,
        "bert_score": 4.816986918449402,
        "nota_atribuida": 4.6268638715228,
        "percentual_error": 0.07462722569544
    },
    {
        "answer_number": 3606,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3607,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3608,
        "answer_values": {
            "number_question": 84,
            "answer_question": "the Push method in the stack operations",
            "grade": 5.0
        },
        "frequence_similarity": 3.333333333333333,
        "liv_distance": 0,
        "bert_score": 4.7571006417274475,
        "nota_atribuida": 5.02229174655651,
        "percentual_error": 0.004438560657451629
    },
    {
        "answer_number": 3609,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3610,
        "answer_values": {
            "number_question": 84,
            "answer_question": "enqueue corresponds with push dequeue corresponds with pop",
            "grade": 4.5
        },
        "frequence_similarity": 3.2216878364870323,
        "liv_distance": 0,
        "bert_score": 4.794609844684601,
        "nota_atribuida": 4.9079932624401685,
        "percentual_error": 0.08312832569727724
    },
    {
        "answer_number": 3611,
        "answer_values": {
            "number_question": 84,
            "answer_question": "Push corresponds with enqueue both very similarly place new elements into their stack or queue",
            "grade": 5.0
        },
        "frequence_similarity": 3.1454972243679027,
        "liv_distance": 0,
        "bert_score": 4.783723056316376,
        "nota_atribuida": 4.819998847268768,
        "percentual_error": 0.03600023054624635
    },
    {
        "answer_number": 3612,
        "answer_values": {
            "number_question": 84,
            "answer_question": "FIFO : First in First out",
            "grade": 1.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.7386594116687775,
        "nota_atribuida": 4.087418592339183,
        "percentual_error": 0.6330202140756112
    },
    {
        "answer_number": 3613,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3614,
        "answer_values": {
            "number_question": 84,
            "answer_question": "Push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 3.75,
        "bert_score": 4.838356226682663,
        "nota_atribuida": 5.442841504081336,
        "percentual_error": 0.08136218990563471
    },
    {
        "answer_number": 3615,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3616,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3617,
        "answer_values": {
            "number_question": 84,
            "answer_question": "push",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3618,
        "answer_values": {
            "number_question": 85,
            "answer_question": "A stack some printing jobs might have a higher priority than others and they can be easily inserted at the front of the list or anywhere between",
            "grade": 1.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.7931914031505585,
        "nota_atribuida": 4.102355294590082,
        "percentual_error": 0.6343563898577722
    },
    {
        "answer_number": 3619,
        "answer_values": {
            "number_question": 85,
            "answer_question": "A stack some printing jobs might have a higher priority than others and they can be easily inserted at the front of the list or anywhere between",
            "grade": 1.5
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.7931914031505585,
        "nota_atribuida": 4.102355294590082,
        "percentual_error": 0.6343563898577722
    },
    {
        "answer_number": 3620,
        "answer_values": {
            "number_question": 85,
            "answer_question": "a queue otherwise some things would never be printed",
            "grade": 5.0
        },
        "frequence_similarity": 3.3838834764831844,
        "liv_distance": 0,
        "bert_score": 4.848533719778061,
        "nota_atribuida": 5.103739080574295,
        "percentual_error": 0.0203260940531117
    },
    {
        "answer_number": 3621,
        "answer_values": {
            "number_question": 85,
            "answer_question": "A queue is more appropriate for scheduling printing jobs because queues have first in first out behavior",
            "grade": 5.0
        },
        "frequence_similarity": 3.0892556509887896,
        "liv_distance": 0,
        "bert_score": 4.823202937841415,
        "nota_atribuida": 4.768059088381073,
        "percentual_error": 0.04638818232378539
    },
    {
        "answer_number": 3622,
        "answer_values": {
            "number_question": 85,
            "answer_question": "Queue its better to be FIFO than LIFO - LRB - stack - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 3.253778361444409,
        "liv_distance": 0,
        "bert_score": 4.84283059835434,
        "nota_atribuida": 4.9570074416842544,
        "percentual_error": 0.008598511663149067
    },
    {
        "answer_number": 3623,
        "answer_values": {
            "number_question": 85,
            "answer_question": "Queue of course !",
            "grade": 5.0
        },
        "frequence_similarity": 3.9433756729740645,
        "liv_distance": 0,
        "bert_score": 4.827769249677658,
        "nota_atribuida": 5.722325307059895,
        "percentual_error": 0.12622933305953954
    },
    {
        "answer_number": 3624,
        "answer_values": {
            "number_question": 85,
            "answer_question": "Queue the person who wanted to print first should be first served",
            "grade": 5.0
        },
        "frequence_similarity": 3.1681531047810605,
        "liv_distance": 0,
        "bert_score": 4.851709753274918,
        "nota_atribuida": 4.863900011936912,
        "percentual_error": 0.02721999761261762
    },
    {
        "answer_number": 3625,
        "answer_values": {
            "number_question": 85,
            "answer_question": "queue because it guarantees that job are executed in the order they come in",
            "grade": 5.0
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0,
        "bert_score": 4.867887943983078,
        "nota_atribuida": 4.820181688157871,
        "percentual_error": 0.03596366236842585
    },
    {
        "answer_number": 3626,
        "answer_values": {
            "number_question": 85,
            "answer_question": "queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3627,
        "answer_values": {
            "number_question": 85,
            "answer_question": "Queues would be preferable to stacks for use as scheduling print jobs because it would print jobs in the order that they were sent to the printer",
            "grade": 5.0
        },
        "frequence_similarity": 2.5,
        "liv_distance": 0,
        "bert_score": 4.841698110103607,
        "nota_atribuida": 4.115641628341003,
        "percentual_error": 0.1768716743317993
    },
    {
        "answer_number": 3628,
        "answer_values": {
            "number_question": 85,
            "answer_question": "a queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 3.0,
        "bert_score": 4.918557107448578,
        "nota_atribuida": 5.757079231978048,
        "percentual_error": 0.13150404944451788
    },
    {
        "answer_number": 3629,
        "answer_values": {
            "number_question": 85,
            "answer_question": "queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3630,
        "answer_values": {
            "number_question": 85,
            "answer_question": "a queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 3.0,
        "bert_score": 4.918557107448578,
        "nota_atribuida": 5.757079231978048,
        "percentual_error": 0.13150404944451788
    },
    {
        "answer_number": 3631,
        "answer_values": {
            "number_question": 85,
            "answer_question": "Queue are more appropriate as printers are usually first come first serve",
            "grade": 5.0
        },
        "frequence_similarity": 3.125,
        "liv_distance": 0,
        "bert_score": 4.8354074358940125,
        "nota_atribuida": 4.811285044827939,
        "percentual_error": 0.03774299103441214
    },
    {
        "answer_number": 3632,
        "answer_values": {
            "number_question": 85,
            "answer_question": "queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    },
    {
        "answer_number": 3633,
        "answer_values": {
            "number_question": 85,
            "answer_question": "queue because of the first in first out principles and if it was a stack it would be last in last out because it could possibly not let the first item that was added get removed in a timely manner",
            "grade": 5.0
        },
        "frequence_similarity": 2.807728727448332,
        "liv_distance": 0,
        "bert_score": 4.858783483505249,
        "nota_atribuida": 4.4636809519481995,
        "percentual_error": 0.10726380961036008
    },
    {
        "answer_number": 3634,
        "answer_values": {
            "number_question": 85,
            "answer_question": "Queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 4.0,
        "bert_score": 4.923785477876663,
        "nota_atribuida": 5.368817808816775,
        "percentual_error": 0.06869627950702584
    },
    {
        "answer_number": 3635,
        "answer_values": {
            "number_question": 85,
            "answer_question": "a queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 3.0,
        "bert_score": 4.918557107448578,
        "nota_atribuida": 5.757079231978048,
        "percentual_error": 0.13150404944451788
    },
    {
        "answer_number": 3636,
        "answer_values": {
            "number_question": 85,
            "answer_question": "A Queue data structure is more appropriate for scheduling printing jobs at a printer The first job sent to the printer is the first job printed",
            "grade": 5.0
        },
        "frequence_similarity": 2.9055535528269063,
        "liv_distance": 0,
        "bert_score": 4.848988354206085,
        "nota_atribuida": 4.570149602177704,
        "percentual_error": 0.08597007956445923
    },
    {
        "answer_number": 3637,
        "answer_values": {
            "number_question": 85,
            "answer_question": "a queue It would not be unfair for the first job to finish last",
            "grade": 5.0
        },
        "frequence_similarity": 3.193375245281537,
        "liv_distance": 0,
        "bert_score": 4.859750866889954,
        "nota_atribuida": 4.894245050858268,
        "percentual_error": 0.02115098982834629
    },
    {
        "answer_number": 3638,
        "answer_values": {
            "number_question": 85,
            "answer_question": "a queue because it takes the job that has waited the longest",
            "grade": 5.0
        },
        "frequence_similarity": 3.193375245281537,
        "liv_distance": 0,
        "bert_score": 4.860787391662598,
        "nota_atribuida": 4.894528962402372,
        "percentual_error": 0.02109420751952551
    },
    {
        "answer_number": 3639,
        "answer_values": {
            "number_question": 85,
            "answer_question": "A queue is more appropriate because the clients which have waited the longest should be the first served",
            "grade": 5.0
        },
        "frequence_similarity": 3.021286035142687,
        "liv_distance": 0,
        "bert_score": 4.8481422662734985,
        "nota_atribuida": 4.69905057821428,
        "percentual_error": 0.06018988435714401
    },
    {
        "answer_number": 3640,
        "answer_values": {
            "number_question": 85,
            "answer_question": "Queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 4.0,
        "bert_score": 4.923785477876663,
        "nota_atribuida": 5.368817808816775,
        "percentual_error": 0.06869627950702584
    },
    {
        "answer_number": 3641,
        "answer_values": {
            "number_question": 85,
            "answer_question": "a queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 3.0,
        "bert_score": 4.918557107448578,
        "nota_atribuida": 5.757079231978048,
        "percentual_error": 0.13150404944451788
    },
    {
        "answer_number": 3642,
        "answer_values": {
            "number_question": 85,
            "answer_question": "Queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 4.0,
        "bert_score": 4.923785477876663,
        "nota_atribuida": 5.368817808816775,
        "percentual_error": 0.06869627950702584
    },
    {
        "answer_number": 3643,
        "answer_values": {
            "number_question": 85,
            "answer_question": "i would say that a queue is better because the first thing you try to print should be the first one to come out of the printer - LRB - FIFO - RRB -",
            "grade": 5.0
        },
        "frequence_similarity": 2.9055535528269063,
        "liv_distance": 0,
        "bert_score": 4.8491619527339935,
        "nota_atribuida": 4.570197152055346,
        "percentual_error": 0.08596056958893072
    },
    {
        "answer_number": 3644,
        "answer_values": {
            "number_question": 85,
            "answer_question": "a queue because you want the jobs to execute in the order that they are received",
            "grade": 5.0
        },
        "frequence_similarity": 3.1063390625908327,
        "liv_distance": 0,
        "bert_score": 4.87458810210228,
        "nota_atribuida": 4.80119528986896,
        "percentual_error": 0.03976094202620806
    },
    {
        "answer_number": 3645,
        "answer_values": {
            "number_question": 85,
            "answer_question": "queue",
            "grade": 5.0
        },
        "frequence_similarity": 5,
        "liv_distance": 5.0,
        "bert_score": 5,
        "nota_atribuida": 4.999999999999999,
        "percentual_error": 2.220446049250313e-16
    }
]