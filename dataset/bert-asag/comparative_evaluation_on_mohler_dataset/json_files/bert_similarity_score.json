{"High risk problems are address in the prototype program to make sure that the program is feasible.  A prototype may also be used to show a company that the software can be possibly programmed.": 0.9629854559898376, "To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.": 0.9580532312393188, "A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.": 0.9742565751075745, "Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product.  Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.": 0.9784586429595947, "It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.": 0.9546919465065002, "To find problem and errors in a program before it is finalized": 0.8929178714752197, "To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible. ": 0.9567925930023193, "you can break the whole program into prototype programs to simulate parts of the final program": 0.8959754109382629, "#NAME?": 0.7725006937980652, "Simulating the behavior of only a portion of the desired software product.": 0.9727100729942322, "A program that stimulates the behavior of portions of the desired software product.": 0.9822644591331482, "A program that simulates the behavior of portions of the desired software product.": 0.9831246137619019, "To lay out the basics and give you a starting point in the actual problem solving.": 0.9327318072319031, "To simulate problem solving for parts of the problem": 0.943357527256012, "A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.": 0.9488949775695801, "A prototype program is a part of the Specification phase of Software Problem Solvin.  It's employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.": 0.9595906734466553, "Program that simulates the behavior of portions of the desired software product": 0.9440463781356812, "it provides a limited proof of concept to verify with the client before actually programming the whole application.": 0.951100766658783, "It tests the main function of the program while leaving out the finer details.": 0.9479933977127075, "To get early feedback from users in early stages of development.  To show users a first idea of what the program will do/look like.  To make sure the program will meet requirements before intense programming begins.": 0.9551409482955933, "it simulates the behavior of portions of the desired software product": 0.9495627284049988, "It simulates the behavior of portions of the desired software product.": 0.9795608520507812, "A prototype program is used in problem solving to collect data for the problem.": 0.9317753911018372, "To ease the understanding of problem under discussion and to ease the understanding of the program itself": 0.9206770658493042, "The role of a prototype program is to help spot key problems that may arise during the actual programing.": 0.9330456256866455, "the prototype program gives a general idea of what the end product will do,   without the time and effort to write out the entire program.": 0.9433937668800354, "to show that a certain part of the program works as it is supposed to": 0.8633158802986145, "Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution. ": 0.9650493264198303, "Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.": 0.9187725186347961, "The implementation phase and the maintenance phase are effected": 0.9032987952232361, "Verification, coding, refining the solution and maintenance are all influenced by the testing stage.": 0.8985472917556763, "In RUP the stages in the software life cycle are influenced by the testing stage is:  Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates.  Construction phase- iterative development of remaining system.  Transition phase-testing and deployment of the system.": 0.9178094863891602, "Refining the solution, Production and Maintenance are all influenced by the Testing stage. ": 0.8780990839004517, "Elaboration, Construction, and Transition are all affected by testing": 0.8967326879501343, "Refining, Production, Maintenance": 0.8547725081443787, "Refining the solution": 0.8754081130027771, "Refining and Coding": 0.8881410956382751, "The second half of the Elaboration phase, Construction phase, and the Transition phase. ": 0.9284116625785828, "The refining step, the production step, and the maintenance stage.  ": 0.8886286020278931, "Elaboration, Construction, Transition": 0.8813719153404236, "Refining.": 0.804539680480957, "The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.": 0.8894951939582825, "Directly: Refining, coding.  Because Refining is right before the Testing Phase and Coding is right after the Testing Phase.  Indirectly: Production, Maintenance.  Because Refining occurs before these last two stages in the Software Life Cycle.": 0.928165853023529, "Testing, refining, production, and maintenance.": 0.868782103061676, "Depending on how the work is done, Testing is spread throughout the  process as to prevent errors from showing up later on due to lack of foresight. ": 0.9224036335945129, "Elaboration, construction, and transition.": 0.8686229586601257, "All stages are influenced except setting the program requirements.  If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.": 0.9125382900238037, "Refining, production, and maintenance": 0.8547725081443787, "coding and refining": 0.8881410956382751, "refining, production, maintenance.": 0.8516759276390076, "Removing logical errors, testing for valid data, random data and actual data.": 0.8875598907470703, "1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance": 0.8243919014930725, "Refining stage, Production stage, and Maintenance stage.  ": 0.8516759276390076, "Testing could affect all parts of the life cycle; it could make you go back   to specification if it does not test well.": 0.8993179798126221, "coding": 0.8679356575012207, "The Individual components and steps such as  analysis, design, and implementing code  as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output ": 0.9185966849327087, "Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.": 0.8369893431663513, "This type of programming is more flexible, making it easier to add and modify the program.  It is also a type of a fail safe program, you check each individual module.  This eliminates redundant code and makes the program easier to read for other programmers.  When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.": 0.8384048342704773, "The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier.": 0.8300756216049194, "The advantages is that OOP allows us to build classes of objects.  Three principles that make up OOP are:  Encapsulation- Objects combine data and operations.  Inheritance- Classes can inherit properties from other classes.  Polymorphism- Objects can determine appropriate operations at execution time.": 0.8439417481422424, "Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.": 0.8231328725814819, "Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.": 0.8303650617599487, "Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.": 0.8793296813964844, "Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time": 0.7633743286132812, "Re-usability  and ease of maintenance": 0.7246540784835815, "One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works.   Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance.   Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism. ": 0.8385381102561951, "Existing classes can be reused, and program maintenance and verification are easier.": 0.8430454730987549, "Using different modules allows for easier debugging": 0.8018590211868286, "Data encapsulation concept,the use of functions or methods to manipulate data.": 0.8308721780776978, "Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.": 0.8608677983283997, "Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify.  The code itself also looks more organized and is easier to read and will help to avoid redundant coding.  Post-programming maintenance is also easier.  Also, modules can be reused several times in other programs without too much hassle.   Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them.  Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.": 0.8469393253326416, "Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.": 0.8475152254104614, "Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.": 0.8506383895874023, "Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.": 0.85542893409729, "They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.": 0.8175535798072815, "Existing classes can be reused, Program maintenance and verification are easier ": 0.7943279147148132, "Existing classes can be feused, Program maintenance and verification are easier": 0.7983794808387756, "the main advantages to object-oriented programming  is data abstraction, easier maintenance, and re-usability.": 0.894611120223999, "Existing classes can be reused Program maintenance and verifications are easy": 0.7575145959854126, "1- Existing classes can be reused 2- Program maintenance and verification are easier": 0.7442494630813599, "Information can be hidden. It is easier to debug. Programming is easier and more manageable.": 0.8668401837348938, "Existing classes can be reused, program maintenance and verification are   easier.": 0.8430454730987549, "existing classes can be reused program maintenance and verification are easier": 0.7640377879142761, "Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class.  Example in the book included obj clock and how obj alarm would still use clock from the first class. ": 0.8422658443450928, "At function \u2018int main ()\u2019": 0.9518844485282898, "the Function main().": 0.945346474647522, "c++ programs begin to execute in the main method.": 0.9087445735931396, "A C++ program will begin to execute at the main() function.": 0.9500187039375305, "They begin in the main() function.": 0.9492769241333008, "Int main()": 0.8731199502944946, "main method": 0.8739349246025085, "in the testing phase": 0.8034209609031677, "main": 0.8374043107032776, "They begin to execute at the funcion main().": 0.9170456528663635, "The main method.": 0.9567099213600159, "At the root": 0.8438370823860168, "In the main() function.": 0.9432617425918579, "C++ programs begin execution at main.": 0.9491502046585083, "In the Main function..?": 0.9108781218528748, "At the \"main()\" function": 0.8916224241256714, "The main function.": 0.9871131777763367, "The function main": 0.9562850594520569, "After loading the required include statements and libraries, the main method begins the execution.": 0.931976854801178, "main function": 0.9264546036720276, "C++ programs begin execution at the main function.": 0.9728295803070068, "At main": 0.9119937419891357, "they beging to excute at main": 0.8507574200630188, "at the main function  int main() {}": 0.8965071439743042, "in the \"main\" function": 0.8526133894920349, "Within the main function": 0.946532130241394, "Variable can be a integer or a string in a program.": 0.9102292060852051, "In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished. ": 0.950641393661499, "A variable is a location in memory where a value can be stored.": 0.9910715222358704, " Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.": 0.9749268293380737, "A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.": 0.9827327132225037, "A named object that can hold a numerical or letter value": 0.9426842331886292, "It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.": 0.9434758424758911, "A variable is a location in the computers memory where a value can be stored for use by a program": 0.9594671726226807, "a block of memory that holds a specific type of data": 0.9312463402748108, "It is a location in the computer's memory where it can be stored for use by a program.": 0.9624428749084473, "A location in memory where value can be stored.": 0.9910715222358704, "a value/word that can assume any of a set of values": 0.7790037393569946, "A pointer to a location in memory.": 0.9737642407417297, "A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.": 0.9696311950683594, "A variable is a value that is subject to change in a computer's memory that can be used by programs.  Programs can change the value of the variable and recall it later or act on it directly.": 0.960986852645874, "a symbol that stands in for a value that may or may not change depending on the program.": 0.9446770548820496, "a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc. ": 0.9180372953414917, "a stored value used by the program": 0.9127925634384155, "A way to store different values into the program, such as numbers, words, letters, etc.": 0.9468706846237183, "An object with a location in memory where value can be stored": 0.9558347463607788, "location in memory where a value can be stored": 0.9368700981140137, "a variable is an object where data is stored.": 0.9303117990493774, "Location in memory where a value can be stored.": 0.9797119498252869, "it is a location in memory where value can be stored": 0.9368700981140137, "A variable is the location in a computer's memory where a value can be stored for use by a program.": 0.977354884147644, "A variable is a location in a computers memory where a value can be stored   for use by a program.": 0.9798647165298462, "a location in memory where data can be stored and retrieved": 0.8787748217582703, "Is a method or identifier I would say,  we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called. ": 0.9662352800369263, "They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.": 0.9264705181121826, "In the Function main() before using the variable.": 0.9569453597068787, "Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.": 0.9574974775314331, "Variables are declared where ever it is defined either inside a block locally or outside a block globally.": 0.9339191317558289, "Variables are declared before they are actually used. They can be declared before main() to use globally": 0.9657069444656372, "For good programing practice they should be declared before main(), but should at least be declared before they are used.": 0.943385124206543, "They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).": 0.9659335017204285, "local variables are declared inside the method while global variables are declared in the body.": 0.9334155917167664, "Globally for an entire program, and locally for individual functions (including FOR statements)": 0.956167995929718, "They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.": 0.9302957653999329, "Inside the method.": 0.8998857736587524, "at the top": 0.5610372424125671, "Global variables are declared in the body of the code. Local variables are declared in the function they are to be used (unless the function is being passed a variable). Variables should always be declared before use.": 0.963376522064209, "Variables are usually declared at the beginning of a module of C++ code.": 0.9375482797622681, "In the main function, usually at the top of code.  They can be declared almost anywhere, but must be declared before the code can use or act upon them.": 0.9432891011238098, "in the very beginning of the program. Before the main() starts.": 0.9284129738807678, "In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc  ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.": 0.9390683174133301, "After declaration of the variable's data type.": 0.929591178894043, "anywhere in the code, can be at the top, or in the middle of the code, or anywhere.": 0.913727879524231, "Before they are used.": 0.8921428918838501, "Anywhere in the same scope before they are used": 0.8758285641670227, "variables can be declared in classes and methods.": 0.8717991709709167, "inside the function scope and outside of the function scope in case of global variables": 0.9279994368553162, "global variables are declared in the main function local variables are declared in any other function": 0.8974568247795105, "Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.": 0.9255417585372925, "Variables are declared in the main function, before any operation is   attempted with the variables.": 0.9293140172958374, "anywhere, but where you declare them depends on where you want them to be accessible (their scope)": 0.9454582929611206, "It depends if it\u2019s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesn\u2019t need to be declared outside the variable seeing how it is used for the function or block its being called for.": 0.953010082244873, "\"The \u201cdo\u201d statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. \tThe \u201cdo while\u201d statement executes the lines of code and then it evaluates the condition. \"": 0.9266144037246704, "do...while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.": 0.9565338492393494, "The main difference between a while and a do...while loop is that the do...while loop always cycles through the loop at least once, but the while loop does not always do so.": 0.9389859437942505, "While loop used to execute a block of code as long as some condition is true.  A do...while loop used to execute a block of code as long as some condition is satisfied.  The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.": 0.9506674408912659, "The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.": 0.9507821202278137, "A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.": 0.9551053047180176, "A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.": 0.9405329823493958, "a do while loop always executes once. A while loop's conditional statement has to be true for it to run.": 0.9374009966850281, "while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do...while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.": 0.9541158080101013, "The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once.   The while statement will only execute if its condition is true.": 0.9556366801261902, "The loop of a do...while statement always executes once.": 0.946031928062439, "a while statement will only process if the statement is met, while a do...while will always process once, then only continue if the statement is met.": 0.9095984697341919, "Do ...while runs the embedded code at least once, the do command does not necessarily": 0.934579610824585, "While tests for true first before running, do...while runs once first before checking.": 0.9243361949920654, "A do...while statement's body always executes at least once.  Where as a while statement will not execute at all unless the condition for the while is true.": 0.9646393060684204, "The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met.": 0.9546763896942139, "a do... while loop will always run through once, while an while loop performs a test before running through the loop.": 0.9281024932861328, "A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.": 0.9281662702560425, "A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.": 0.916475772857666, "the loop body always executes at least once": 0.9219076633453369, "While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.": 0.9382100701332092, "A do...while statement will always execute the \"do\" piece of code at least once before checking the condition. A while statement will always check the condition first.": 0.9583109617233276, "A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.": 0.9367715716362, "a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.": 0.9428743124008179, "NO ANSWER": 0.7999008893966675, "A do...while loop will always execute atleast once, a while loop may never   execute depending on teh conditions.": 0.9495181441307068, "a while loop is pre-check (it checks the condition statement before it executes the code within the while block)  a do while loop is post-check (it checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is)": 0.9286311864852905, "))     What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed. ": 0.9510078430175781, "For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.": 0.8871607184410095, "The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.": 0.8971721529960632, "Information telling the compiler what data members and member functions belong to the class.": 0.9564600586891174, "Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers.  Example for specifiers would be public, private, and protected.  There is the keyword Class and the Class body is enclosed with brackets ({}). ": 0.9400226473808289, "An object and data.": 0.9077226519584656, "It's specific class name, includes only information defined by that class... implementation details... etc.": 0.9027982950210571, "data members and member functions.": 0.9655295014381409, "A class definition usually contains the function and its data members": 0.9302341341972351, "Data members and member functions": 0.9262988567352295, "member functions": 0.883593738079071, "Member functions and data members belonging to the class.": 0.9624795317649841, "a public and private area that includes the functions and variables that are used in the class": 0.9119003415107727, "the keyword class followed by they class name, on the inside you declare public and private declarations of your class": 0.8833528757095337, "A class definition typically includes function definitions.": 0.9120147824287415, "It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.": 0.9356672167778015, "the data and methods": 0.8246183395385742, "A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.": 0.9147158861160278, "Member functions and data members.": 0.9655295014381409, "public section and private section, and there must be a semicolon to set the end": 0.8752383589744568, "member funtions and data members": 0.891962468624115, "Data members and Member functions": 0.9262988567352295, "data members and member functions": 0.9262988567352295, "the class name and its public data types such as constructors, methods, functions.": 0.9339189529418945, "a constructor and several data members, and at least one public data member or method": 0.9276325106620789, "class name, two curly prenthesis, public and private": 0.8759046792984009, "Data and functions": 0.8235803842544556, "functions and data members that belong to the class": 0.9337313771247864, "class variables, function definitions for the class": 0.8862084150314331, "A class is an expanded concept of a data structure, it holds both the data and the functions being executed ": 0.9274284839630127, "Data members are the data components of a particular class.  A member function are the functioning components of the class.": 0.9330304265022278, "A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.": 0.9154785871505737, "Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.": 0.9615727663040161, "Data member are variables that represent an attribute in a class definition.  Local variables declared in a function body cannot be used outside of that function body.  When a function terminates the values of its local variables are lost.": 0.9558967351913452, "A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.": 0.9719629287719727, "A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.": 0.9356081485748291, "A local variable can only be accessed within the scope of its declaration.": 0.9164409041404724, "Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.": 0.94166499376297, "data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.": 0.9478028416633606, "data members are declared in a class definition but outside the bodies of a class's member-function definitions. Local variables are declared in a function definition's body": 0.93597412109375, "A data member is globally accessible, while a local variable is only accessible inside the member function.": 0.9125527739524841, "A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.": 0.920701265335083, "Local variables are used only within the scope of its declaration": 0.9125523567199707, "A data member is a more general term describing all objects instantiated within a member function.  \"Local\" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class.  Local variables whose scope are in a member function are the same as data members of member functions.": 0.9466612339019775, "A data member exists permanently in that program's memory as long as it's run.  A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.": 0.9056784510612488, "local variables can only be used within the function, where as data members can be set to public access and can be used throughout": 0.9214370846748352, "The local variable is lost once it exits the block of code, while the data member is not.": 0.9150158166885376, "Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing } before it is lost from memory.": 0.9258735179901123, "data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes": 0.9373860955238342, "Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.": 0.9648033976554871, "The data member can be accessed outside of the class, whereas the local variable cannot.": 0.9254701137542725, "Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object. ": 0.9558303952217102, "a local variable in a member function has to be static. a data member can change its value freely.": 0.913090705871582, "a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class": 0.9122679829597473, "Variable declared in a function defination's body cannot be used outside of that function.  Data members accessible only to member function of that class.": 0.9553966522216797, "data members   local variables are declared in a function definition\u2019s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.   ": 0.9487338066101074, "local variable is only available in the function.": 0.8104692101478577, "local variables are accessed inside member functions only while data members   can be accessed throughout the class": 0.9597426056861877, "A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.": 0.9227442741394043, "a Data member is encapsulated within a class or object,  it is static and can be shared by all instances of that class.  however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables. ": 0.9413636922836304, "A constructor initializes an object or objects of a class.  A function of a class performs a task such as display a line of text or do some kind of mathematical operations.": 0.9644996523857117, "all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.": 0.9757247567176819, "Unlike regular functions, constructors are only used to initialize an object\u2019s data when it is created. Constructors must also be given the same name as the class and cannot return any values. ": 0.981852114200592, "A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc.  Also a constructor cannot return values.  Functions are operations that maybe globally defined.": 0.978078305721283, "Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.": 0.9860692024230957, "A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.": 0.9656128287315369, "A constructor is called whenever a new object of that class is made.": 0.9686374664306641, "A constructor does not return any date and has no return type.  Functions can return date or not return data can have a return type.": 0.9551583528518677, "A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user. ": 0.9756820797920227, "constructors cannot return values, so they cannot specify a return type like functions can.": 0.9766975045204163, "A constructor is a function used to initialize an object's data when it is created.": 0.9591854810714722, "a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.": 0.924645721912384, "A constructor initialized values at the execution of its instantiation. It provides default values.": 0.9635019898414612, "A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.": 0.9666430950164795, "A constructor is used to create an object that can be employed in the main function of a program.  This may or may not execute code along with it.  A function is a set of code that executes when called, but does not create a new object.": 0.9751147627830505, "a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either.": 0.9469977617263794, "a constructor does not need a type, and it is used to initialize the variables.": 0.9787183403968811, "Constructors don't have a return type.": 0.9496511220932007, "constructor creates the class object into memory where functions perform actions against that object": 0.9256715178489685, "constructors cannot return values": 0.8745669722557068, "A constructor initializes values and a function usual performs some sort of operation.": 0.9658471345901489, "A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.": 0.9791403412818909, "A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.": 0.9583897590637207, "a constructor is a function that initializes a class instance, a function performs whatever task it is written for": 0.9467683434486389, "A constructor cannot return values, not even void, but function get a return value.": 0.9756197929382324, "a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.": 0.9852059483528137, "A constructor initializes an object. A function is part of an object.": 0.9516719579696655, "constructors initialize the data that is then used in the calculations of a   function": 0.8413646221160889, "a constructor is called when the class is created, a function can be called any time.": 0.9532417058944702, "constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code. ": 0.9671630263328552, "The compiler creates a default constructor when we do not define one in our class file": 0.9393030405044556, "during compilation": 0.5871146321296692, "When the class does not explicitly include a constructor.": 0.9452286958694458, "When no parameters are set is when a default constructor is used.": 0.9270743727684021, "When a class does not explicitly include a constructor.": 0.9452286958694458, "When there are no arguments passed.": 0.9280787706375122, "when there is not one already for a specific class": 0.8872435688972473, "When it the programs compiles": 0.7302733659744263, "when a constructor is not provided by the programmer of the class": 0.906347393989563, "In any class that does not explicitly include a constructor.": 0.9425507187843323, "Before the main function of the code.": 0.9309336543083191, "whenevery you dont specifiy your own": 0.7177637815475464, "When non are provided": 0.8459811806678772, "C++ will create a default constructor when no other constructor is present.": 0.8034829497337341, "When no constructor was specified in the constructor's class, but the class is instantiated in a program.": 0.9315016269683838, "When no constructor exists when one is needed, a parameterless default constructor is declared.": 0.9551538825035095, "The Compiler creates this automatically for you, unless you specifically create one.": 0.9672724008560181, "In any class that doesn't explicitly include a constructor.": 0.9326295256614685, "when no user-defined constructor exists": 0.6728350520133972, "If a class does not explicitly include a constructor, the compiler creates one.": 0.9822932481765747, "When you do not provide your own constructor.": 0.9054202437400818, "C++ creates a default constructor during compilation if one is not provided.": 0.9513757824897766, "when a class does not explicitly include a constructor": 0.90370774269104, "The compiler will provide one when class does not explictly include a consructor.": 0.957694411277771, "when the programmer does not explicitly include a constructor": 0.9169749021530151, "When one is not explicitly stated.": 0.9429917931556702, "when one is not explicitly included by a class": 0.885747492313385, "When you dont specify any constructors.": 0.9036934971809387, "at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user": 0.9503774642944336, "Just one per class.": 0.9271045923233032, "As many as you want so long as they have different parameters.": 0.9099180698394775, "There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.": 0.9381817579269409, "It depends what type of class is being defined.  Typically you would have a constructor call for each object.": 0.9238075017929077, "In C++, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.": 0.8782590627670288, "1": 0.7546001076698303, "any number you want": 0.8790090680122375, "One": 0.7497472167015076, "by default just one, but they may be overloaded to create as many constructors as necessary": 0.8797814249992371, "as many as you want": 0.704596221446991, "As many as you want, with different parameters.": 0.9220327138900757, "infinite": 0.8538305163383484, "as many as you need": 0.7064518332481384, "As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.": 0.9136700630187988, "A very large amount of constructors can be created for any given class through overloading.  When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.": 0.9317240118980408, "It depends on the number of objects. Each object should have a constructor.": 0.9357396364212036, "Theoretically unlimited, as long as they are defined by the programmer.": 0.9386855959892273, "As many as needed.": 0.9165831804275513, "as many as wanted/needed": 0.2621602714061737, "several": 0.6997174024581909, "one": 0.7497472167015076, "There can be infinite constructors as long as the signature is different.": 0.9102271199226379, "that depends on the number of data members in the class": 0.8410162329673767, "you can overload constructors as you need": 0.678959310054779, "As many as the programmer wants to create.": 0.9088355302810669, "as many as you want, as long as they each have a unique argument list": 0.8898133635520935, "as many as the user decides to use.": 0.9044772982597351, "A function definition does not require any additional information that needs to be passed inside its parenthesis  to execute. While a definition prototype requires more than one parameters to be passed in order to complete its  task.": 0.9608842730522156, "The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ). The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.": 0.9822908043861389, "A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.": 0.9768680930137634, "Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.": 0.9586866497993469, "A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.": 0.9787004590034485, "A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.": 0.9619687795639038, "prototype only tells the user what data types go into a function and what type is returned.": 0.9630451202392578, "Function prototype is located in the .h file and only contains the access function name and paramater type.  Function definition contains the code for the function to perform its activity.": 0.9563474655151367, "a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...": 0.9766809940338135, "A function prototype describes a class's public interface without revealing the class's member function implementations": 0.944360077381134, "Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.": 0.9636773467063904, "a prototype does not include any actual code where the function has all the code that is executed in the program.": 0.9393553733825684, "a prototype declares what will be used in the program and the definition": 0.8662152886390686, "A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.": 0.9842536449432373, "A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.  A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.": 0.975416362285614, "A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.": 0.9716363549232483, "the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.": 0.9445517659187317, "A function prototype describes the class's public interface without providing how the function works. A function definition contains the inner workings of the function.": 0.9747488498687744, "prototype states all functions in that class before compilation, where the definition actually holds the source for the functions": 0.8821491003036499, "Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.": 0.9613452553749084, "A function prototype just specifies parameters.  A function definition includes parameters and a code body.": 0.9652791619300842, "Function prototypes describe the class's public interface": 0.9218642115592957, "A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function ": 0.981762707233429, "a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code": 0.9341498613357544, "A functgion prototype is a declaration of a function , while function definition specifies what a function does": 0.9327662587165833, "in a function prototype you include the return type, the name of the function, and its parameters if any are needed.  in a function definition you write the code of what the function will do. ": 0.980571448802948, "A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.": 0.968555748462677, "function prototype describe the class's public interface without revealing   the class's member function implementations,  function definitions show what   implementations are being done": 0.9510241150856018, "A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.": 0.9861292243003845, "function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.": 0.9433218240737915, "the role of a header file list all the functions a class can do while hiding the inner workings of its functions": 0.9269489049911499, "The main role of header file is it is used to share information among various files.": 0.9496421813964844, "Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.": 0.9523859620094299, "No": 0.664158284664154, "A header file consists of \"reusable\" source code such as a class in a file that by convention has a .h filename extension. This differs from .cpp files that contain \"source-code.\"": 0.9354106783866882, "To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.": 0.9672207236289978, "the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.": 0.9426864981651306, "Header files declares the class member functions.": 0.9405601620674133, "A header file allows for the separation of declaration and implementation into separate files.": 0.9548269510269165, "the header file has access to the C++ Standard Library and makes certain classes like class string work.": 0.9562158584594727, "\u201cInstruct\u201d the compiler on how to interface with library and user-written components.": 0.9191797375679016, "create a comon area to contain reusable functions.": 0.9289431571960449, "to declare the functions being used in the classes": 0.8782897591590881, "#include \"hat.h\"  allows the use of the hat container, so called from the act of pulling names from a hat.  The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().": 0.9511855840682983, "To hold reusable content or modules separate from the actual  source-code file that can be easily referenced and employed for different programs.": 0.9619547724723816, "a header file is a file used to store a list of prototye functions and data members.": 0.9376779794692993, "A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.": 0.9653871655464172, "It contains reusable source code for use by other classes.": 0.9364672303199768, "to separate the source code from the main function, allows the methods/classes to be included in the program without direct coding. allows re usability.": 0.9674308896064758, "Header files have reusable source code in a file that a programer can use.": 0.8959485292434692, "To hide the definition and details of a class.  Also to help readability of the main C++ file.": 0.9470364451408386, "To allow the compiler to recognize the classes when used elsewhere.": 0.9604113698005676, "A header file declares a class, its data, and functions available through that class.": 0.9639856219291687, "header files contain code which can be used in multiple files": 0.9054045677185059, "Allow compiler to recognize the classes when used elsewhere": 0.9413644671440125, "To promote function reusuablitly": 0.9135833382606506, "class definitions are placed here": 0.9004298448562622, "A header file usually contains class and/or function prototypes.": 0.958798885345459, "contains all the standard C++ library's i.e. string": 0.8954752683639526, "It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.": 0.9631103873252869, "it includes the specific information about the function such as input and output variable types and how many of each.": 0.9410061240196228, "The function signature includes the name of the function and the types of its arguments.": 0.9788080453872681, "A function signature consists of the function prototype.  This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.": 0.9540241956710815, "It includes the name of the function and the types of its arguments.": 0.9710384607315063, "Name, paramaters, scope, and other general function information": 0.9179627299308777, "It includes a function name and parameter list. Does not include return type. Function signatures must be different.": 0.9626590609550476, "input parameters and return type": 0.9108640551567078, "The portion of the function prototyp tha has the function name and the arguments but NOT the return type.": 0.9616860747337341, "Name of the function and the types of it's arguments": 0.9375207424163818, "The name of the function and the types of its arguments.": 0.9885911345481873, "Includes the name of the function and the types of its arguments.": 0.9714477062225342, "identification of a function and the data types of its parameters, it has the name, and the data type variables ": 0.9444209933280945, "a return type, and input parameters": 0.9409360885620117, "The function signature includes the method name and the input types.": 0.9734000563621521, "A function signature includes the name of the function and types of arguments, but not the return type.  ": 0.9737834930419922, "The signature can include a result type and thrown errors.": 0.9209184050559998, "function name, and input paramaters": 0.9116857647895813, "The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.": 0.9813981056213379, "the name of the function and the types of its arguments": 0.9428425431251526, "A function signature includes the name of the function and the types of its arguments": 0.9484829306602478, "A function signature includes a function's return type, parameters and semi-colon.": 0.9434489011764526, "the function's name and parameters": 0.9085990190505981, "The portion of a function prototype that includes the name of the function and the types of its arguments": 0.9256515502929688, "the name of the function and its parameters": 0.9217349290847778, "The function name and parameters": 0.9661070704460144, "name of function and types of arguments": 0.9428425431251526, "a function's return type and parameter list": 0.9173068404197693, "it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures. ": 0.975006639957428, "Any functions that follows their deceleration that  are in the source code file are allowed to have access the variables.  Also global scope variables retrain their value throughout the execution of the program.": 0.8632597327232361, "they can be accessed by any C++ file anywhere.": 0.8782912492752075, "Global variables have file scope.": 0.958568274974823, "The scope of global variables are created by placing variable declarations outside any class or function definition.  Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.": 0.8422943353652954, "A global variable is an identifier that retains it's value throughout the execution of the program. It has file scope.": 0.8873184323310852, "Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included": 0.8184435963630676, "They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.": 0.875236988067627, "can be accesed by any classes that have and object of that variables class in it": 0.6680364608764648, "Global variables have file-scope.  The variable is know to all functions throught the file": 0.8879732489585876, "The entire program": 0.7019469141960144, "They have file scope when placed outside a function.": 0.9048846960067749, "File scope.": 1.0, "They can be used throughout the program": 0.7287628054618835, "Global variable can b accessed by any class wit an object in the variables class": 0.7676079273223877, "The scope of global variables is at the file level.": 0.938900351524353, "Global variables all have file scope.": 0.958568274974823, "it is accessible by all functions within a program": 0.7225448489189148, "variables accessible anywhere in the program, as long as they are public.": 0.817145586013794, "They can be referenced by any function following their declaration or definition inside the source file.": 0.865847110748291, "globally, anywhere in the program.": 0.8368218541145325, "Global variables have a file scope": 0.8289085030555725, "The entire program.": 0.8370760083198547, "throughout the execution of the program": 0.7042074799537659, "If a variable is declared global, any function or class can use that variable.": 0.8415796160697937, "The entire program or file.": 0.9047752618789673, "throught the programm": 0.6445741057395935, "the whole code": 0.7203247547149658, "File scope": 0.8450356721878052, "can be referenced by any function that follows their declarations or definitions in the source file": 0.7925378084182739, "global variables have program scope (accessible anywhere in program)": 0.7173210978507996, "variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.": 0.8493884205818176, "It expands the function's definition in that place.  Once the functions is called you can use it as many times as you need.  The compiler just expands on the function.": 0.9754758477210999, "When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code \u2014 optimize the called code into the caller.   ": 0.9677982330322266, "The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.": 0.9672011733055115, "The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.": 0.922779381275177, "Placing the qualifier inline before a function's return type in the function definition \"advises\" the compiler to generate a copy of the function's code in place to avoid a function call.": 0.9653354287147522, "You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.": 0.9648755788803101, "It expands a small function out... making your code longer, but also makes it run faster.": 0.9661945700645447, "the function is not treated as a separate unit like other functions": 0.9385237097740173, "When the program compiles,it will copy the function inplace, avoiding a function call.": 0.9717739224433899, "It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.": 0.9652775526046753, "Ignores the inline qualifier and typically does so for all but the smallest functions.": 0.9137019515037537, "If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.": 0.9680168032646179, "it treats them as the same function": 0.884743332862854, "Inline functions are copied in place, instead of being referenced.": 0.9287173748016357, "For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.": 0.9830374717712402, "it generates a copy of the function's coding which eliminates calling the function": 0.9468623995780945, "not answered": 0.8199310898780823, "It generates a copy of the function's code by by inserting it in the program.": 0.9651045799255371, "tells the compiler to make a copy of function's code in place to avoid a function call.  it typically ignores it, except for the smallest functions.": 0.9834613800048828, "Multiple copies of the function code are inserted into the program, making it bigger.": 0.9669318795204163, "compiler ignores inline qualifier": 0.7680810689926147, "It generates a copy of the function, if it is needed again.": 0.9701423645019531, "The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.": 0.9528321623802185, "Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call": 0.9637988209724426, "instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body": 0.9709922075271606, "Expands the function into the program": 0.9219555258750916, "it generates a copy of the functions code in place to avoid a function call": 0.9698464274406433, "the function call will be replaced by the code that was defined in the inline function": 0.9400564432144165, "When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code \u2014 optimize the called code into the caller. ": 0.9677982330322266, "Overall the program has better performance (means it is faster) because it does not have to copy large amounts of data.": 0.9422847032546997, "because you can't change the original and passing by reference limits memory needed for the program.": 0.9451594352722168, "Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.": 0.9640072584152222, "It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.": 0.9667212963104248, "Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.": 0.953527569770813, "You do not alter the original value of the variable that was passed.": 0.9427328705787659, "Don't have to make copies of stuff.": 0.9355822801589966, "you do not use unessesary memory space to copy variables between functions": 0.9233006834983826, "It elimitates the need to copy large amonts of data": 0.9322475790977478, "The function can change the data stored in a variable passed by reference directly.": 0.955390989780426, "Gives called function the ability to access and modify the caller\u2019s argument data.": 0.9591185450553894, "Gives called function the ability to access and modify the caller\u2019s argument data directly.": 0.9618260264396667, "It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.": 0.9506158232688904, "you don't make another copy and waste memory": 0.908665657043457, "Passing by reference eliminates the copying of large amounts of data, typical with pass by value.": 0.9666988849639893, "If a function's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function.  Also pass by reference gives the function called the permission to read edit the argument directly.": 0.9642475247383118, "Gives access to the caller data directly, also it allows for modifying the data.": 0.9579530954360962, "less overhead overall, and you modify the variable directly.": 0.9447419047355652, "The original variable being referenced can be modified directly by the called function.": 0.9460424184799194, "gives function ability to access and modify the caller's argument data directly": 0.9429526925086975, "Gives the called function the ability to access and modify the caller's argument data directly.": 0.9585146307945251, "Less overhead than passed by value, especially when using large numbers.": 0.9570441246032715, "large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed ": 0.9530555009841919, "The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.": 0.9735112190246582, "Functions can directly modify arguments that are passed by reference.": 0.9371191263198853, "It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata": 0.961956262588501, "it takes less memory, thus it would make the program faster": 0.9347899556159973, "You are able to modify the variable that is referenced directly.": 0.936765193939209, "if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value": 0.9167016744613647, "only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.": 0.9516366124153137, "Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram": 0.9304279088973999, "The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.": 0.971466064453125, "They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.": 0.9199674725532532, "The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.": 0.9683996438980103, "Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.": 0.9383755922317505, "The compiler selects proper function to execute based on number, types and order of arguments in the function call.": 0.9768866300582886, "By the type they are initilized with (int, char, etc.)": 0.9391511082649231, "It selects the proper function to execute based on number, types and order of arguments in the function call.": 0.9770864248275757, "overloaded functions must have the same return type but different input parameters": 0.9265484809875488, "It examines the names, types, and order of arguments on each function.": 0.9641839861869812, "unique function signatures": 0.9337344765663147, "Is based on number, types, and order of arguments in the function call.": 0.9787310361862183, "Compiler selects proper function to execute based on number, types and order of arguments in the function call.": 0.9718910455703735, "they have to have same return type, but different input parameters": 0.936427652835846, "Overloaded functions are differentiated by their parameters.": 0.8871514797210693, "The compiler selects the right function to execute from the number, types and order of arguments in the function call.": 0.9757327437400818, "it creates a set of candidate functions then a set of viable functions": 0.8792970180511475, "their function signature.": 0.9619255661964417, "The number and type of its parameters.": 0.9432209134101868, "by their function signature": 0.9322090148925781, "They have the same name, just different parameters.": 0.9467421770095825, "They are differntiated by number, types and order of arguments in the function call.": 0.9765987396240234, "it looks at the number, types, and order of arguments in the function call ": 0.969368577003479, "The compiler differentiates overloaded functions by their signature.": 0.9340542554855347, "By the number, types, and order of their arguments": 0.9438344836235046, "paremeters": 0.5119020342826843, "By the number, and the types and order of the  parameters.": 0.953728199005127, "by the number and type of arguments": 0.9042694568634033, "by their signature (return type, argument list)": 0.9375195503234863, "overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.": 0.9514946341514587, "A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.   ": 0.9622926115989685, "badly designed algorithyms. using recursion for a non recursive problem.": 0.9413832426071167, "Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.": 0.9778221845626831, "Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes \"indefinite\" recursion, eventually exhausting memory.  ": 0.9740278124809265, "Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion.": 0.97014319896698, "Not having a base case that returns a base value.": 0.9583137035369873, "Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).": 0.9734717607498169, "no base case no change in values.": 0.9461005926132202, "If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.": 0.9426711797714233, "Omitting the base case or incorrectly calling the recursive step.": 0.9668384194374084, "The recursive problem cannot be reduced to reach the base case.": 0.9667161703109741, "Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case": 0.9603254795074463, "Not having the proper case to leave the recursion": 0.9223034381866455, "no base case, or the recursive calls do not converge to the base case": 0.9344443678855896, "No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.": 0.9726261496543884, "If the recursion function never reaches or successfully defines the base case it will recurse forever.  This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.": 0.9750891327857971, " not creating a base case, or in the case where the base case will never be met.": 0.9590036869049072, "improper handling of cases such that not all possible values are able to be handled.": 0.9416393041610718, "There is no base case. The recursion step doesn't reduce the problem during each recursive call.": 0.9656440615653992, "no base case, as in a single return that does not include calling the function again.  a static value to end at.": 0.9563179016113281, "Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.": 0.9706189036369324, "omitting the base case or writing the recursive call so that it does not converge upon the base case.": 0.9634400606155396, "Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case": 0.953125, "Infinite recursion may occur if no base case is defined or if the call is not varied.": 0.9655011296272278, "Not having a base case, or building a recursion process that doesn't converge on the base case.": 0.9639700651168823, "Either omitting the base case, or writing the recursion step incorerectly ": 0.9094025492668152, "no base case or if the programmar does not define the base case as the simplest case and it never gets reached": 0.9602081179618835, "No easily reached base case and no base case at all": 0.9480129480361938, "function is never allowed to reach the 'base case'": 0.9197624921798706, "it has no base case, or the base case is never met": 0.941591203212738, "recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes": 0.9480732083320618, "Both involve a controlled repetition structures, and they both have a termination test.  Also both of them can loop forever. ": 0.9618860483169556, "As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.": 0.9330328702926636, "Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.": 0.9639122486114502, "Both are based on a control statement         - Iteration-repetition structure         - Recursion-selection structure        Both involve repetition         -Iteration-explicitly uses repetition structure         -Recursion-repeated function calls        Both involve a termination test         -Iteration-loop-termination test         -Recursion-base case         Both gradually approach termination         -Iteration-modifies counter until loop-termination test fails         -Recursion-produces progressively simpler versions of problem        Both can occur indefinitely         -Iteration-if loop-continuation condition never fails         -Recursion-if recursion step does not simplify the problem": 0.9050778746604919, "Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.": 0.966352105140686, "Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.": 0.946703314781189, "Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.": 0.948123037815094, "anything you can do iterativly you can do recursively": 0.7004873156547546, "Both are repetative and both have a end test.": 0.8875946402549744, "Incorrectly writing either can result in infinite loops, both perform the same task over and over.": 0.931424081325531, "Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.": 0.9584211111068726, "Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely": 0.9553554654121399, "anything you can do recursively you can do iteratively": 0.6985201239585876, "Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.": 0.9491336345672607, "Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit.  So both involve a termination test to find that limit and both slowly approach that termination limit.  Both are based on a control statement as well.    If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.": 0.95982825756073, "both based on control statement, involve repetition, and involve a termination test within loops": 0.9592334032058716, "they are methods of repeating the same task.": 0.9161186814308167, "Both involve a termination test.   They use a control statement and repition to solve the problem.  They can also result in an infinite loop.": 0.9535703659057617, "based on a control statement, involve repetition, involve a termination test.": 0.9618251919746399, "Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.": 0.9602586030960083, "both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.": 0.9598727226257324, "they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely": 0.9611260294914246, "They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.": 0.9603480696678162, "Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their  termination requirements are not met.": 0.977684736251831, "both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely": 0.969464123249054, "they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached (its called the base case in recursion).": 0.93644779920578, "Based on control statement;  involve repetition; involve a terminal test; both can occur infinitly": 0.9756836891174316, "repetition, termination test, eventually terminate, occur infinately": 0.9550869464874268, "both need to have some kind of base case to tell when the loop needs to stop.": 0.9303793907165527, "they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through": 0.9336887001991272, "int n[10]; //array of 10 integers and int n[arraySize] //where arraySize is some positive integer defined by the user": 0.8814660906791687, "by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.": 0.9299342036247253, "You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.": 0.956982433795929, "Pass the length along with the array or use a vector.": 0.9358140826225281, "One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.": 0.9569371938705444, "In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}": 0.9138069152832031, "1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)": 0.9177412986755371, "statically and dynamically": 0.7056631445884705, "Explicitly int array[10]; or by variable const int size = 10; int array[size];": 0.8878670930862427, "Array lengths can be explicitly specified by inputing the number of elements between the brackets [ ] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [ ], the compiler will automatically declare the array with the proper number of elements needed for the list. ": 0.9574412107467651, "Specify an arrays size with a constant variable. And setting array elements with calculations.": 0.939658522605896, "statically, using {} and dynamically, using []": 0.9192287921905518, "define it as array[5] or array[1,2,3,4,5]": 0.7761120796203613, "Static and dynamic.": 0.903509795665741, "manually inside the brackets or automatically via an initializer list": 0.9042888283729553, "You can use an initializer list, or simply tell the compiler how many elements you want in the array.  For an Initializer list:  int a[] = {10, 2, 3, -4, 5};  For an elemental declaration: int b[5];  Both arrays have 5 elements in them, but array a is already initialized.": 0.9477502703666687, "In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program. ": 0.9498535394668579, "Implicit, namely when you give it values, like {1,2,3,4,5,6,7,8,9}, at which the compiler will automatically give this a size. Static, during the declaration. ": 0.9560280442237854, "Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n[5]; int n[] = { 1,2,3,4,5 }": 0.9147639274597168, "either initializing the array with a specific length or initializing an array while declaring its contents.": 0.9234244227409363, "within the brackets or by using an initializer list.": 0.9697735905647278, "specify the number of elements in the array declaration with a constant or using a constant variable for future scalability": 0.9047690629959106, "with a number and with a variable": 0.8500499725341797, "explicitly, by declaring it in brackets (i.e. int array[50];) and implicitly, by initializing several values (i.e. int array[] = {1, 2, 3};)": 0.9329171776771545, "one way of specifying of array is A[10] ; other way of specifying array is a[arraysize] = [1,2,3,4,5,6,7,8,9,10}": 0.8562370538711548, "1-Initializing an array in a declaration with an initializer list 2-Specifying an arrays size with a constant variable": 0.9023549556732178, "Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};": 0.8914883732795715, "user defined value or by the number of elements in initializer list": 0.9139612317085266, "you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to {1,2,3}": 0.9051558375358582, "use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has. ": 0.9592240452766418, "strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole": 0.928645670413971, "the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they're accessed.": 0.942468523979187, "Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.": 0.9399774074554443, "All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example:  string s; ": 0.9598919749259949, "By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.": 0.9450646638870239, "type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays)": 0.9028937816619873, "They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.": 0.9566642045974731, "string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.": 0.9335398077964783, "By using an array of characters, you are limited to the size of the array of characters.  By declaring by type the end of the string is acknowledged by white space.": 0.9499627351760864, "The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly. ": 0.9477304220199585, "string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.": 0.9245606064796448, "A char array reads a string as each individual character. A string literal array reads the entire string.": 0.948772668838501, "array of characters can only hold as many characters as the array size and strings are not that limited.": 0.9053843021392822, "Stings can only be modified by functions of the String class, an array of characters can be modified by the user": 0.8886128067970276, "if by type string, the array contains an additional terminating null character": 0.9177343845367432, "The array of characters has a null character \\0 at the end of the array to signify the array's end.  The string does not have this.": 0.9651862978935242, "strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.": 0.9410985708236694, "the array of characters has a set length, while the type string has virtually unlimited length.": 0.9232427477836609, "Char array - Individual letters can be accessed directly with array subscript notation.  String array - array subscript will return the entire string.": 0.9254875183105469, "array of characters need a termination character as well as size specification whether its explicit or implicit.": 0.9231743812561035, "when using an array individual characters can be accessed and manipulated.": 0.8650271892547607, "strings declared using an array of characters could result in data loss if character array not initialized large enough.": 0.9057382941246033, "an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable": 0.9082235097885132, "the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.": 0.8997722268104553, "declaring a string, it includes white spaces but declaring a array of character does not include white spaces": 0.8920638561248779, "an array of characters has one element a string doesnt have. it is the termination element, or \"null\"": 0.9442094564437866, "Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.": 0.9174530506134033, "cant modify individual characters of a type string array, character type array can modify individual characters": 0.8708176016807556, "the type string is a class and is safer, while the other is just an array of characters.": 0.9181855320930481, "array  it is the collection of similar data types ex:int a[10]  ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a.  where as string mean collection of group of characters.  string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols.    However  Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type ": 0.9447157382965088, "by reference only": 0.8236235976219177, "a reference pointer to an element in the array.": 0.865009605884552, "Arrays are passed to functions by reference.": 0.9453780055046082, "Arrays are passed by reference.": 0.9453780055046082, "you must pass the array and its size to the function. Ex. function(array, size);": 0.7877470254898071, "Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array.  Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome.  Otherwise, would need to send the length of the array as well.": 0.7905523180961609, "you pass a pointer to the first item and also pass the size.": 0.794590175151825, "By reference.": 0.9555566906929016, "In two parts, the array itself, and it's size, so that the function it's being passed to can avoid out of bounds errors.": 0.7792918682098389, "Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.": 0.7907094955444336, "the same way but with [] at the declaration and the actual function.": 0.7984049916267395, "specify the array name without brackets.": 0.7745766639709473, "by reference": 0.8236235976219177, "You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jingle(bin); but jingle must be declared correctly in order to receive an array, either with prototype void jingle (int []); or with the definition in its initialization: void jingle (int array[]);  It's also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory.  This gives the function complete control over the array however.": 0.7779028415679932, "They are called by the function then the function must loop through the array to get the set of characters.": 0.7465640902519226, "by reference by default, unless you specify const, at which the later will make the array unmodifiable.": 0.834011971950531, "The function recieves both the array and the array size as parameters. function(arrayName, arraySize)": 0.7361339926719666, "specifying array name and passing as reference in an argument into the function": 0.7576379776000977, "1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.": 0.7413272261619568, "arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array": 0.7440754175186157, "by refrence": 0.5845396518707275, "function( int [], int length)": 0.7424870729446411, "The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array. ": 0.7903175354003906, "a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time.  if you don't declare it static then the new values will not be stored and will be reset to their original value": 0.9629893898963928, "a static array can only be referenced not accessed. Also static arrays can be used without creating an object.": 0.9457432627677917, "An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.": 0.9634710550308228, "A program intializes static local arrays when their declarations are first encountered.  If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created.  Non-static array members cannot be initialized at all in C++.": 0.9603310823440552, "Arrays that are static remain the same size throughout the program execution.": 0.9641525149345398, "a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.": 0.9158448576927185, "An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.": 0.9539360404014587, "a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.": 0.939311146736145, "If an array is declared as static, it is not created each time the array is called.": 0.9278408885002136, "An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it's elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.": 0.9798811078071594, "All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays  ": 0.9455648064613342, "All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.": 0.9217138290405273, "static cannot be changed": 0.7629998326301575, "A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.": 0.9540205597877502, "A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).": 0.9518461227416992, "A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array's elements will still be the same when called later unless specifically initialized to something else.  This doesn't happen for automatic arrays.": 0.9688623547554016, "Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes. ": 0.9646978378295898, "static arrays keep the values after the end of a function, while non static reinitialize every time.": 0.9508265256881714, "Static arrays are created and initialized only once, and the values aren't destroyed  when the function terminates in the program. Automatic arrays reset everytime the function is called.": 0.9726433753967285, "its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.": 0.9684219360351562, "When we declare it static the array is not destroyed after the function is over.  When an array is not declared as static, the array is created and initialized every time a function calls it.": 0.9685819149017334, "the static array exists for the duration of the program": 0.8688756227493286, "an array declared as static can only be declared once": NaN, "A static array exists in memory until the program terminates, whereas an automatic (or normal) array is removed when the function that created it terminates": 0.9591792821884155, "Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized": 0.9652834534645081, "A static array cannot be changed in the program.": 0.9288922548294067, "static arrays are available throughout the program": 0.8954892754554749, "a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.": 0.9543185830116272, "if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.   ": 0.9548571705818176, "at least 2, depending on how many arrays are being used.": 0.9298593401908875, "all of them.": 0.7967057228088379, "When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.": 0.9655271768569946, "It depends what parameters you are passing in a multidimensional.  A multideminsional can have more than two dimensions.": 0.9176725745201111, "The first dimension is not required however the subsequent dimension(s) are needed for the compiler.": 0.9142590761184692, "all but the first": 0.7806342840194702, "All of the dimensions must be specified.": 0.9315926432609558, "just the first one at least.": 0.9517792463302612, "Two paramaters, the array and how many columns.  array(a[],[3])": 0.8745752573013306, "The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2][4][6] with the name MultiArray would be passed as: \"MultiArray[][4][6], 2\"": 0.9037662744522095, "Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension": 0.9071732759475708, "Every dimension after the first.": 0.9409176707267761, "both": NaN, "the size of the first dimension does not need to be specified, but all other dimensions do.": 0.9465170502662659, "when passing (in main) a multidimensional array to a function, no dimensions need be specified": 0.8560536503791809, "All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension.  The size of the first dimension does not need to be specified.": 0.9553278684616089, "as many as there are dimensions. Most commonly just rows and columns": 0.888422429561615, "at least 2, but it should always equal the number of dimensions that the argument is expecting... like...  blah[][][][] will require 4 dimensional array input. blah[][][] will require a 3 dimensional array. blah[][] will require a 2 dimensional array.": 0.8654540181159973, "None, just pass the array name.": 0.9269691109657288, "all subsequent dimensions after the first dimension.  first is not needed to be specified.": 0.9505600333213806, "all dimensions, excluding the first one.": 0.9596678614616394, "all dimensions but the first": 0.7806342840194702, "the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][])": 0.8481130003929138, "one less than the number of dimensions the array contains": 0.8948747515678406, "All subsequent dimensions after the first one.": 0.9726808071136475, "two or more": 0.683539092540741, "1 less than the total number of dimensions": 0.8474950194358826, "Multi dimensional arrays are accessed using more than 1  index, one for each dimension at least. ": 0.9142217636108398, "Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.": 0.9565767645835876, "Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.": 0.9295944571495056, "The sorted array or list is built one entry at a time.": 0.9397014379501343, "It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.": 0.97257000207901, "Compare two numbers at a time and swap until the entire list is sorted.": 0.948757529258728, "Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.": 0.9528834223747253, "insertion sort is were after k iterations the first k items in the array are sorted it take the k+1 item and inserts it into the correct position in the already sorted k elements.": 0.9490087628364563, "Looking at the 2nd element move forward and place the element in the correct spot.": 0.9594933390617371, "Starting at the beginning of an array, take each element in order and place it in it's correct position relative to all previously sorted elements. ": 0.9654926657676697, "To sort the elements in an array by removing an element from the input data and inserting it at the correct position.": 0.9459043741226196, "Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.": 0.9580647945404053, "Take a number and choose a pivot point and insert the number in the correct position from the pivot point.": 0.9074497818946838, "have a marker and sort everything to the left of the value for every new value when moving to the right.": 0.9653794765472412, "The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.": 0.972560465335846, "Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.": 0.9706707000732422, "it goes through the list only once, picking each integer and putting it in its desired position, then continuing. ": 0.9557657837867737, "Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.": 0.9576933979988098, "Insert the item into its proper position by shifting larger sorted array values to the right.": 0.9715195894241333, "a comparison sort in which the sorted array is built one entry at a time": 0.9178747534751892, "Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.": 0.947501540184021, "Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.": 0.9675925970077515, "the insertion sort creates a new array and inserts each item in its place with respect to the new array.": 0.9356516003608704, "Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted.": 0.9536377191543579, "it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on... ": 0.962189257144928, "Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.": 0.9570589661598206, "one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items": 0.9321275949478149, "you take each element and insert it in the correct position with respect to all the elements before it": 0.9400526285171509, "Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array (or list) is built one entry at a time.": 0.9411731362342834, "Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front": 0.9647601842880249, "Selection sort searches the whole array for the largest item and puts it at the end of the array, then searches for the second largest item and puts it at the second to last spot and so on.": 0.9595609307289124, "Finds the minimum value and swap it with the value in the first position.": 0.9570068717002869, "It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.": 0.9792187809944153, "Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.": 0.9476495385169983, "Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.": 0.9340088963508606, "find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until  the array is sorted.": 0.967930257320404, "Find the smallest and put it in the current position till you get to the end.": 0.9375520348548889, "Find the lowest unsorted value in the array and place it at the current position (starting at the first element in the array) and advance the \"current\" position by one. ": 0.9628462195396423, "To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array.": 0.9672032594680786, "Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.": 0.9489462375640869, "Select the minimum number from the array and put it in the current position, then move on": 0.9582625031471252, "Find the lowest value and place it in the front of the list and swap it with that value. Continue moving right.": 0.9559647440910339, "The main idea behind selection sort is to take the least variable from the right and put it directly to the left.": 0.9414041042327881, "Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.": 0.9582595229148865, "It runs through and finds the lowest (or highest) value and puts it in its desired position.": 0.9403748512268066, "Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.": 0.9507938623428345, "Search for the largest item in an array and swap it with the last unsorted item.": 0.9474479556083679, "finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.": 0.9646911025047302, "Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted": 0.9487410187721252, "Select the smallest number in the list and move it to the front of the list and then advance to the next number.": 0.9429168105125427, "the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted.": 0.9552167057991028, "Selection sort finds the smallest number left unsorted in an array, and puts it at the end of what it has sorted": 0.9621562957763672, "selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position": 0.958685576915741, "To put the biggest element at the end of the list and place the next highest element behind it, and so on.": 0.9505007863044739, "the sort finds the largest item and places it at the end, then then next largest is found and placed next to last, continue until there is only one number left, this is the beginning of the sorted array": 0.9489983916282654, "you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.": 0.9727073311805725, "Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list(starting in the second position.": 0.9589357376098633, "The run time for this sorting program is n^2.  Best case is the list is already sorted, worst case is the list is sorted but in reverse. ": 0.9431850910186768, "Insertion sort is O(n) and performs n-1 operations in the best-case scenario, which is when the list or array is already sorted.": 0.9720503687858582, "The number of operations for insertions sort, under best-case, is  n(n-1)/2. The best case for insertion sort is on a sorted list where it runs is O(n). ": 0.9644948244094849, "Best case would be O(n) or n-1, because that's what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.": 0.9597396850585938, "Best case-1 Worst Case-N": 0.7353203892707825, "It will do (n) operations where (n) is the number of elements in the array. Best case is when all the elements are already sorted.": 0.9737117290496826, "O(n)": 0.9059658050537109, "Best case is all elements sorted. n-1.": 0.9274737238883972, "The best case scenario for an insertion sort, where all the elements of the array have been already sorted, will cause the for loop to iterate \"x\" times (\"x\" being the number of elements in the array) and the while loop to never have to iterate, resulting in the insertion sort to require \"x\" operations. ": 0.9430112242698669, "1 operation. the best case scenario s where it is already sorted and does one comparision.": 0.9239562749862671, "n operations, where n is the number of items.": 0.8954044580459595, "n-1": 0.42644888162612915, "O(n), the list is already sorted.": 0.953863799571991, "Insertion sort will take n-1 operations if the array is in reverse order.": 0.935032308101654, "In the best case scenario of an already sorted list, insertion sort will progress once through the list.  So the number of operations is directly proportional to the number of elements in the list.  Also noted as O(n) in big o notation. ": 0.9552679657936096, "1 where there is a list of two ints and only one must be moved.": 0.9102801084518433, "Best case is N, while the worst case is N factorial.": 0.9185531139373779, "n-1 The best case is when the array is already sorted.": 0.9514908194541931, "worst case its = O(n) time best case its = O(n^2) time": 0.9372575283050537, "N number of times.  Where N equals the number of elements in the list.  Best-case scenario is that the elements in the list are already sorted.": 0.9470677375793457, "the best case scenario for insertion sort is a list that is already sorted. the number of operations would be the same as the number of elements": 0.9314008355140686, "insertion sort will make zero operations (and length - 1 comparisons) in the best case scenario, that is, when the array its given is already in order.": 0.9559308290481567, "theta(n) the best case senario is that everything is already sorted": 0.9513572454452515, "n operations  The best case scenario is when all the numbers are in increasing order.": 0.9339643716812134, "it could be considered that having only one item would be the easiest to sort, but this could also be a trivial result as nothing is moved  having two items allows the algorithm to sort the items into the correct order": 0.9172690510749817, "the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and doesn't have to make any changes (the list is already sorted)": 0.9444715976715088, "very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is (0)1": 0.9455938339233398, "The base case for a recursive merge sort is one number.  One number by itself is a sorted list, regardless of what number it is.": 0.9160513877868652, "The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements.": 0.9344208240509033, "The base case for a recursive implementation of merge sort is one.": 0.8549128174781799, "The best case is the same as the worst case O(n log n) for a recursive merge sort.": 0.9137553572654724, "there is one object in the split array to sort.": 0.9044895768165588, "The base case is when the length of the current array is 1.": 0.9274024367332458, "O(nlog(n))": 0.9026803970336914, "Best case is one element.  One element is sorted.": 0.8965877294540405, "If the array being sorted has 0 or 1 elements": 0.9434405565261841, "T(n) = 0, if n&lt;2.": 0.900200605392456, "A list size of 1, where it is already sorted.": 0.9431690573692322, "Single element in the array": 0.8124780058860779, "n * log( n )": 0.8822219967842102, "A list or array of only 1 element.": 0.9416464567184448, "where you only must merge sort once": 0.712928295135498, "A single Element on the Array.": 0.8902793526649475, "There is only one element in the subarray.": 0.8340339064598083, "if the array length is less than or equal to 1, then that array is returned to the other array and merged together": 0.9353611469268799, "if (right &gt; left)   {     mid = (right + left) / 2;     m_sort(numbers, temp, left, mid);     m_sort(numbers, temp, mid+1, right);      merge(numbers, temp, left, mid+1, right);   } ": 0.94062739610672, "The sequence of numbers has zero or one elements.": 0.9144231081008911, "one element in an array": 0.8722105622291565, "array of length 1": 0.9308426976203918, "the array has one element": 0.8722105622291565, "When there is only one element in the array, or when the starting element in the array is the same as the ending element.": 0.9173001646995544, "when each half or the original array has nothing else to sort, and puts the halfs back together": 0.9133492112159729, "the size of the list being sent is &lt;= 1": 0.8998955488204956, "O(n log n)": 0.8828679919242859, "Its a location in memory that contains the memory address of another location in memory that contains information.": 0.9541016817092896, "A pointer is a variable that contains a memory address as its value.": 0.9904454946517944, "A pointer is a variable which stores the address of another variable.": 0.9896990060806274, "Pointers are variables that contain as their values memory addresses of other variables.": 0.9276746511459351, "A data type whose value refers to another value stored elsewhere in the computer memory using its address.": 0.9705175161361694, "a pointer holds a memory location": 0.8749334812164307, "a name that represents actual location or value of a data type. int *bPtr points to an integer value.": 0.9415283799171448, "A variable that stores the address of another variable": 0.9780932068824768, "a pointer is a programming language data type whose value refers directly to (or points to) another value stored elsewhere in the computer memory using its address": 0.9367746710777283, "A data type whose value refers to another value stored somewhere else in the computer memory using its address.": 0.9678459167480469, "It is like a variable however instead of holding data, it holds a location in memory.": 0.950590193271637, "A pointer is a reference to a location in memory": 0.8884343504905701, "A pointer is a reference to the memory location of an object.": 0.9349921941757202, "A pointer is a variable that contains the memory address of a variable that has a value.": 0.99085533618927, "It is a variable that contains not only a *value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.": 0.9774309992790222, "Contains a variable's memory address as a value.": 0.9782649278640747, "variable that points to the memory address of another variable and it is type specific.": 0.9779354929924011, "An element that references a memory cell": 0.9155309200286865, "Is a reference call to the place in memory where the object is stored.": 0.9444554448127747, "a variable that contains the address of another variable": 0.9805541634559631, "A pointer variable contains the number of a memory address as its value, which may be null or 0, or the address of some value stored in memory.": 0.9804583787918091, "A pointer is a variable that contains a memory address of anther variable": 0.97910076379776, "A variable that contains the memory address of another variable that contains a specific value.": 0.995047390460968, "a variable with a memory address as the value": 0.9498239755630493, "it is a type that points to something else. It is the memory address of something else": 0.9357038736343384, "A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory.": 0.9634274244308472, "This operator returns the memory address of its operand.": 0.9684422016143799, "The address operator returns the memory address of its operand.": 0.9832911491394043, "Returns memory address of its operand.": 0.9698398113250732, "The address (&) operator returns the memory address of its operand.": 0.9832911491394043, "Returns the memory address of its operand.": 0.9698398113250732, "returns the place in memory of that element": 0.8723520040512085, "The address of the where the data is stored: &b will return the address of b.": 0.8886446356773376, "The & operator returns the address of a variable": 0.8835081458091736, "the ampersand (&) means \"pass by reference\". When the function is called, a pointer to the variable, instead of the variable itself, will be passed into the function.": 0.9320985078811646, "& returns the memory address of its operand.": 0.9698398113250732, "the address of the variable in memory": 0.8632906079292297, "Returns the address location in memory of the item.": 0.9410787224769592, "The & operator returns the memory address of the variable it precedes.": 0.9524890780448914, "The memory address of operand, 0x000000 or something along those lines. ": 0.9702785015106201, "The object's memory address.": 0.9630970358848572, "the reference to a variable": 0.7742857933044434, "returns the memory address of its operand": 0.8923207521438599, "memory address of its operand": 0.8842670917510986, "returns the address number of the specified variable": 0.8639723658561707, "It returns the memory address of it's operand. That is, if applied to a normal variable, it gives the variable's memory address, just as a pointer variable might.": 0.9541729688644409, "The & is a unary operator that returns the memory address of its operand": 0.9220569729804993, "the address of the variable it is attached to": 0.8533258438110352, "the memory address of its operand": 0.8842670917510986, "returns the address of what it is put in front of": 0.8465403914451599, "returns a pointer": 0.8056440949440002, "returns a synonym for the object to which its pointer operand points.": 0.9582273364067078, "The star operator returns a synonym for the object to which its pointer operand points.": 0.9686003923416138, "Returns synonym for the object its operand points to.": 0.955918550491333, "It returns a synonym, alias or nickname of the name of the object that its operand points to in memory (dereferencing the pointer).": 0.9870166182518005, "Returns an alias/nickname for the object to which the pointer operand points.": 0.9330482482910156, "the * operator returns the value in the memory address the element points to.": 0.9444662928581238, "The * returns the value": 0.8810582160949707, "The * operator returns the dereferenced pointer variable (ie: it returns the value of whatever variable the pointer is pointing to)": 0.924782931804657, "The dereferencing operator returns the dereferenced object.": 0.9403194785118103, "* returns the synonym for the object its operand points to.": 0.955918550491333, "it returns the information in the address the pointer points to.": 0.9239838719367981, "the star operator returns the value at the memory address the pointer is pointing at.": 0.9392023682594299, "The star operator returns the object at that memory location.": 0.9487977027893066, "The * operator returns the value of the object's memory address it precedes.": 0.9565064907073975, "The value of the object that the operand points to": 0.9270036220550537, "The value stored in the object being pointed to.": 0.9392455220222473, "the value of the variable the pointer points to.": 0.9212456941604614, "returns synonym for the object its operand points to": 0.9097707867622375, "synonym for the object its operand points to": 0.8828751444816589, "Returns synonym for the object its operand points to": 0.9097707867622375, "It dereferences a pointer, meaning it returns the value stored in the memory address a pointer refers to.": 0.9535064697265625, "It is unary operator that returns the value of the variable located at the address": 0.9234333634376526, "a reference to a = variable": 0.8152193427085876, "a synonym for the object to which its pointer operand points": 0.9037290811538696, "it returns the actual data at the address pointed to": 0.9155411720275879, "will return zero or many characters placed before the operator": 0.8717563152313232, "The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.": 0.9575673341751099, "An array can be addressed in pointer/offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.": 0.9654918909072876, "Element b[ n ] can be accessed by  *( bPtr + n ).": 0.901459813117981, "Using either the name of the array as a pointer or using a separate pointer that points to the array.": 0.9324243068695068, "An element b[3] can be referenced by using *( bPtr + 3) instead.": 0.9187028408050537, "you get the memory location of the first element and the you add an offset to it to get other elements.": 0.9510031342506409, "yes *(array +offset)": 0.8026192784309387, "The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer \"a\" which stores the address of a[0].": 0.939186155796051, "Element b[ n ] can be accessed by  *( bPtr + n ) is an example of how an array can be addressed as pointer/offset notation.": 0.9086048603057861, "*(array + element)": 0.8644294738769531, "*f[3]": 0.7235626578330994, "you can have a pointer to the front of the array and add to the memory location (or offset from the initial value).": 0.9423131942749023, "The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.": 0.9790881276130676, "With int x[10]; int *xPtr; xPtr = x; Address &x[1] is the same as xPtr + 1.": 0.8994361162185669, "Takes the number of array elements and points to each at a time": 0.9002030491828918, "The array can act as a pointer or be referenced by a pointer.  *(arrayPtr + 3) or *(array + 3)": 0.9124201536178589, "by using the *(pointer + element-index)": 0.8799235224723816, "using the star operator.   array: b[n] can be accessed by *(bpointer +n)": 0.9102864861488342, "Element A[n] can be accessed by *(APtr + n)": 0.9023520946502686, "by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)": 0.9482899308204651, "First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity's address plus some offset. i.e. ptrToArray = array;  nthEntity = *(ptrToArray + n);": 0.9576613306999207, "&[b3] is as bptr + 3. Array can be treated as pointer": 0.9267725348472595, "a[i] = *(a+i)": 0.8095590472221375, "&b[3]  bPtr + 3": 0.8533584475517273, "*(arrayName + index)": 0.8934662342071533, "multi-dimensional array": 0.22202734649181366, "the number of bytes of an array during program compilation.": 0.9367424249649048, "The sizeof operator returns the size of the operand.": 0.9786995649337769, "Returns size of operand in bytes.": 0.9819257259368896, "It returns the size of an array in bytes.": 0.9657821655273438, "Returns the size of the array in bytes during the program compilation.": 0.9488720893859863, "it returns the size of the argument passed in": 0.9219093918800354, "The byte size of the date stored ina variable.": 0.9603512287139893, "sizeof returns the size of the operand in bytes": 0.9393300414085388, "The amount of memory required for a specific parameter such as ints, doubles.": 0.9559825658798218, "sizeof returns the size of the operand in bytes.": 0.9819257259368896, "the size of the information in bits.": 0.9345001578330994, "the size of the string.": 0.9418407082557678, "sizeof returns the size in bytes of the respective object.": 0.9661427736282349, "The sizeof operator returns the total number of bytes of its operand.": 0.9651079773902893, "The size of an operand in bytes. Used with variable names, type names, and constant values": 0.9701075553894043, "the size in bytes needed to store the object in memory": 0.9294856786727905, "the size of the list object.": 0.9411813020706177, "the sizeof operator returns the size in bytes of an array parameter": 0.9097601175308228, "the size of operand in bytes": 0.9450616240501404, "returns the size in bytes of the specified data": 0.9190982580184937, "It returns the size of an operand in memory, which is checked at compiler-time.": 0.9574770927429199, "Return size of operand in bytes": 0.940858781337738, "the total number of bytes of an object.": 0.9342386722564697, "total number of bytes in the array": 0.8626598715782166, "it returns the size in bytes of a certain variable type": 0.9453416466712952, "it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type": 0.9480295181274414, "They can be passed by value or by reference": 0.8755007982254028, "Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.": 0.9928869605064392, "Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.": 0.9956437945365906, "Pass-by-value or pass-by-reference.": 0.5524508357048035, "you can pass a pointer to a pointer or pass a reference to pointer.": 0.7539744973182678, "by address &bPtr or directly bPtr.": 0.8223937153816223, "Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. ": 0.9928869605064392, "By argument and reference.": 0.8559518456459045, "Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.": 0.9928869605064392, "pass by value and pass by reference with reference or pointer arguments.": 0.8565452694892883, "you can pass them with the pointer (*) or the memory address (&)": 0.8055757880210876, "nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const": 0.8022909760475159, "Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data": 0.9506984949111938, "Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.": 0.9373447299003601, "Pass by reference with reference arguments. function(int &)  Pass by reference with pointer arguments. function(int *)": 0.8729351162910461, "you can pass the reference or the dereference in a function": 0.7056754231452942, "1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data.  4. Constant pointer to constant date.": 0.9547532200813293, "constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data": 0.9884663820266724, "Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data": 0.9488503336906433, "Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.": 0.895347535610199, "There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.": 0.9537257552146912, "nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data": 0.9488503336906433, "pass by value, pass by reference with reference arguments, pass by reference with pointer arguments": 0.8701171278953552, "you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither": 0.8890517354011536, "there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function": 0.890833854675293, "A pointer that points to the memory address of the beginning part of a functions.  pretty much the pointer points to the function so it can be called to execute.": 0.9298215508460999, "A function pointer is a pointer that contains the address of the  function in memory.": 0.9645287394523621, "Function Pointers are pointers, i.e. variables, which point to the address of a function.": 0.8836703896522522, "A pointer to a function is the address where the code for the function resides. They can be passed to functions, returned from functions, stored in arrays and assigned to other pointers.": 0.9545530080795288, "It contains the address of the function in memory.": 0.9618878960609436, "when it is dereferenced a function pointer calls its function with zero or more arguments.": 0.9183179140090942, "a pointer to a function": NaN, "A pointer to a function itself, contains the address of the function and can be used to call that function": 0.9471567869186401, "A pointer to a function that contains the addresses of the function.": 0.932274580001831, "a pointer that contains the address of a function": 0.8963140249252319, "a function pointer is a pointer to a function. It can be used in substitution for calling a function.": 0.9186456203460693, "Points to the memory address of a function.  Kind of like breaking a branch off of a tree object and hitting other objects with it.": 0.9632695913314819, "They are pointers that contain the addresses to functions, they can be passed and returned from functions, as well as stored in arrays and assigned to other function pointers.": 0.9306923747062683, "Pointer variables that point to function addresses.": 0.9152011871337891, "Contains the address of the function in memory.": 0.9564472436904907, "a pointer that points to a function itself, which allows passing a function as a parameter to another function.": 0.9200020432472229, "pointers that contain the addresses of functions.": 0.8872076272964478, "is a pointer that contains the address of a function": 0.8963140249252319, "a pointer that contains the address of the function definition": 0.9116198420524597, "A function pointer contains the memory address of a function. Using a function pointer, a function can be passed to or returned by another function. Function pointers can also be stored in arrays.": 0.9546679854393005, "Function pointer is a pointer to a function. function pointer contains address of functions": 0.8811686038970947, "a pointer that contains the address of a function in memory.": 0.9564472436904907, "it contains the address of the function in memory": 0.9269974231719971, "it is a pointer that points to the address of a function.": 0.8342280387878418, "When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.": 0.9545210599899292, "Consists of sequence of nodes, each containing a number of data fields and one or two links called pointers that point to the next or previous nodes. ": 0.9372583031654358, "A linked list is a list in which each item in the list points to the next item in the list.": 0.903420627117157, "A linked list is a chain of structs or records called nodes and you have the ability to add, delete, or retrieve items. ": 0.9465444087982178, "A list of elements, or nodes, that are linked to one another such that each element points to the next element.": 0.9458750486373901, "A sequence of nodes, each containing data fields (specified by programmer) and pointer(s) which can point to the next or previous nodes.": 0.9376736879348755, "a list of nodes where each node contains a data member and also a pointer to the next node.": 0.9274453520774841, "A list of items linked together.  Each item is linked to its successor.": 0.9395303130149841, "A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.": 0.9431715607643127, "one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (\"links\") pointing to the next and/or previous nodes. ": 0.9477465748786926, "A data structure in a sequence of nodes, each containing arbitrary data fields and one or two references (\"links\") pointing to the next and/or previous nodes.": 0.9372434020042419, "Information in memory linked to the next piece of information and can only be linked forwards and not backwards.": 0.9077950119972229, "A linked list is a data structure that is not necessarily in the same contiguous memory space (such as arrays). It holds the data type and points to the next data item in the list, or in a doubly linked list also to the previous item.": 0.9481905102729797, "A linked list is a data structure containing one or more data elements with a pointer to the next node.": 0.9496017098426819, "A series of \"Nodes\" structures with a value and a pointer that point to a similar \"Node\". Not quite an array, but still can carry a list of values. ": 0.9337355494499207, "A data type that contains a pointer to at least the next  element in a list.": 0.9404670000076294, "Each component contains a Node - a data item and a pointer to the next item in the list": 0.9144881367683411, "A linked list is a chain of structs or records called nodes.  Each node has at least two members, one of which points to the next item or node in the list.": 0.9448769092559814, "An array based list that uses an implicit ordering scheme, often using pointers.": 0.9478467106819153, "a series of structures containing data items and a pointer that links the structure to the next structure.": 0.926125705242157, "A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list (and the previous object in the case of a doubly linked list)": 0.9408389925956726, "A link list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together": 0.9362196326255798, "its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element": 0.876929759979248, "linear collection of self-referential nodes connected by pointers.": 0.927812397480011, "the items of a data structure are linked to each other using pointers": 0.8666558265686035, "A list of objects where each object contains a link to the next item in the list": 0.9229774475097656, "A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (\"links\") pointing to the next and/or previous nodes.  ": 0.9501966834068298, "Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be.": 0.9181745648384094, "Unlike arrays, linked lists can insert and delete without shifting data and change in size easily.": 0.9299473166465759, "Array size is fixed,but Linked is not fixed.": 0.9583050608634949, "You can insert into and delete items from a pointer-based linked list without shifting data.": 0.8775230050086975, "Arrays must be of a defined size... elements can be added to a linked list w/o defining any size.": 0.9361116886138916, "The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk, allowing the list of items to be traversed in a different order. A linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type. Linked lists permit insertion and removal of nodes at any point in the list in constant time": 0.9249070286750793, "You can expand when you need it.  You do not have to predetermine the size.": 0.9257582426071167, "Linked lists are able to grow and shrink in size as needed": 0.9174718856811523, "Linked list is able to grow in size as needed. Does not require the shifting of items during insertions and deletions": 0.9394065737724304, "A linked list is not fixed in size, and does not require the shifting of items during insertions and deletions.": 0.948115348815918, "There is no limit as to how many you create where an array can only hold a given amount of information.": 0.9294834733009338, "Linked lists have constant time insertion and deletion": 0.8889355063438416, "Linked lists can be grown dynamically, items don't require shifting, and they have a greater awesome factor than that of arrays.": 0.9529194831848145, "Linked lists have an indefinite size. They can be added to and taken away from very easily with little difficulty in the shifting of data.": 0.9412978887557983, "Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.": 0.9434929490089417, "They grow as needed, while arrays are of fixed size.": 0.9516522884368896, "Does not have a fixed size. Linked list is able to grow as needed. The time to access an array bases list takes a contant amount of time where as an linked-base like depends on 'i'": 0.9526209831237793, "Linked lists can grow and shrink as you need them to.  Arrays have a fixed size.": 0.9563242793083191, "more memory can be allocated on the fly for more items": 0.8295676112174988, "A linked list may be increased in size as needed, while an array's size is set when it is created": 0.9233731031417847, "Array has a fixed size, but linked list is able to grow in size as needed": 0.9336971640586853, "its resizeable": 0.5821238160133362, "Linked lists do not have a set size and can grow or shrink as needed.": 0.9379131197929382, "linked lists are abe to grow as needed to a new size": 0.8797776699066162, "The size is not fixed, easier sorting because of no shifting, easier to insert items into the list": 0.9340139031410217, "The size of array is restricted to declaration. Insertion/Deletion of values in middle of array is not possible.": 0.9533258676528931, "Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node.": 0.9440804123878479, "Arrays require less memory than linked lists and allow direct access to a specified item. Also, insertion and deletion in arrays does not require a list traversal.": 0.9747098088264465, "Access to a particular element is very fast, because its location in memory can be determined mathematically and accessed directly.": 0.9718935489654541, "Arrays are good for random access and good for sequential access which are both in constant time. Where linked lists are linear for random access. Arrays are faster in this case.": 0.9455659985542297, "An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.": 0.9720519781112671, "On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.": 0.9639170169830322, "You have to keep up with the head of the list.": 0.9170745611190796, "Arrays are easier to implement and require less memory": 0.9266965389251709, "Linked list has an increase complexity of the implementation. The linked list has an array that keeps growing which leads to a increase in memory.": 0.9553045034408569, "You don't have to iterate through the entire list to access elements.": 0.9435632824897766, "you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.": 0.9064692258834839, "Take up less memory and are contiguously stored": 0.8941553831100464, "Arrays, being fixed, are less error prone.": 0.9592794179916382, "Arrays have a set list of values. Meaning you can pick a spot in the array such as a[7] picks the 8th spot in the array. With linked lists you have to keep track with pointers if you want to take specific nodes out, otherwise you must traverse the entire list. ": 0.964873194694519, "direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted. ( like getting the last element without a pointer directly to the end of the list. )": 0.9759224653244019, "Array items are accessed directly with equal access time": 0.9318851828575134, "Array-bases implementations require less memory than a pointer-bases one.": 0.9164247512817383, "You can access specific elements quickly in an array.  In a linked list you must traverse the list to get access the same element.": 0.9676808714866638, "link lists only allow sequential access where arrays allow random access": 0.9074102640151978, "Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects": 0.9647747278213501, "Array based implementation requires less memory than lined lists based implementation": 0.9406153559684753, "Array-based implementations require less memory than a pointer-based ones": 0.8747562170028687, "You can go up and down an array , but you can only go one direction while traversing a linked list.": 0.9388366341590881, "arrays allow for the random access of any item cotained a any time, linked lists must be gone through toget to the desired item": 0.9490063786506653, "In arrays you have direct access to each element, but in linked lists you have to traverse the list up to the element that you need.": 0.963256299495697, "Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.": 0.9750180840492249, "They are passed by reference because you want the function to change the pointer": 0.8469004034996033, "Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.": 0.9036295413970947, "- A function with access to a linked list's head pointer has access to the entire list.        - Pass the head ponter to a function as a reference argument.": 0.8894569873809814, "By using a node.": 0.895889937877655, "Pass-by-reference": 0.21631450951099396, "you send a pointer to an object of the LinkedList class": 0.7895640134811401, "Passed as a pointer to the head.": 0.8848334550857544, "Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list": 0.7958204746246338, "You have to pass the head pointer to a function since it has access to the entire list.": 0.8622785210609436, "You pass the head pointer to a function as a reference argument.": 0.9021658301353455, "passes a pointer to a linked list object": 0.7693912982940674, "The linked list object contains the head, through which the other elements are accessible.": 0.8637996315956116, "By the head of the list. It takes the head address and traverses from there on in.": 0.8889036774635315, "as a pointer node.": 0.8740290999412537, "A method with access to a linked list's head pointer as access to the entire list": 0.8031425476074219, "A function with access to a linked list's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument": 0.8649948239326477, "the head pointer is passed to a function as a reference argument.": 0.9203563928604126, "the pointer to the first element is passed to a function": 0.7440997362136841, "linked lists are passed by reference, specificly the Head pointer": 0.871726393699646, "Pass the head pointer to a function as a reference argument": 0.8432592153549194, "by refrenece": 0.4930475652217865, "By passing the head pointer and going through the list as needed inside the function.": 0.8767738342285156, "linked lists are passed by using pointers": 0.6694495677947998, "the head object is passed to the function": 0.7325175404548645, "Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. ": 0.8561993837356567, "In a circular linked list, every node has a successor which means that the last node's successor is the head or first node.": 0.9407394528388977, "A circular linked list is a linked list that links items in a continuous circle. This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required.": 0.9342606663703918, "In a circular linked list, the last node points to the first node.": 0.9601410627365112, "On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.": 0.9800437688827515, "the circular linked list's last node points to the begining of the list while a standard linked list points to NULL": 0.9281425476074219, "The last item in the list points to the head": 0.9626458287239075, "In a circular linked list, the last node points back to the first node, there is no NULL": 0.953934371471405, "Circular linked lists are most useful for describing naturally circular structures, and have the advantage of regular structure and being able to traverse the list starting at any point.": 0.9279687404632568, "A circular linked list has the last node point back to the head of the linked list.": 0.9677087068557739, "Basic linked list points to a NULL at the end and circular points to the head at the end.": 0.9191846251487732, "in a circular linked list the the last item points to the first item.": 0.9415798187255859, "The circular linked list's tail points to the head, whereas the basic linked list's tail points to a NULL.": 0.9673452973365784, "a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning": 0.8796729445457458, "how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.": 0.9475348591804504, "No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.": 0.9469490051269531, "The difference between a circular linked list and a basic linked list is that a circular linked list, the last node references the first node. Every node in a circular linked list has a successor and no node in a circular linked list contains NULL.": 0.9377108812332153, "No node in a circular linked list contains NULL.": 0.8942978382110596, "in a circular linked list the last element points to the head of the list": 0.9517733454704285, "In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list": 0.9634413719177246, "In circular linked list each node has successor, no node contains NULL, while in basic linked list last node contain NULL.": 0.9204942584037781, "in a circular linked lists, the last element points to the first": 0.954361081123352, "A circular linked list does not have a last element. Instead, it's last item points to the head of the list.": 0.975755512714386, "in a circular linked list, the last node contains a pointer that goes back to the first node; in a basic linked list, the last node contains a null pointer ": 0.9255322813987732, "in a circular linked list, the last object is linked back to the first object.": 0.9304402470588684, "In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move.  In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.  ": 0.9265653491020203, "they can traverse in both directions": 0.8542450070381165, "In a doubly linked list you can delete a node without having to traverse the list.": 0.9194716811180115, "A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer.": 0.934229850769043, "A doubly linked list allows you to traverse the list in either direction. Each node points to its successor as well as to its predecessor.": 0.9394810199737549, "Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.": 0.9509879350662231, "you can traverse the list from front to back and back to front": 0.8367283940315247, "You can traverse the list in reverse.": 0.9082367420196533, "Doubly linked lists can be traversed in both directions": 0.8956090807914734, "Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions.": 0.9519993662834167, "You can traverse forwards and backwards through nodes.": 0.9109711647033691, "You can point both forwards and backwards": 0.8570981025695801, "You can go backwards in the linked list and access previous data easier without having to keep track of the previous item": 0.9250246286392212, "Doubly linked lists allow backward movement through the nodes.": 0.926359236240387, "they have double pointers, so each node can point forwards or backwards. Making it a little easer to get to where you need. ": 0.9419463276863098, "ability to backtrack through a list.": 0.842164933681488, "You can move forwards and backwards in the double-linked list. Basic only moves forwards.": 0.9123947620391846, "The advantage is that each node points to bothe its predecessor and its successor. There are no special cases for insertion and deletion.": 0.9442244172096252, "each node points to both its predecessor and its successor.": 0.8815932273864746, "a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back": 0.9183675646781921, "A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish": 0.9300411343574524, "Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction": 0.9278726577758789, "given a node in the list, one can navigate easily in either direction": 0.9222486019134521, "You can traverse the list both forward and backwards.": 0.9038419127464294, "a doubly linked list allows you to back up from a node rather than having to go through the entire list again": 0.9246535897254944, "Gives faster times for some operations such as insertion and deletion": 0.92801433801651, "The primary disadvantage of doubly linked lists are that (1) each node requires an extra pointer, requiring more space, and (2) the insertion or deletion of a node takes a bit longer (more pointer operations).": 0.9400562047958374, "they take up twice as much memory for each node": 0.8826001286506653, "In a doubly linked list, there are more pointers to set and the mechanics of inserting and deleting are more difficult. Also, the special cases at the beginning or end of the list are more complicated.": 0.9484720826148987, "There are more pointers to set, the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list.": 0.9241546392440796, "Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms.": 0.9160252809524536, "Need more memory to store \"previous\" pointers.": 0.9139971137046814, "a node in a doubly linked list takes up more memory than a node in a singly linked list.": 0.8901364207267761, "You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting/deleting.": 0.9220118522644043, "Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes": 0.9234764575958252, "Double-linked lists require more space per node, and their elementary operations are more expensive": 0.9156737923622131, "More difficult to delete and create nodes.": 0.9161928296089172, "They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.": 0.9479034543037415, "nodes take up more memory": 0.854798436164856, "Each node requires an extra pointer (space requirements increased), Insertion or deletion of a node takes a longer (more pointer operations).": 0.9325315952301025, "its a little more confusing. The special cases at the end and beginning become more difficult to do.": 0.9300839900970459, "increased actions to add and remove elements to the linked list.": 0.9234207272529602, "Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.": 0.9223398566246033, "The main disadvanate is that if hard to remove all items in the list.": 0.9172081351280212, "each node requires an extra pointer, taking up more storage.  insertions and deletions require more pointer operations.": 0.9509151577949524, "in a doubly linked list there are twice as many pointers for each element , therefore more memory is used": 0.9032545685768127, "The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list": 0.8936092853546143, "Double linked lists require more space per node, and their elementary operation are more expensive": 0.9274680614471436, "1- each node requires an extra pointer, requiring more space 2- the insertion or deletion of a node takes a bit longer, more pointer operations": 0.9281255006790161, "It takes up twice the storage needed.": 0.9226739406585693, "using more pointers to enable the backward movement takes up more memory, having more pointers make it slightly more work to add or remove a node from the list": 0.9396478533744812, "increased memory requirements, slightly more complicated when modifying elements in the list": 0.9118624925613403, "A data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways.": 0.9640936255455017, "A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack.": 0.9685875773429871, "Stores a set of elements in a particular order.": 0.9351142644882202, "An ADT whose most recently inserted item is the first item removed or retrieved. This property is called last in, first out (LIFO). Items enter and leave a stack at its top.": 0.9646983742713928, "A list in which only the top (or last item added) can be modified.": 0.9660186767578125, "a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.": 0.9631292223930359, "A data structure that stores data using LIFO.": 0.9500806331634521, "A stack is similar to an array, but does not allow for random access. Stacks only allow a user to retrieve the last item put into the stack. Last in, fist out.": 0.9310559630393982, "Stores a set of elements in a particular order. Stack principle: LAST  IN  FIRST  OUT. It means: the last element inserted is the first one to be removed.": 0.9599359035491943, "A stack is an ADT that stores a set of elements in a particular order.": 0.9487426280975342, "a data type that stores a set of elements in a certain order, last in, first out.": 0.9655882716178894, "a data structure that moves elements in last in first out": 0.9467861652374268, "Stores a set of elements in a last in first out order.": 0.9512197375297546, "A list that can be added to or removed from only from the top.": 0.9385809898376465, "a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not support ( at least in the pure stack) peeking at a element without removing the rest of the stack first.": 0.9791002869606018, "Stores a set of elements in a particular order based on the principle of Last In First Out (LIFO).": 0.9665840864181519, "an object list that stores elements in a particular order, the first object inserted is at the bottom with the last object at the top so the first object in is the last object out.": 0.9550805687904358, "An ADT that stores a set of elements in a particular order. The stack principles are LIFO. The last item inserted in the list is the first out.": 0.9563486576080322, "An abstract data type that stores a set of elements in a particular order.": 0.961651086807251, "a collection of data to be executed in the order of last in first out": 0.9439555406570435, "A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a \"Last in First Out\" structure.": 0.9657058715820312, "Stores a set of element in a particular order": 0.9252408146858215, "is a list of element where the first one to be removed is the last one inserted": 0.9495964646339417, "A data structure that puts elements in a list and only allows the user  access to the last element.": 0.9584332704544067, "a finite ordered list with zero or more elements": 0.9180856347084045, "A storage container that holds objects in a certain order, which has a LIFO priority": 0.9411910176277161, "Stacks are a type of container adaptors, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from the end of the container.": 0.9712860584259033, "Push and pop are two main functions defined in a stack": 1.0, "Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack.": 0.8773948550224304, "Push and pop.": 0.9449731111526489, "Pop function and Push function": 0.8887179493904114, "push and pop.": 0.9449731111526489, "push (insert an item) pop (remove an item)": 0.8343555331230164, "Adding a new item and removing the item": 0.7593470215797424, "Push (insert) and pop (retrieve).": 0.851223349571228, "Push and Pop.": 0.9449731111526489, "pop and push": 1.0, "push (add an element) pop (remove an element)": 0.8395162224769592, "push ( to add to a item the Stack) Pop  ( to pull the last item added from an array. )": 0.8450278639793396, "push and pop, push puts an object into the list, and pop takes the last object off.": 0.9219124913215637, "Push and Pop are the two main functions of a stack": 1.0, "Push and Pop": 1.0, "push, which adds an element to the stack... and pop which takes an element off the stack": 0.8766100406646729, "Push and Pop, which add and remove data from the stack, respectively.": 0.8942668437957764, "push and pop": 1.0, "pop - to remove item push - to insert an element": 0.8594731688499451, "Pop and push": 1.0, "push - adds an item to the top of the stack pop - removes the top item from the stack": 0.8270726203918457, "push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack": 0.9032553434371948, "An array has a fixed size.  You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added.  Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array.": 0.9719164967536926, "By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. You increment top when an element is pushed and you decrement it when an item is popped.": 0.9507690072059631, "If you use a dynamically allocated array, you must provide a destructor and copy constructor.": 0.9154342412948608, "Create a int value that stores the \"head\" of the stack. Increment the top when one element is pushed and decrement after it is popped.": 0.9547557234764099, "Use a pointer that always points to the end of the array list for push/pop modifications.": 0.9175063967704773, "if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.": 0.9429531693458557, "You predetermine the size of the stack as you would an array.  This type can not grow.": 0.9447575807571411, "Declare a variable that points the last item in the array, which increases (++) when items are pushed onto the stack, and decreases (--) when an item is popped off the top.": 0.9472807049751282, "Allocate an array of some size. The bottom stack element is stored at some element. Last index in the array is the top. Increment top when one element is pushed, decrement after pop. ": 0.9570473432540894, "You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head.": 0.9476904273033142, "Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad": 0.9559891223907471, "treat the beginning of the array as the beginning of the stack": 0.9134553670883179, "Use an index value called top to keep track of the last element in the array.": 0.9581295251846313, "create an array and implement pointers that point to the next list item down and stack them up.": 0.8942795991897583, "for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.": 0.9671804904937744, "Create an array based on a pre-defined size N There can't be more elements than N.  Bottom stack element stored at element 0 last index in the array is the top  Increment top when one element is pushed, decrement after pop": 0.9486005306243896, "with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array": 0.9399816989898682, "Allocate an array of some pre-defined size. Bottom stack element stored at element 0. The last index in the array is the top. Increment top when one element is pushed.": 0.9536543488502502, "Create an array, size N.  N++ when one element is pushed.  N-- when one element is popped.": 0.9397569894790649, "define an array and keep track of a pointer to the last element as items are added": 0.930992603302002, "By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the \"top\" tracking integer is incremented.": 0.957735002040863, "Allocate an array of some size, bottom stack element stored at element 0": 0.9025565385818481, "you store the stack in the array but you have to keep in mind the first element": 0.9245708584785461, "You keep track of the last item entered into the array and do not  allow the user access to the other parts of the array.": 0.9547860622406006, "using arrays, you are pushing one int at a time into the stack until you get to the end of your array": 0.9637265205383301, "by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list": 0.9535022974014282, "Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. ": 0.9679083228111267, "You can add an element to the end of the linked list and update a pointer called top each time you modify the list.": 0.9687572717666626, "You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to.": 0.9620438814163208, "This is the implementation of the stack using single linked list.   The operations performed on a stack are    1)push(): This is the function which is for insertion(pushing)of an element into stack                      It is similar to the insertion of an element at the end of a single linked list                   see  the function insert_end() in the program for operations of single linked list    2)pop(): This is the function which is for deletion(popping up) of an element from the stack             It is similar to the deletion of an element at the end of a single linked list       see  the function delete_end() in the program for operations of single linked list    3)stack_display():This is the function which is for displaying the elements of a stack": 0.9410746097564697, "Using nodes to keep track of the head of the stack. Then using Push( ) and Pop ( ) to create the stack as needed.": 0.9581194519996643, "Use the head as the top of the stack, only modify the head when you push/pop... push would add a new item to the head, pop would remove the item from the head.": 0.9774714112281799, "you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.": 0.9456964731216431, "You dynamicly create space as the stack grows.  The stack can be as long as you need.": 0.9530859589576721, "Declare a pointer that points to the head of the linked list, only add and remove nodes from the beginning of the list.": 0.9714049100875854, "Creating a linked list. Add an element to the top of the stack when pushing and deleting an element when popping.": 0.9664686322212219, "A singly-linked list is already a lot like a stack, it just depends on the way you address moving the head.": 0.9555961489677429, "make a list, make the bottom the head, add on the end and make the end top": 0.9453365802764893, "use the add function with a list as the beginning of the stack and remove for pop": 0.9460605382919312, "Use head as the top and push and pop nodes from the head.": 0.974794864654541, "create a node based list that points to the next list item down.": 0.9188506603240967, "have the head of the list be the last item added, and a push just adds a new head.": 0.9740868210792542, "Create a new list.  Pop elements in the stack as needed.  Push the stack to remove items, unless the stack is empty.  The top item is at the head of the list. The last item is at the end.": 0.9725636839866638, "adding the element to the end of the list so that it links to the element before it. when popping the element it takes the last element in the list and sets the previous one as the end of the list.": 0.9388111233711243, "You can implement a stack using arrays or and linked list. By the use of pointers, that point element(node) to the next element in the stack. By the use of pointers, the stack becomes a linked list.": 0.9477552771568298, "Elements are only inserted and removed from the head of the list.  There is no header node or current pointer.": 0.9583315849304199, "use a linked list and keep track of a pointer that points to the first item": 0.9203745722770691, "A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.": 0.9690279364585876, "using pointer": 0.8281691074371338, "the top is the first pointer.": 0.900580108165741, "Keep a pointer pointing to the last element entered at the front of  the array and move the pointer \"back\" when you delete an element.": 0.9566078782081604, "using linked list, you are pushing the node that contains each int to the stack until you get to the end of your linked list": 0.9643654227256775, "have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.": 0.9814691543579102, "Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you'll want to create files stack.h and a stack.c": 0.9615529775619507, "They are converted to post fix expressions.  It still follow the order of precedence for the operators.": 0.9479220509529114, "They are first converted to postfix expressions and then evaluated.": 0.9617043733596802, "Computers cannot evaulate infix expressions, it must first convert infix to postfix expression then it can evaluate.": 0.9753902554512024, "By using parentheses to have order in the expression.": 0.9204487204551697, "In postfix notation.": 0.924905002117157, "computers usually convert infix expressions to post fix expression and evaluate them using a stack.": 0.9461385011672974, "they are converted to postfix": 0.8260054588317871, "Infix expressions are interpreted as postfix expressions by implementing stacks.": 0.954691469669342, "They are first converted into an equivalent postfix expression so it can be read by the computer.": 0.9690706729888916, "The computer translates the infix expression to a postfix expression, then solves.": 0.9640514254570007, "in postfix format": 0.6889333724975586, "they use parenthisis and a stack to determine which evaluations need to be made first": 0.9145417809486389, "By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered.": 0.9236191511154175, "by being passed to the function by a leading term": 0.8994230628013611, "i have an hard time explaining this so i'll show how infix is evaluated instead. Start with an infix expression, like,  (((5+2)*5)+(400/(2+3))), and  push items until you get a \")\" and once that happens, perform the operations until you reach an \"(\"... with that complete, you will now have  ((7*5)+(400/(2+3))) as now the expression that will be evaluated... perform last step again... (35+(400/(2+3))) is now the stack.... repeat agian... (35+(400/5)) is now the stack after that.... repeat... (35+80) is now the stack, repeat again... 115 is now the stack, and is returned.": 0.9021517038345337, "The infix expression is converted to postfix form": 0.956220805644989, "by converting them to postfix expressions and putting the operations in a stack": 0.9255420565605164, "The computer converts the infix expression to postfix form. Then evaluates the postfix expression.": 0.9740100502967834, "infix expressions are converted to postfix expressions before they can be evaluated by a computer.  Operands stay in the same order.  Operators always follow the operands.": 0.9661207795143127, "infix expressions are pointers evaluated by reference to the memory location": 0.7653096914291382, "computers convert infix expressions to postfix form before evaluation": 0.9272353053092957, "convert infix expressions to postfix expression and evaluate the postfix expression": 0.9173839092254639, "When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack": 0.9248702526092529, "Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.": 0.9543015956878662, "infix expressions are converted to postfix, (i.e. 3+2 is changed to 32+)": 0.9172526001930237, "they are transformed into post-fix expressions, then evaluated with a stack.": 0.937756359577179, "Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in \"a + b\").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written \"+ a b\".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written \"a b +\".  (You may have seen this as \"reverse Polish notation\".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations. ": 0.9582335948944092, "isEmptry()//determines if the stack is full or not pop()//to remove the top element if it is not the on you are looking for search()//you compare each element of the stack to the data you are looking for.": 0.8974748849868774, "You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for.": 0.9448375105857849, "Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack.": 0.9563418626785278, "Using linked lists and stacks, you would need a temp stack to retain the values. Then you would use the Pop( ) function to pop off each element and then compare it. If its not the element your looking for, Push ( ) it to the temp stack. Repeat until the element is found. When you find it,  Pop ( ) off the temp stack back onto the regular stack to have a complete stack again.": 0.970390260219574, "Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.": 0.9718806147575378, "if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.": 0.9682280421257019, "You need to pop each item on the stack and compare the item.  Once the item is found, no more items need to be removed.": 0.9594184756278992, "Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. When finished, pop the items from the second stack and push them back onto the first stack (this will ensure the order of the elements is maintained).": 0.9826675653457642, "Basically pop the stack until you find the given element.": 0.9209636449813843, "Iterate through the stack, checking the number against the current element.": 0.9408147931098938, "pop all elements off stack until you find that element and then push the popped elements back on the stack": 0.9691672921180725, "Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack.": 0.9783992767333984, "either traverse the entire list and pop the given part or create a pointer system that automatically points to it.": 0.9329625964164734, "Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed.  With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.": 0.9802069067955017, "if top item != given element pop the stack. Repeat until item is found or stack is empty": 0.949781060218811, "could traverse through the list/array to find the element.": 0.8770759701728821, "you need the pop opertation to go throught the stack and find the element.": 0.9373544454574585, "createStack, push, isEmpty, pop, and a boolean return value.": 0.9466236233711243, "you would have to traverse the stack popping each element to search it": 0.9406625628471375, "Pop each element off the stack (and into another stack for storage) until the desired element is found.": 0.951291024684906, "pop operation": 0.9056667685508728, "to pop elements then push them back": 0.96656733751297, "A function to keep track of the elements popped and a function to put  the popped elements backinto the function.": 0.9496771693229675, "you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost": 0.934617280960083, "you would need to perform a search through the list of elements (i dont really understand what this question is asking....its not very clear?)": 0.9518386721611023, "StackPush() StackPop() StackIsEmpty()": 0.7456748485565186, "A data structure in c++ which is a collection of data that is kept in order.  First in first out.": 0.9526633620262146, "a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on.": 0.9471379518508911, "A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior.": 0.9570581316947937, "A queue stores a set of elements in a particular order.  Its principle of operation is FIFO(first in first out), which means the first element inserted is the first one to be removed.": 0.9656288027763367, "An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.": 0.9640904664993286, "Last in, last out architecture. It works the same way a line at the bank would work, the person that's been waiting the longest gets served first.": 0.9563496112823486, "a queue is a data structure that stores elements in a First in First out order.": 0.9527230858802795, "A waiting list of items that operation in a FIFO (first in first out) order.": 0.960604727268219, "A queue is similar to an array, except that the data can only be accessed sequentially rather than at random. Unlike a stack, a queue follows FIFO. First in, First out.": 0.958264946937561, "is a particular kind of collection in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position. First in First Out (FIFO Method).": 0.9720459580421448, "Like a linked list but first in first out": 0.9122537970542908, "A queue is a FIFO data structure.": 0.9409778714179993, "A queue is a first in first out data structure.": 0.9437041878700256, "Its like a stack, but uses the linked list to stack a little differently. It's FIFO so the first thing enqueued is the first thing dequeued": 0.94344162940979, "A first in, first out Abstract Data type that can be used to store values.": 0.9691189527511597, "Stores a set of elements in a particular order with a First In, First Out principle": 0.952414333820343, "object that stores elements in order that follows first in first out.  the first element added is the first one to come off.": 0.9433555603027344, "A quese is an list that stores a set of elements in a particular order. It has Stack principle, but in this case, its \"First In, First Out\". The first element inserted is the first element to be removed.": 0.9629602432250977, "a finite ordered list with zero or more elements, based upon First In First Out": 0.9551264047622681, "a data structure that performs operations in the order of first in first out FIFO": 0.9246553182601929, "A Queue is a \"first in first out\" data structure, such that the first element added is also the first removed.": 0.959916889667511, "Queue is a buffer, which store element in a particular order": 0.9393281936645508, "stores a set of elements where the first element in, is the first element to be removed": 0.9305933713912964, "A data structure that removes nodes from the head and adds nodes at the tail.": 0.949659526348114, "a queue is a list of things that follows the first in first out behavior": 0.9037031531333923, "a queue is a storage container that holds its objects in a first in, first out priority": 0.9408174753189087, "The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear (end) of the line and customers come off of the line (i.e., are serviced) from the front of the line.": 0.9671982526779175, "enqueue which adds data to the queue and dequeue which deletes data from the queue": 0.736815333366394, "enqueue , which inserts a specified element at the head of the specified queue, and dequeue , which removes the specified element from the queue.": 0.6379758715629578, "The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.": 0.6895989179611206, "The two main functions are enqueue and dequeue.": 0.8200732469558716, "Enqueue and Dequeue": 1.0, "enqueue - insert into queue dequeue - remove element": 0.7071763873100281, "Remove the item added first, add items to the back.": 0.5572299957275391, "The two main functions of a queue are enqueue and dequeue.": 0.8200732469558716, "enqueue and dequeue.": 0.8779209852218628, "enqueue and dequeue": 1.0, "enque ( Data ),  Deque ( )": 0.6170920729637146, "The two functions are, Enqueue and Dequeue": 0.8384195566177368, "enqueue, dequeue": 0.9160399436950684, "enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue": 0.690862238407135, "Enqueue and dequeue, which add and remove elements from the queue": 0.7560049295425415, "dequeue and enqueue": 1.0, "enqueue dequeue": 1.0, "rear and front": 0.504439651966095, "Make use of a front pointer and a tail pointer.  When the tail pointer reaches the end of an array it gets reset to the front of the array.  If the two pointers are equal then the queue is either full or just has one element.": 0.9703200459480286, "you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure.": 0.9527649283409119, "By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array.": 0.9517624974250793, "For applications in which a fixed-sized queue does not present a problem, you can use an array to represent a queue. ": 0.9338829517364502, "Keep track of the front and the back of the array as you increase and decrease the elements inside the array.": 0.9599700570106506, "Declare the size of an array, and have special conditional statements (pointers) to make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there... this process saves resources.": 0.962368369102478, "you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.": 0.9590250849723816, "Utilizing indexes for the front and the back.  Front is 0 and as you add items the back index is incremented.": 0.9543697237968445, "Declare two variables, \u201cfront\u201d and \u201crear\u201d, to be used to denote which elements in the array can be accessed. Increment \u201crear\u201d whenever data is enqueued to the end and increment \u201cfront\u201d whenever data is dequeued.": 0.9624921679496765, "It is an array of fixed size. A queue of maximum N elements.": 0.9479438662528992, "make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from": 0.9588754773139954, "By using the beginning of the array as the removal point of the queue (or beginning of the queue) and the ith element as the end of the queue.": 0.943513035774231, "add in data from the first element to the last, take out data from the first element to the last.": 0.9185156226158142, "you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom": 0.9184718132019043, "create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.": 0.9636437296867371, "Keep track of the front and rear indexes. Either: 1)Dequeue items by shifting the array left 2)Use wrapped configuration": 0.9475042223930359, "add items into a fixed size array, pull the items out by calling on them with the starting index, increase starting index so when it calls again its now the next index element in the array.": 0.9500163197517395, "To use and array to implement a Queue, element or item 0, should be the top element in the array. Every time an element is inserted, all the items in the array are pushed back one space. The top element is always removed first.": 0.9621403217315674, "fixed size array with max N elements.  Need to keep track of front and rear of array.": 0.9756534099578857, "by keeping track of a front item and a rear item, or with a circular array that uses the modulo function": 0.942846417427063, "Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.": 0.9827074408531189, "A pointer based implementation of a queue could use a linear linked list with two external pointers, one to the front and one to the back": 0.952980101108551, "remove the element then shift the elements one space back": 0.928490936756134, "By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer doesn't leave the array.": 0.9428457617759705, "an array is a type of queue with a fixed length": 0.908685028553009, "your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full": 0.9611530303955078, "Boolean isFullQ(queue) ::= rear == MAX_QUEUE_SIZE-1": 0.7854863405227661, "A list can have unlimited elements in it.  You can push a node onto the end of the list and pop the one in the front.": 0.9675164222717285, "theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory. The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required. The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods. that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array. the downside to this method is after you use element one it is still in memory. or im crazy who knows": 0.9625940918922424, "By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list. Also, items can only be removed from the front of the list and can only be added to the back of the list.": 0.9611198902130127, "You can use list to represent the items in a queue.": 0.9256234169006348, "Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.": 0.9546586275100708, "Enqueue to the end of the linked list... dequeue items from the beginning (head) of the list.": 0.9427140951156616, "you use the first element in the list as the remove point for the queue and insert items at the end of the list.": 0.9300220012664795, "Utilizing a front pointer and a back pointer.  The front poiner and back pointer points to the first item into the queue.  As you add items, the front remains the same but the back poiner 'next' points to the new item and the new item is assigned to become the 'new' back pointer.": 0.9597213864326477, "Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head.": 0.948576033115387, "Check if list is empty and add elements to the list.": 0.9288722276687622, "make a linked list and add on to the front and delete from the back, keep track of both to do so.": 0.96559739112854, "by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue": 0.9466792345046997, "throw in data at the head and take it out at the tail": 0.9173789024353027, "You create a list of nodes that had a head and a top pointer, and the functions are basically the same substituting pop and push with enqueue and dequeue": 0.9447969198226929, "fairly easy... singly linked list with a pointer to the head and tail of hte list.  deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer.  enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.": 0.9714637994766235, "Use a linked list with 2 pointers, one to the front and one to the back. As long as back != front, the queue is not empty.": 0.9623714685440063, "create a node with the input data, continue to add to the list.  when dequeueing - get the first elements data and set the next element in the list as the new first element": 0.9317798018455505, "A linked list with Stack principles. The Queue's top element is the element that is always being removed first. Must use nodes to contain each element, with a pointer to the top element, which also could  be called the head pointer.": 0.9652708172798157, "linked list checking for front and rear.  Keep enqueueing elements until front equal to rear -1.": 0.9663657546043396, "a queue can be implemented in a list by keeping track of two pointers, a head and a tail": 0.9475810527801514, "each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.": 0.9547104239463806, "Implement the operation dequeue() as the list operation remove(1) and the operation getFront(queueFront) as the list operation retrieve(1, queueFront)": 0.9261271953582764, "remove the first element and reference the second element as the new head of the list.": 0.9133318066596985, "By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.": 0.9453346133232117, "you would have your list and add a back pointer so that your program knows where the end is": 0.9161610007286072, "your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list": 0.9536736011505127, "temp-&gt;next= NULL;       if (front)  { (rear) -&gt; next= temp;}       else front = temp;       rear = temp;   }": 0.8918251991271973, "Push.": 0.8745192289352417, "push, which inserts something at the top of the stack.": 0.8436699509620667, "The stack operation corresponding to enqueue in queues is the push operation.": 0.8801742792129517, "Push in a stack operation corresponds to the enqueue operation in queues.  These operations insert a new item into one end(the top and back, respectively) of the ADT.": 0.8034273386001587, "The stack operation is almost the opposite of the enqueue operation.": 0.7892761826515198, "push = enqueue pop = dequeue": 0.8259100317955017, "push": 1.0, "Not sure what this question means.  You can use the stack 'push' operation and the enqueue operation to detect palindromes.": 0.8115488886833191, "Enqueue is the queue equivalent of push, and dequeue is the queue equivalent to pop.": 0.8278020620346069, "Push operation.": 0.8745192289352417, "that would be the push operation, if it put the item at the end of the list.": 0.8271088004112244, "the Push method in the stack operations.": 0.8677042722702026, "enqueue corresponds with push dequeue corresponds with pop": 0.8728816509246826, "Push corresponds with enqueue, both very similarly place new elements into their stack or queue": 0.8321176767349243, "FIFO: First in First out": 0.6527055501937866, "Push": 1.0, "A hierarchy of nodes that are sorted in a particular order.  Each node has a ancestor (except for the root) and children (except for the leaves).": 0.9596462845802307, "A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.": 0.9840924143791199, "A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.": 0.9808403849601746, "A connected, undirected graph without cycles.": 0.9647535085678101, "A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the \"base\" of the tree, it has no parents. A \"leaf\" is a node at the end of the tree which points to NULL.": 0.9713393449783325, "a tree is a series of nodes where each node has links to other nodes.": 0.933778703212738, "an infinite set of nodes that have a root and descendants, and each addition is a leaf.": 0.9771207571029663, "A set of one or more nodes that are hierarchically organized, with one special \u201croot\u201d node.": 0.979498565196991, "A tree is a finite set of one or more nodes such that there is a specially designated node called the root.": 0.9789196848869324, "one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees": 0.9515493512153625, "A tree is a data structure where nodes are linked to each other in a hierarchical manner.": 0.9546027779579163, "a grouping of data in a parent to child structure": 0.8871427774429321, "It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.": 0.9693745970726013, "A tree is a branched data structure with nodes, and leaves... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.": 0.9843453764915466, "It organizes data in a nonlinear, hierarchical form, where items can have more than one successor.  Partitioned into a root node and subsets are general subtrees of the root. ": 0.9758185744285583, "A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n&gt;=0 disjoint sets T the n plus 1, where each element set is a tree.": 0.9844406247138977, "A finite set of nodes that starts with the root and terminates with leaves.": 0.9674670100212097, "a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element": 0.9079598784446716, "A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.": 0.9755674004554749, "a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children": 0.9610998630523682, "A nonlinear, two-dimensional data structure.": 0.9247322082519531, "a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root": 0.9533402919769287, "A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree": 0.9699536561965942, "A type of data structure in which each element is attached to one or more elements directly beneath it.": 0.9562029838562012, "Each level of a generation in the tree, some people do not count the root as a generation": 0.9476622939109802, "The height of a tree is in terms of the levels of its nodes such that, if  the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes.": 0.9222421050071716, "The height of a tree is the number of nodes on the longest path from the root to a leaf.": 0.9878838062286377, "The number of nodes on the longest path from the root of the tree to a leaf.": 0.9878838062286377, "Height = the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.": 0.9604181051254272, "the height of a tree is the length from the root to the furthest leaf": 0.9496827125549316, "The height is the number of generations (levels) from the root.": 0.947460949420929, "The height of a tree is the number of levels between the root and the leaf farthest away from it.": 0.9553781747817993, "is the depth of its furthest leaf": 0.892609715461731, "the number of nodes from root to leaf": 0.9351797699928284, "the distance from the deepest leaf to the root": 0.9487124681472778, "the number of generations or levels of a tree": 0.9039940237998962, "The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.": 0.9334042072296143, "the number of levels of a tree, like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes.": 0.9297928214073181, "The number of nodes on the longest path from the root to the leaf.": 0.9878838062286377, "The height of a tree is the number of nodes on the longes path from the root to a leaf.": 0.9773874282836914, "is equal to the number of levels.  levels between the root node and the terminal nodes.": 0.935062050819397, "the number of generations or levels the tree has": 0.9039940237998962, "The height of a tree is the depth of its subtrees, that is, how many layers deep it is.": 0.9495902061462402, "is the number of generations in the tree": 0.9196636080741882, "The number of nodes on the longest path from the root to a leaf.": 0.9878838062286377, "the number of distinct levels of separation": 0.9217416644096375, "the height of a tree is how many levels of nodes that it has": 0.8421547412872314, "The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.": 0.9587111473083496, "A leaf is a child of a parent node that has no children nodes of its own.": 0.9774896502494812, "A leaf is a node with no children.": 1.0, "A node with no children.": 1.0, "A tree node with no children.": 0.9885566234588623, "And end point of the tree... a node that does not have any children.": 0.9385055899620056, "a node with no children.": 0.9805528521537781, "A new item to the tree--a child": 0.893264889717102, "A leaf is a node with children, it is a terminating node.": 0.9828455448150635, "The node with degree 0.": 0.9474144577980042, "the node with degree 0": 0.8775649666786194, "a leaf is a node with no children": 0.8810327053070068, "the last child on any branch": 0.845390796661377, "The last value in the tree. A value with no children attatched.": 0.9630308747291565, "A leaf is a node with no children": 0.9570557475090027, "a node with degree 0.  last node in the tree and furtherest away from the root.": 0.9294273257255554, "an endpoint on a tree that contains no pointers or pointers that are set to null": 0.8241769671440125, "an element in a tree that has no children": 0.8441338539123535, "a leaf is a node that has no children nodes": 0.8749833703041077, "The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.": 0.9391430020332336, "A tree data structure in which each done has at most two children, typical called left and right nodes.  The right node is usually greater than the left node and the parent node.": 0.9422104358673096, "A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.": 0.954392671585083, "A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.": 0.9547111392021179, "A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.": 0.9570910334587097, "A tree in which each parent has a maximum of 2 children.": 0.9701330661773682, "a tree where each node has at most 2 children.": 0.9371134042739868, "a tree with up to two children or a right subtree and/or a left subtree": 0.8638697862625122, "A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.": 0.9745737314224243, "a binary tree is a tree data structure in which each node has at most two children.": 0.9462063908576965, "a tree with only 2 joints, left and right": 0.8787969946861267, "A binary search tree is a tree that also has the condition that each node may have at maximum 2 children": 0.9580408334732056, "a tree where each parent can have at max two children.": 0.9406647086143494, "a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree": 0.8854639530181885, "a tree where each node can have at most 2 children.": 0.9371134042739868, "Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.": 0.9549732208251953, "A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.": 0.9547111392021179, "a tree that has a maximum of 2 children per node": 0.9470507502555847, "a tree with elements that can contain at most two pointers": 0.8955600261688232, "A binary tree can have only two children for each node.": 0.9650201797485352, "a tree where every parent has only two children": 0.9034392237663269, "A tree where every node has no more than two children": 0.9416191577911377, "a binary tree is a special search tree where each node has either 2, 1, or 0 children": 0.9310221076011658, "a binary tree is a special type of tree where each node can only have at maximum 2 children": 0.9518626928329468, "A binary tree is a special type of inverted tree in which each element has only two branches below it.": 0.9444466233253479, "A tree data structure where each node has a value, where the total order is defined on these values.  the left subtree contains only values less than the parent node, and vice versa for the right subtree.": 0.9547315239906311, "A binary search tree is a binary tree where the value in any node 'n' is greater than the value in every node in n's left subtree but less than every node in n's right subtree.": 0.9450234770774841, "A binary tree where the value in any node n is greater than the value in every node in n's left subtree, but less than the value of every node in n's right subtree.": 0.9470198154449463, "A binary tree where the search key in any node n is greater than the search key in any node in n's left subtree, but less than the search key in any node in n's right subtree.": 0.9309667348861694, "A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively. ": 0.9515311121940613, "a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.": 0.9491457939147949, "a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value": 0.9533098340034485, "Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.": 0.9461231827735901, "it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node's value, and the right subtree of a node contains only values greater than or equal to the node's value.": 0.942234992980957, "A binary tree with the data organized in a specific arangment": 0.9134455323219299, "A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.": 0.9667410850524902, "a binary tree in which the data is in order from left to right.": 0.9302855134010315, "a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.": 0.9371619820594788, "a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.": 0.9617483019828796, "A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.": 0.9457959532737732, "A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.": 0.9499036073684692, "it is similar to a binary tree.  The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree.  the values in all nodes in the left subtree of a node are less than             the node value  the values in all nodes in the right subtree of a node are greater    than the node values": 0.9507891535758972, "a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted": 0.9572033882141113, "A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.": 0.9748201966285706, "a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.": 0.9770175218582153, "A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.": 0.96792072057724, "a binary search tree is a special tree in which each node has at most two children, labeled left child and right child": 0.9727238416671753, "it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.": 0.9592733383178711, "Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.": 0.9100430011749268, "For every node in the binary tree we first visit its left sub-tree (if its there) and then visit the parent node itself, and then the right sub-tree (if its there).": 0.9451189637184143, "The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.": 0.9295129179954529, "Traverses the binary tree in inorder.  It lets you visit the nodes in order according to their data values.": 0.9368860721588135, "Its used to visit nodes of a binary search tree in a search key order.": 0.9215927720069885, "(Left side of tree) (Root) (Right side of tree)": 0.8569936752319336, "printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.": 0.9408885836601257, "The in order is to go from left,root,right": 0.962914228439331, "Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, it\u2019s parent, and it\u2019s right side sibling, then it goes up a level and repeats until it gets to the root.": 0.966427206993103, "traverse the left subtree. visit the root. traverse the right subtree.": 0.9817849397659302, "postorder": 0.5367270708084106, "in order starts with the root then does right child then left child recursively": 0.9096453785896301, "Left Child -&gt; Parent -&gt; Right Child": 0.8726697564125061, "it goes from lowest to highest inside of the tree": 0.8410656452178955, "starting by displaying the node furthest to the right, then  the node, then the node on the right, in recursive order.": 0.9662426710128784, "It travels left to right": 0.9056578278541565, "void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } }": 0.851389467716217, "the root is in the middle.  The left subtree is traversed first, then the root, and finally the right subtree.": 0.987800657749176, "a traversal that visits the left branch first, then the parent node, then the right branch, recursively.": 0.9710301756858826, "Inorder traversal visits the left branch of a node (all the way to it's deepest left-most leaf) before visiting the node itself. After visiting the entire left branch and the node, it visits the node's right branch following the same pattern of left child, node, right child.": 0.9665073156356812, "left middle right": 0.8590752482414246, "You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.": 0.9733079075813293, "you would go to the furthest down left most node, then to the root then to the right (if left and right exist) then you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process": 0.9591434001922607, "it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node": 0.9526861906051636, "Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods. ": 0.9583536982536316, "This is on the runtime order of log(n) where n is the number of nodes in the binary tree.": 0.9641374349594116, "In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.": 0.9568838477134705, "n-1/2 is the algorithm to compare and find an element.": 0.8895042538642883, "At most its equivalent to the height of the tree.": 0.9232364892959595, "Log(n)": 0.9241369962692261, "O(log n)": 0.9218505024909973, "Depends on what half of the tree and the levels you have.": 0.9057155251502991, "O(log n) in balanced trees": 0.9461349844932556, "log(n)": 0.9241369962692261, "nLog(n)": 0.8955873847007751, "logn": 0.673468828201294, "at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.": 0.9633932709693909, "It takes at most 3 comparisons to find and element in a binary search tree": 0.8795377016067505, "log (n)   where n equals the number of nodes.": 0.9610282182693481, "it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level": 0.9397505521774292, "At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.": 0.9653515815734863, "log n comparisons": 0.8246522545814514, "(n^k)-1   where k is the height of the tree": 0.8826901316642761, "it takes h comparisons, where h is the height of the tree": 0.8802363872528076, "2 way key comparison": 0.82147216796875, "The name of the class file, the parameters it must take to perform its function.  Also a brief description of what the class does.": 0.909558892250061, "access specifiers and functions, oftentimes a constructor.": 0.8994323015213013, "The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.": 0.9198929667472839, "Class is user defined.  It contains members, data and functions.  The keyword class is used and includes brackets ({})": 0.9344563484191895, "the functions and variables used when the object is defined for the class.": 0.8915857672691345, "Data members, functions and function definitions, variables.": 0.9470688700675964, "return type and input parameters": 0.8688682317733765, "Constructor Data members Methods": 0.9020413756370544, "Function members and member attributes, or in other words, the class variables and functions.": 0.9495376348495483, "The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.": 0.9163843393325806, "The variables and function prototypes.": 0.9128056168556213, "public and private variables and initiations of functions included in the class.": 0.9034392237663269, "The return value and the accepted value.": 0.8799389004707336, "A class definition typically includes the class name, the classes constructor(s), and any extra functions and class variables.": 0.9145898818969727, "Parameters and their type, Class name, and return type, and the code to be executed in the class.": 0.902145266532898, "data members, class variables, and functions": 0.9413576722145081, "Constructor, functions, and variables native to the class.": 0.9008476138114929, "functions and data members": 0.9229852557182312, "data members and function definitions": 0.9516506791114807, "member functions and data members": 0.944953978061676, "constructor, and function definitions.": 0.8926029801368713, "class name data of class definition of functions and methods": 0.877042829990387, "A class definition includes the definitions of the class' constructor(s) and any public or private functions. Of course, it also #includes the class header and any necessary C libraries": 0.9100249409675598, "Class name, {}, semicoln at the end of the defination, private and bublic followed by \": \"": 0.8702713251113892, "a constructor, private and public variables, and function prototypes": 0.903652548789978, "Data variables and Functions, Data members": 0.9346576929092407, "class definitions include the name of the class and type of parameters": 0.8798124194145203, "class variables, class function prototypes": 0.888377845287323, "input  & return type elements": 0.8364353179931641, "Public and private specifiers.": 0.9771195650100708, "Public, Private, Restricted": 0.9310091137886047, "The access specifiers are public and private.": 0.9579893946647644, "public private protected": 0.9101813435554504, "Public or Private.": 1.0, "public: the function or variable can be used outside the class private: the function or variable can only be used with the class": 0.8438488841056824, "Public and Private": 0.9074110984802246, "public private and protected": 0.9101813435554504, "Public Private": 0.9074110984802246, "Private, public, protected": 0.9317716956138611, "The access-specifiers that can be used in a C++ class definition is private and public.": 0.9860010147094727, "public and private.": 1.0, "static, long, unsigned": 0.8505796790122986, "Private, Public, Protected, or Friend.": 0.938411295413971, "A C++ class definition may include access-specifiers public, private, and static.": 0.9290362596511841, "local, global, local-variable, function specific": 0.8491673469543457, "public, private": 0.9529813528060913, "Public, protected, and private.": 0.9533489942550659, "private, public": 0.9529813528060913, "public - can be accessed by any of the program  private - can only be accessed by the class functions themselves and no outside functions or calls": 0.8512214422225952, "public , private, protected": 0.9317716956138611, "public and private": 0.9074110984802246, "public, private, protected": 0.9317716956138611, "functions and data members can be given access-specifications of public, private, and friend. public access is given to any functions or members not given specific access rights.": 0.9132307767868042, "data member or data functions are access specifiers": 0.7366539239883423, "public or private": 0.9074110984802246, "public - can be accessed from outside the class private - accessible only from inside the class, not inherited protected - accessible only from inside the class, inherited": 0.879683256149292, "ie. GradeBook myGradeBook();  call upon the class and then give it a name like shown": 0.8870008587837219, "They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.": 0.8890805244445801, "Objects are initialized by a value given.  When an object is defined for a certain task.": 0.9198470711708069, "They are initialized with a \" . \" (dot) between the constructor and the object being created.": 0.8994489312171936, "objectname classname();  to call a function from the class:  objectname.funciton();": 0.8547003269195557, "If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.": 0.9199377298355103, "classname objectname(input parameters);": 0.8524467945098877, "When the class is called by the Constructor": 0.8512255549430847, "Constructors; default when not provided by user, or programmer specified constructors.": 0.9257429838180542, "Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.": 0.8978203535079956, "&lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;": 0.8199397921562195, "variables are set to a given value, or 0 if none is given.": 0.9068063497543335, "When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).": 0.925287663936615, "Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.": 0.887313187122345, "If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class.  If no constructor is specified or found, c++ will use a default one with no parameters.  Gradebook myGradebook;  In this bit of code, the class Gradebook has been initialized as object myGradebook.": 0.9210669994354248, "objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.": 0.9072732925415039, "They are initialized with a constructor.": 0.9274348616600037, "The value is specified after declaration,  It can initialized anywhere between the declaration and the corresponding }.": 0.889056921005249, "with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.": 0.9311596155166626, "initialized using the same name as the class": 0.848721444606781, "they are initialized to a value dependent on the compiler": 0.833151638507843, "memory is allocated in accordance with their type and initialization input.": 0.8836557269096375, "Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.": 0.8792805671691895, "using constructor": 0.86180180311203, "by giving them a value": 0.8185102939605713, "By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.  Ex. Class myClass(x, y)": 0.928138792514801, "objects are initialized by giving the object a type, name, and initial value": 0.8845884799957275, "they are initialized to 0": 0.6482290625572205, "obj. are initialized by the variables that call them, when they are created within a class.   e.i. classname objectname etc. ": 0.9290069937705994, "Name of the function, parameters it must receive in order to perform and a return type.": 0.9660784006118774, "a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in.": 0.9652302265167236, "A function signature is the return type of a function, its name, and the number and type of its parameters.": 0.978568434715271, "function prototype that contains functions and data members.": 0.9113171100616455, "A function signature is a declaration of the function that includes the parameter types and the number of parameters.": 0.9733088612556458, "the declaration of the function.": 0.8996759653091431, "Includes the name, accepted parameters, and return type.": 0.9834381341934204, "its return type and its input parameters": 0.9019352197647095, "Contains the function name and its paramaters.  The return type is not included": 0.9650216102600098, "Return type, function name, and the parameter types": 0.9698712825775146, "The function signature tells what the function parameters and includes all the function calls": 0.9538558125495911, "The function's name, as well as what it returns and what it accepts.": 0.9531398415565491, "the body of the function that holds all the actual code": 0.8904457688331604, "A function signature is the return type and accepted pass value type it takes": 0.9308165311813354, "A function signature specifies the name and input variables of a function.": 0.9566442966461182, "A function signature is the function's parameters and their type and the name of the function.  The return type is not a part of the function signature.": 0.9681243300437927, "the name of the function and what it accepts/ returns": 0.8224202394485474, "the unique identifier of a function, which includes input variables along with the function name, but excludes the output type.": 0.9657760858535767, "The order, number, and type of data items included inside the function parameters.": 0.9757106304168701, "its the scope, type, and parameters of that function that give it it's properties and defines it against other functions.": 0.9708744883537292, "is the name of the fuction, return type, and parameters that are being used": 0.9647200703620911, "a function signature should include the name of the function, parameters, and a body.": 0.9786167740821838, "the name of the function and the arguments passed to that function": 0.919669508934021, "A function signature, used in a function's prototype, is the set of object types it take in as parameters, with or without names given for the objects.": 0.9747305512428284, "function name and parameter are called function signature.": 0.938552737236023, "fuction name and parameters": 0.8917458653450012, "The parameters needed, the return type, and name of the function.": 0.9806203246116638, "the signature of a function includes the name of the function, the number and types of parameters, and the return type": 0.980751097202301, "It is what uniquely separates overloaded functions. It includes the return type, and the parameter list of the function.": 0.9735813736915588, "function sig is, is what is the class recognizes as the main function, or rather its specification ": 0.9546886682510376, "A function that calls upon it self to solve a problem.  Each time it calls upon it self it splits up a problem into a simplier form until it reaches a 'base case' which is the most simplest form of the problem.": 0.9360137581825256, "A function that calls itself to perform an opperation such as a factorial recursive function.": 0.9394304156303406, "A base case that calls upon itself until the problem becomes smaller and terminates.": 0.9421101212501526, "It's a function that calls itself. It runs multiple times until the base case is reached.": 0.9504561424255371, "a function that calls itself untill it reaches a base case.": 0.9455333948135376, "A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.": 0.9451106190681458, "a function that calls itself until a base case is met": 0.8922834396362305, "A function that calls itself. With each function call the problem is diminished.": 0.9791388511657715, "A function that calls itself to perform a certain task": 0.9000591039657593, "A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.": 0.9582729935646057, "A function that calls itself, in order to solve a problem.": 0.9527367949485779, "a function that calls itself over and over until it finds the simplest form of solution, or the base case.": 0.9465804100036621, "A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.": 0.9391900300979614, "A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.": 0.9295064806938171, "A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached.  At the base case, a definite answer is called and the function no longer recurses, but unwinds itself back through function calls to determine the answer to the original large problem.": 0.9331773519515991, "a function that calls itself into a loop with a base case for a loop exit.": 0.9112411737442017, "a function that calls itself until the base cases are met.": 0.95090252161026, "A recursive function only knows how to solve base cases  A recursive function calls itself directly or indirectly until a base case is reached.": 0.9334454536437988, "a function that calls on itself and uses a base case to stop the recursion": 0.8594773411750793, "a function that calls itself, and which eaach calls get closer and close to the base case.": 0.9374607801437378, "A function that divides and conquers a problem.  There is a base case that will eventually be reached.  The function calls itself over and over until the base case is satisfied.": 0.9553886651992798, "a function that calls itself in the definition code": 0.8360189199447632, "A recursive function solves a problem by repeatedly calling itself. the initial problem is broken into successively smaller parts until a much simpler base case is reached. the solutions to each piece of the problem are then returned a step at a time.": 0.9388028383255005, "It invoke by itself again ana again, unless it reach bas case": 0.9072557091712952, "a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.": 0.9253143072128296, "A function that calls itself over and over again till a base case is reached, then it returns back to the original function.": 0.950588583946228, "a recursive function is a function that during execution, calls itself over and over until a base case is reached": 0.9157651662826538, "A function that calls itself. Usually used to split a problem into several smaller problems of the same type.": 0.9429767727851868, "function that calls it self till the base case is met": 0.8983545303344727, "Iteration, performers  a series of checks and loops.": 0.9135737419128418, "The alternative method is to use loops in the program instead of a function which calls itself.": 0.8842568397521973, "An alternative to solving a problem using recursive functions is to solve the problem using iteration.": 0.9253397583961487, "Iteration, this would be more efficient and has repetition structure.": 0.9375259876251221, "One can use iteration or by using a simple while/for loop.": 0.9048787355422974, "iteration": 0.8752854466438293, "Iteration. A while loop or a for loop will be able to accomplish the same desired outcome... It may be faster than recursion, but could also be harder to understand.": 0.9380468726158142, "you can also solve the problem iteratively": 0.6576669216156006, "iterative": 0.6566435694694519, "Using iteration loops.": 0.9413397908210754, "Another alternative way to solve a problem instead of using recursive functions is by using iteration.": 0.903619647026062, "A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.": 0.9066527485847473, "Any recursive function can be solved using an iterative method.": 0.8752545714378357, "Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.": 0.9174162149429321, "Using an iterative function, which repeats a specified operation or set of operations until a terminating point or base case is reached.  ": 0.9057024717330933, "iteratively": 0.5084868669509888, "using an Iterative calls": 0.7919570207595825, "Iteration.": 0.9651250243186951, "iteration is the alternative way to solve a problem": 0.8752854466438293, "using an iterative solution instead": 0.7596400380134583, "Using an iterative solution.  For, while, or do while loop.": 0.9429671168327332, "the alternative way to solve a problem that could be solved using recursion is iteration.": 0.9010263681411743, "Any problem solved recursively could be solved with an iterative function. Iterative replacements for recursive functions may be more difficult to program, but often lead to more efficient solutions to a problem. ": 0.9106273055076599, "by iteration": 0.8752854466438293, "itteration, like a for loop, a while loop, or a do while loop": 0.8891310691833496, "Iteration by using loops": 0.8507207632064819, "iterative functions": 0.6566435694694519, "the alt, way is to use a functions parameter in a call \"to\" function. ": 0.8934638500213623, "The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again.  An array that is not declared static will keep its original elements.": 0.9468177556991577, "A static array only has a specific size and it cannot grow. Also static arrays cannot be accessed outside the program which created it.": 0.9457454681396484, "Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.": 0.9681365489959717, "Static can be initialized and non-static cannot in C++.": 0.8202170729637146, "An array declared static remains the same throughout the execution of the program.": 0.9318472743034363, "a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.": 0.9381207823753357, "The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared.   //pass-by-reference???": 0.9177157878875732, "a static array has a predetermined size and that size cannot be altered": 0.8568553328514099, "Arrays declared static can not be changed.  One not declared static can be altered.": 0.9348167777061462, "an array that is declared as static will retain the values stored in it's elements between function calls, and will not reinitialize them to default values.": 0.9472056031227112, "An array that is declared static causes anything that is not initialized to be set to 0.": 0.9262820482254028, "A static array will have a null character at the end of the array.": 0.9055821299552917, "static arrays cannot be changed while normal arrays can be changed": 0.8854193091392517, "An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.": 0.9547324180603027, "A static array has class scope, allowing it to remain where other arrays might be recycled.": 0.9470228552818298, "An array that is static does not change or uninitialize if called later unless explicitly acted upon.  It does not terminate or change across objects.  An automatic local array will be cleared and uninitialized if called later outside of it's specific scope.": 0.9529575705528259, "one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.": 0.9491209983825684, "a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced.": 0.9501752257347107, "A static array retains any modified values after a function call. Automatic arrays reset to their initial values when the function ends.": 0.9601165652275085, "a static array is one that keeps its values and is not initialized every time a class function is called, it's data is not lost at function end.": 0.9537916779518127, "an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.": 0.954146146774292, "Values in an array that is not delcared as static will remain constant.  When an array is declared const values within the array can be manipulated.": 0.9435964226722717, "the data of a static array cannot be changed": 0.7696687579154968, "Standard arrays terminate when the functions that call them finish. A static array is not removed from memory when it's parent function terminates, leaving it available for other functions (or new instances of the original function).": 0.9687393307685852, "by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function.": 0.9503158330917358, "static arrays can be called from anywhere": 0.8882773518562317, "A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.": 0.9477232098579407, "a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function": 0.8848563432693481, "An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. A non-static array is allocated and freed every time that it comes in and out of scope.": 0.9376565217971802, "static has a predetermined size that cannot be passed while vis versa.": 0.9229342937469482, "the type char[] has a  null ('\\n' ) element at the very end.": 0.9182637333869934, "a variable char is basically any non command key on the keyboard that you can press. A string is a collection of letters or numbers that is stored together to be used later. Comonly strings are used for words. Chars can be used for less but can have opperations performed on them in a useful way.": 0.9363680481910706, "The programmer must provide the null terminating character in a string of characters using type char[] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.": 0.9462236762046814, "String of characters are followed by a null statement.  type string is for example   string s;": 0.9112133383750916, "String contains a word where as char can contain phrases or a string of characters.": 0.9155644774436951, "a string is a variable with a single entinty of letters combined into one while in a char[] each letter is assigned a memory value and each has its own variable assigned i.e. char[0] char[1].": 0.9325616359710693, "A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared/limited.": 0.9502967000007629, "an array of characters stores a null character at the end": 0.9318518042564392, "When you read a string of characters, you also read in the white space.  When you read characters declared char you only read the characters, no white space.": 0.9170106053352356, "Character arrays will terminate at any whitespace, including spaces. Strings terminate when they encounter the new line character.": 0.9328813552856445, "The difference is that a string that is declared a variable of type char[] is each char is included in the array versus the string of characters that is read into a variable.": 0.9253965616226196, "An array of strings reads the string literals, meaning anything within \"quotes\". A char array reads a string as each individual character.": 0.9396294951438904, "character arrays can call on individual letters were a string array can only call words.": 0.9186607003211975, "The character array has an end of line character at the end of it.": 0.9489267468452454, "Type char[] may contain a null value as the last element, whereas type string will not.": 0.9335487484931946, "The variable of type string has a terminating character \\0 at the end of it.": 0.9787480235099792, "the one that is type string has an extra string member. The /0 at the end.": 0.9347635507583618, "a string has variable size and function calls available, while an character array usually has a static size.": 0.9353772401809692, "a string char[] adds a null value to the end of the string.": 0.9506739377975464, "char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.": 0.9533435106277466, "the variable of type char[], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.": 0.9338730573654175, "When the string is passed into the array char, individual characters are stored and can be manipulated.  Although when a word is stored into a string variable, it is stored as one word and not as individual characters.": 0.9322040677070618, "a string variable can change in size and is passed to functions by value, whereas a type char[] cannot change in size and is passed to functions by reference only": 0.9096994400024414, "A string type string acts as a single object, with individual char entities accessible only through specific string class functions. A char array is less robust, but allows direct access to specific char entities.": 0.924131453037262, "In arrays strings are stored as a characters (char[]), each character of string will be stored in each memory location of the array, while string of characters is only one memory location.": 0.9204670190811157, "an array of characters has one more element, its last element,the terminating element, or null, which doesnt exist in a variable of type string": 0.9203534126281738, "A string of characters is a specific variable type that has no extra data at the end. A string of type char[] is all the characters and a null ('\\0')": 0.9434334635734558, "a string of characters will have a null character or value at the end of the string": 0.9395263195037842, "when the characters are put in a char array, there is also a null terminating character added to the end, '\\0'": 0.9562365412712097, "string of characters that is read into a variable of type string includes, ": 0.8506616950035095, "For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself": 0.9471429586410522, "Divide and coquer means dividing a problem into 2+ problems which are solved and then merged  back together for a final solution to the whole problem.": 0.964015781879425, "The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.": 0.9548035860061646, "Divide elements,recur then conquer, which works in merge sort and quicksort.": 0.9443740248680115, "To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem.": 0.9602157473564148, "to divide one larger string/line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.": 0.9296314120292664, "Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.": 0.9679479002952576, "dived and conquer is the breaking up of a large complex program into small easy to solve components.": 0.9472864866256714, "Dividing a larger problem into the smallest incident of the problem and solving the smallest incident.": 0.9462409615516663, "Break up very large data structures into smaller sub-units, that are easier to manipulate.": 0.9253013134002686, "The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.": 0.9559957981109619, "The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. ": 0.9526525139808655, "Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process.": 0.9810095429420471, "The idea is to split the problem into half and solve for the smaller split-problems.": 0.9506486654281616, "The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.": 0.9765072464942932, "Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm.": 0.9657554030418396, "It takes a large problem and splits it into two or more easier or faster solutions, and  makes for better readability. ": 0.9486311674118042, "it is the taking of a larger problem and splitting it into simpler smaller problems.": 0.9464260935783386, "It divides the problem into singular units and works on the problem piece by piece until the problem is solved.": 0.9566743969917297, "smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.": 0.9497878551483154, "a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.": 0.9238079190254211, "The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.": 0.9616286754608154, "the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.": 0.9632619619369507, "dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together.": 0.9606812000274658, "Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. If array have n element, first half have n/2 elements": 0.9669772982597351, "divide the array in half, sort each half, then sort them back in one array": 0.9257988333702087, "You take a class and break down everything it is supposed to do into easily managed functions.": 0.9222674369812012, "this is shown by the use of .cpp and header files.  by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file": 0.9433441162109375, "When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem.": 0.9825314879417419, "it is the separating of large program into smaller classes then until target is reached.": 0.9233936667442322, "It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list, this is done by reversing the divide and conquer technique": 0.9594391584396362, "A merge sort works by removing all items to sepperate memory locations and merging them back together in order.": 0.944647490978241, "It divides the array into two halves, sorts each half, then merges the two halves together.": 0.9910609722137451, "Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted. ": 0.9678595662117004, "Merge sort uses the \"divide and conquer\" idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array. This is one of the best sorting algorithms besides Quicksort.": 0.9756839275360107, "divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.": 0.9446471333503723, "Continually split array in half, sort each side of the halves, then put them back together once organized.": 0.9725943207740784, "merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays.": 0.9590680599212646, "By divide and conquer.": 0.9221742749214172, "Break a single array down into many arrays with individual elements, then sort the elements as you reconstruct them back into a single array.": 0.9427757859230042, "Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it \"merges\" back as it keeps on sorting the algorithm as it does so.": 0.9753173589706421, "Merge sort divides the problem in half, organizes each half, then brings the two halves together again.": 0.9784778952598572, "Take an array and split it into two, then solve these simpler problems and merge the two answers in correct order.": 0.9794750213623047, "A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.": 0.967786967754364, "Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.": 0.9682865142822266, "Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array.": 0.9712411761283875, "It takes an array, splits itself in half, sorts the two halves (either by recursion or iteration) and compares them together giving a third array a full sorted list with both halves rejoined. ": 0.9828767776489258, "it splits a large array into small arrays and recurs until the array is a size of 1, and then merges all of the arrays back together until the source array is completely sourted.": 0.9667956829071045, "Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array.": 0.9583315849304199, "merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.": 0.9840269684791565, "Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively. ": 0.9678557515144348, "Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.": 0.9825507402420044, "merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data": 0.9214323163032532, "merge sort uses the divide and conquer strategy, sorting an array in parts, then merging the sorted parts back together.": 0.9749536514282227, "Divide recursuivly big array into two arrays, sort two array and merge them togather recuruivly.": 0.9688810706138611, "divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.": 0.9787748456001282, "Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.": 0.9698135852813721, "merge sort splits an array into two halves and then sorts the two smaller arrays, and then merges them back together to form a sorted array": 0.9831971526145935, "the merge sort continually divides the array (or set of containers) into halves, until it reaches the point where there is just one element left, then merges each of the sets of two sorted arrays (containers).": 0.9726589322090149, "merge sort splits an array of elements into smaller and smaller array's till the value of 1 is reached.": 0.9711691737174988, "A variable in memory that hold the address of another memory location to which it points too": 0.937700629234314, "A pointer is a variable that contains the memory address of a given value.": 0.9468779563903809, "A pointer is a variable that stores the address of another variable.": 0.9376035332679749, "A pointer is a variable that holds a memory address or location of another variable.": 0.9626458883285522, "A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.": 0.9367181658744812, "a pointer points to a location in memory of a certain data type": 0.8854562640190125, "A pointer is a variable that points to the address location of another variable.  Represented by (*).": 0.9407082200050354, "A pointer is a variable that holds the address of a given variable (and of a given data type)": 0.9091747999191284, "pointer is a programming data type whose value points to another value stored in computer memory by its address.": 0.9361135959625244, "A data type that points to a specific memory address.": 0.9445189833641052, "Its like a variable except it only holds the address in memory of the variable not the physical information.": 0.9454402327537537, "a pointer is a reference to a memory location.": 0.9395484328269958, "A pointer is an alias to an object in memory.": 0.9572358727455139, "A pointer is a variable that contains a memory address for something that you can use, such as a value, array, or even a function.": 0.9424875378608704, "its a data type with a memory address and a value": 0.9229973554611206, "a form of storing data that keeps the location in memory of an data type or object.": 0.9489232301712036, "it contains a object's memory address": 0.9272914528846741, "variable that contains the memory address of a data object.": 0.9455756545066833, "A pointer is an element that references a memory location.": 0.9529610276222229, "an object that points to a specific place in memory, where a variable or value is stored.": 0.9384384155273438, "a variable that stores the address of a memory location": 0.9418182373046875, "A pointer is a variable that points to an address in memory, which contains some data. The pointer does not contain or point to any data, only a memory address.": 0.9542885422706604, "Pointer is a variable which have a memory address of a variable.": 0.9450879693031311, "a pointer points to a location in memory where data is stored": 0.823763370513916, "a variable that holds the address of another variable and can access the contents of the variable.": 0.9235288500785828, "a pointer is a memory address that points to a data member": 0.831171452999115, "A data type that stores the memory address of another variable.": 0.9590474367141724, "its like a variable but only holds an address in meomrry not the physical address.": 0.9546153545379639, "Try several sets of data on an algorithm that includes worst case, best case, and random cases.  Also try and run the same program on a different computer with the same specs": 0.9069521427154541, "time complexity using big O  logarthmic O(log n) linear O(n) exponential O(n^2) quadratic O(n^k) k&gt;=1 Polynomial O(a^n) n&gt;1": 0.8419206142425537, "Using some sort of counting principle of the number of operations performed in an algorithm.": 0.9185882806777954, "Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.": 0.9356012344360352, "measuring the relationship of running an algorithm with different input sizes.": 0.898645281791687, "Oposite of a theoretical assessment of the algorithm to determine runtime, but to run the code first to determine the the runtime.  This is not recommended because it is a limited test.  It does not include all possibilities of the data, nor the hardware used to process the data.": 0.9323225617408752, "The experimental approach for measuring the running time is by using the Big O equation which tells you the running time.": 0.9025110006332397, "You create and run  the algorithm multiple times, while measuring the amount of time it takes, you then average the results.": 0.9131859540939331, "keep a value of how many operations it takes and add to this value each time a function is called.": 0.9005142450332642, "BIG-OH": 0.2633504867553711, "Running the program with various input data and measuring the running time with system time.": 0.8949081301689148, "You run a program with different data sizes, like 10^x.  As you increase x and measure the completion speeds for the program, you can find patterns and attempt the measure the running time.  It's very important to keep the same software and hardware however, which makes experimental testing inferior to theoretical in the eyes of most.": 0.935089111328125, "to run the program through and see how many times each thing is called and the runtime of each function is based on that.": 0.8979647755622864, "the number of times a specific segments get called per unit work.": 0.9008976817131042, "For every call into memory, add/ multiply it into an equation of type O(n)": 0.8886382579803467, "adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time, then you can calculate the efficiency by the speed of the computers cpu.": 0.9066002368927002, "Big O(h) notation": 0.8258223533630371, "the experimental approach measures actual running time in t.  t= seconds.": 0.8632332682609558, "running an algorithm on a specific set of data": 0.8232779502868652, "In experimental terms, the running time of an algorithm is measured by the number of operations required to complete the function. This number can usually be expressed in big-O notation.": 0.916344165802002, "run the code for n-times and get average values, drop the constant and lowest number. for example if             f(x) = 3n +1 the running time will bef  f(x) = O(n)": 0.8710198402404785, "to measure the actual time of the program to run. and calculate the running time using the input and operations done": 0.9271047711372375, "adding up the number of operations performed based on the worst case possible.": 0.9116919040679932, "the experimental approach would be to run through the algorithm and see how long it takes": 0.8453400731086731, "trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.": 0.897014856338501, "running the input with various inputs measuring the running time with  system time": 0.8113226890563965, "it scans the list and selects the smallest(largest) element and places it in the front, increment the curPtr by one, scan the list again for the next smallest(largest) element and place it in with respect with the other sorted elements.": 0.9661262035369873, "Selection sort searches the array for the lowest value and swaps it with the first value in the array. Then searches for the next lowest value and swaps it with the second item in the array, and so on.": 0.9594609141349792, "Compare the largest element to the front element and swap data according to value if needed.": 0.9393178224563599, "Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.": 0.964955747127533, "Iterate through the list (assume list of integers), find the smallest one, and put it in a separate \"sorted\" list... then traverse again and find the next smallest, and move it to the sorted section... and repeat until you run out of elements to sort.": 0.9497609734535217, "selection sort selects the smallest element out of the list then the second smallest ....and sorts them acordingly.": 0.938589334487915, "You select the smallest element and place it on the left.  You select the smallest element and sort it with respect the the item already on the left.  You continue this till the end of the collection of items.": 0.9513405561447144, "A selection sort scrolls through the data structure looking for the lowest (or highest) unsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.": 0.9610509276390076, "Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements.": 0.9541636109352112, "Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly. You then sort the smallest case, then work your way up, sorting each until they are all sorted.": 0.9510392546653748, "goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.": 0.9554536938667297, "selection sort finds the lowest element in the data set and places it behind the pivot point.": 0.9417723417282104, "Selection sort iterates through the array one element at a time, seeking the least value from the right and replacing the current value with it.": 0.9525856971740723, "Selection sort traverses an unsorted array looking for the smallest value, when it's found it is put at the beginning of the unsorted array.  Performed several times, this will output a sorted array.": 0.9574613571166992, "it runs through the list and finds the smallest (or largest) value and puts it at the appropriate position": 0.9544365406036377, "pick a number, and set all values less than that number to the left, while all numbers on the right of that number is larger.": 0.9384733438491821, "It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.": 0.9444423317909241, "by selecting the first object and comparing it with the next objects to find one that is smaller, if it does it switches the two.  then it comes back the other way and sees if the objects previous to the last one is greater, if it does it switches them.  it does this while decreasing the range it looks at until it finishes in the middle.": 0.9613069891929626, "Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.": 0.9583415985107422, "selection sort works by pulling all of the values off to the side, leaving one value in the list.  It will then insert a value into the list.  if the value is bigger it will go to the right, if smaller if will go to the left.": 0.9502938389778137, "selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization": 0.9400901794433594, "Selection sort sorts an array one element at at time. It first finds the element with the smallest key and puts it into the first location within its array or list, then finds the next smallest and puts it in the second location, and so on.": 0.9783244132995605, "select an element compare it with 2nd element if it is greater, swap it ": 0.9270158410072327, "it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same...": 0.9684120416641235, "It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.": 0.954571545124054, "selection sort is when you pick a data member and put it in a new array, then you pick another data member and put it in order with the new array, then pick another and insert it in the correct place in the new array, etc etc": 0.9506425261497498, "it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.": 0.9585115313529968, "selection sort  iterates through the array one element @ a time searching for the right and replacing current value with it.": 0.9444372653961182, "A link list can grow to a infinite size as a array has a fixes size.": 0.9650074243545532, "The advantage of linked lists is that they are not limited in size like arrays.": 0.9362228512763977, "link lists dont have a fixed size": 0.8995700478553772, "Linked Lists can be of variable size, where arrays have fixed size.": 0.9795748591423035, "Linked lists do not have a definite size. They can be as big or as small as needed, and they don't have to allocate extra memory for elements you don't need. Arrays size must be defined.": 0.9597441554069519, "a linked list has a dynamic size , but an array only has a fixed size and takes allot of extra operations to increase its size.": 0.969507098197937, "You do not have to predetermine your list size as you do with arrays. Linked list have the ability to be as large as you want them adding memory as needed.": 0.9549897909164429, "The main advantage to a linked list is that it can have it's size adjusted during runtime.": 0.9450441002845764, "Linked lists are able to grow in size. So elements can be added to the list.": 0.9656427502632141, "Linked lists are not confined to a specific size, and can have elements added and removed far easier. They are also easier to traverse.": 0.9669349789619446, "There is no predetermined length": 0.7863007187843323, "Inserts into a linked list are far cheaper than an insert into an array. With an array, all items after the one being inserted must me shifted, with a linked list, only the pointers are replaced.": 0.9590364098548889, "Linked lists may be dynamically grown.": 0.9475080370903015, "Linked lists are very dynamic in that they can change and be added/subtracted to very easily because they are not linear in memory.   Arrays are pre-specified in size to be cast over a certain amount of disk space.  This makes insertion into Arrays difficult because all elements must be shifted, and if you reach the end of the array, you are done even if you have more data to input.  Linked Lists do not run into these problems.": 0.9737075567245483, "linked lists have an indefinite size, whereas arrays are a specific size.": 0.9495795369148254, "Linked lists have no predefined length, and thus you can have virtually unlimited items in that list.": 0.9522780776023865, "They grow dynamically, unlike the fixed size array": 0.9642800688743591, "you can add as many nodes as you like without having to specify a list size, if an array gets too big you have to copy its entire contents to another larger array to get more room": 0.9610627293586731, "Linkded list does not have a fixed size. Arrays have a fixed size.": 0.964984118938446, "Linked lists have a dynamic size, where as arrays have a static size.": 0.9724376797676086, "linked lists do not have a memory constraint other than total memory": 0.8264533877372742, "The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list, whereas arrays may waste memory for small data sets, and run out of space for large data sets.": 0.9457168579101562, "Array have fixed size, in Link List are flexible for adding or deleting an element. ": 0.9686797261238098, "they are resizeable": 0.6362513303756714, "Linked lists can be dynamically allocated and their size can change as needed.": 0.953973650932312, "linked lists do not have to have a specified size, they are easier to add to and remove from": 0.9542340040206909, "they dont have a fixed size, no shiftnig needs to be done for insertion/deletion.": 0.9273053407669067, "linked list many be dynamically grown. It has not limit": 0.9480124115943909, "A data structure in C++ where the the first element in the queue is the first element taken out of the queue.": 0.9495322108268738, "A queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior.": 0.9097705483436584, "First in first out.": 0.870023787021637, "A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.": 0.9726511240005493, "A data structure that implements first in, first out. The element that has been there the longest is the first to get served.": 0.9764415621757507, "a data structure that inserts elements at the end of it and removes elements from the front.": 0.9516348242759705, "A queue is a collection of elements with the characteristics of first in first out (FIFO).  The first item in is the first item out.  All additional items are added to the end of the list.": 0.9691262245178223, "A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it's end, and data taken is always from the beginning.": 0.9585849642753601, "It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions.": 0.9555476307868958, "A queue is a data type that operates under a FILO (First In Last Out) method. This means that the first element inserted into the queue is the first element removed.": 0.9726783037185669, "like a linked list except it is first in last out": 0.9277303218841553, "A queue is like a stack except it follows FIFO (First in first out) .": 0.9454038143157959, "A queue is a data structure where the first node in is the first node out.": 0.97046959400177, "A queue is a First in First out data structure much like a line for a movie theatre.  The first object in line is the first object to be handled or enacted upon.": 0.9734103083610535, "its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.": 0.955010175704956, "a first in first out list of items, like if you put 5, 4, 3, 2, and 1 in the queue it will when you dequeue items remove the items in the same order as put in, so thus it will put out, 5, 4, 3, 2, and 1 in that exact order.": 0.9450562596321106, "A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list": 0.9527820348739624, "a list of objects that follow the rule first in first out, essentially a linked list that goes in order of the first object in the list is the first to be taken off.": 0.9669755101203918, "A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.": 0.9701707363128662, "It is a \"first in first out\" data structure.  It can be implemented with either a linked list or an array.": 0.9585407376289368, "an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.": 0.9680508971214294, "A queue is a linear, first-in first-out data structure. Data must be accessed in the same order it was put into the queue, so only the oldest item in the queue is accessible at any time. Main functions defined are enqueue and dequeue.": 0.9656463265419006, "Queue is a buffer, it follows the rule of First In and First out. Queue is very useful in computer science for scheduleing .": 0.9734377861022949, "a queue is a set of elements where the first element inserted is the first element to be removed": 0.9198026657104492, "Is a list of items where the the user only has access to the first element and each new element is added at the end.": 0.9469910264015198, "a queue is a list of data that follows the fifo principle, an example of this would be when you get into a line at a movie theater...the first one there gets to buy a ticket first": 0.9622038006782532, "A queue is a data structure that holds a set of objects, which has a FIFO (first in first out) priority.": 0.9742655158042908, "like a linked list expect first in last out": 0.9463954567909241, "Pop, which removes the head, or least recently inserted node from the stack. Push, which inserts a new node at the head of the stack.": 0.8805936574935913, "Push and pop": 1.0, "The Push function and the Pop function.": 0.9011679291725159, "push - puts an element on the stack pop- takes an element off the stack": 0.8272860646247864, "Push  and pop.": 0.9449731111526489, "Push and Pop. Push adds an element to the stack, while Pop removes the top element from a stack.": 0.9127042293548584, "push,pop,search,isEmpty": 0.9124535918235779, "Push, Pop, isEmpty, isFull  Maybe List to show all elements or an operation to count how many elements in the stack.": 0.8854144811630249, "pop, push": 0.9705137014389038, "isempty, push and pop, along with usually, ": 0.8915574550628662, "push and pop. push puts objects into the stack and pop takes them out following the first in last out rule.": 0.9239763617515564, "The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.": 0.9067392349243164, "push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack": 0.8627418279647827, "the main functions defined for a stack are push, which puts an element on the top of the stack, and pop, which removes an item from the top.": 0.8639816641807556, "Push() Pop() Full() IsEmpty()": 0.7297919392585754, "pop and push to remove an element and to insert an element": 0.899845540523529, "Push, Pop": 0.9705137014389038, "push - Add an element to the top of the stack pop - remove the top element from the stack": 0.8378458619117737, "When you traverse a tree of any size you will visit each node three times.  Its on the order of 3n or O(n) running time.": 0.9745054841041565, "The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left, then bottom, then right sides.": 0.9852709174156189, "Where you visit the in order according to its data value.": 0.9326202273368835, "It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm. ": 0.9628980755805969, "Start from the root, circle around the _whole_ \"tree\", naming each node as you see it.": 0.9617394804954529, "it is where you visit the parent then you vistit the children": 0.8476003408432007, "To start from the root , traveling left and visiting ever child along the way till you return to the root from the right.": 0.9715018272399902, "Traversing a tree down to it's terminal child and then all of it's siblings, then it traverses up the terminal child's parent and all of it's siblings (repeating the first step if those siblings have children) until the root node has been visited.": 0.9316887855529785, "The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node.": 0.9492232203483582, "You travel the outside edge of the tree, clockwise, while naming each node.": 0.9640265703201294, "children to root": 0.7548918724060059, "go to the bottom of the left sub tree and visit the parent and then its children": 0.9213190674781799, "The Euler tour traverses through the tree in a rubber-band style shape.": 0.9152964949607849, "The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first, cupping in to visit the parents of children nodes.  It allows for each node to be visited from the left, the right and the bottom.  The Euler tour first progresses to a left child if there is one, then progresses to it's parent, then it's next child, then it's parent's parent.": 0.9780781865119934, "it runs through the parents and the children in order": 0.8176056742668152, "it starts node on the left of the root and then proceeds to visits each node in a left to right order, visits the root, and then proceeds to repeat the previous step on the right side of the tree.": 0.9758163094520569, "Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.": 0.9386420845985413, "has preorder, in order, and postorder of a tree.  preorder = puts the parent node in front of the child node(s).  in order = puts the parent node between the left child and right child node(s).  postorder = puts the parent node after the child node(s).": 0.9601293206214905, "The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal. ": 0.982071578502655, "An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree.  Each element in the tree is visited 3 times.  From the left, from the bottom and from the right.": 0.987231969833374, "Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.": 0.9678909182548523, "The Euler tour visits every node in a tree, starting with the root and working around the tree counterclockwise. in-order, post-order, and pre-order traversals can be seen as variations of the Euler tour traversal.": 0.9547411203384399, "to traverse going down to the left then go to the right of last children and back to the top.. kind of like going around the tree": 0.9536570906639099, "You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.": 0.9705133438110352, "the euler tour is a way to traverse a tree where you come into contact with each node three times, from the left, from the right, and from the bottom": 0.975821316242218, "traversing a tree level by level": 0.7516321539878845, "The Euler traversal through the tree in a rubber band style shape.": 0.9417065978050232, "if root, set root to NULL else if deleting right leaf, set rightPtr of parent node to NULL else if deleting left leaf, set leftPtr of parent node to NULL else if deleting a left or right subtree child node, set the max leaf child in the left subtree as the new child node.": 0.947650671005249, "Traverse the tree and find the node, if the node has no children, simply delete it; otherwise set the node's data equal to the data of one of its children then set the pointer for that child to NULL.": 0.9258756637573242, "first attaching the elements from the node to be deleting to alternate nodes and then deleting that node.    delete node;": 0.8559170961380005, "If you delete a node from a tree, you have to link that nodes parents to the children of that node.": 0.9061620831489563, "Must delete the information that the node contains (to free up memory/ \"garbage collect\") and also delete the pointer (in that node's \"parent\") that points to the node you wish to delete.": 0.9069697260856628, "you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.": 0.953116774559021, "You traverse the tree till you find the node you are wanting to delete.  If the node has no children you delete it.  If the node has children, before you delete, you find the left-most of its children and attach it to the root then you can delete the node.": 0.9306761622428894, "Link the to-be-deleted's left child to the to-be-deleted's parent's left child pointer.": 0.8872812986373901, "The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root. And delete the nodes and set the root to NULL.": 0.9342472553253174, "You remove the element from the tree and move the next highest element from the left into its place.": 0.9317849278450012, "delete node;": 0.6191455721855164, "the deletion of a node depends upon if it has children and if it is an AVL binary search tree. Assuming it is not an AVL tree, and the node being deleted has no children, you just set its pointer to null. If it has a left child or a right child exclusively, that child replaces the deleted node, if it has two children, the left most child of the right sub tree (or right most child of the left subtree)will replace it": 0.9525469541549683, "If the node is a leaf, just set it's parent's pointer to null and delete it, if it has a single child, set the parent's pointer to the child and delete; if it has two children, set the node to one of the middle children and remove that child from its previous position as a leaf (rightmost child of the left subtree or leftmost child of the right subtree).": 0.9459359645843506, "In a binary search tree, you must first establish a proper replacement for the node you are about to delete, usually a child from the soon to be deleted node.  Once that replacement node has been found, you simply reassign it to where the node that is going to be deleted is.  After the deleted node has been usurped, you remove the deleted node from memory so it may be used again. ": 0.9374228715896606, "It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.": 0.9202719926834106, "if the node has no children, delete it right away, otherwise, put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it's children get handled properly.": 0.9513448476791382, "Create a temp Node  Set temp's values to the Node after head  or NULL in the case of only head Node in the list.   Set head equal to temp. Delete temp": 0.9275563359260559, "by searching down the tree until you find the node, and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree.": 0.9561855792999268, "Set the nodes to NULL, where that it doesn't point to anything, and the use the DELETE opertator to clear space from memory.": 0.9268558025360107, "You must first traverse the tree to find the appropriate value.  Then you must make sure that the node is a leaf node.  If it is, then you can delete the pointer to that specific node.": 0.931666374206543, "if the node is a leaf, you set it's parent's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.": 0.9514435529708862, "if the node is a leaf it can simply be deallocated/deleted from memory, and its parent's reference to it changed to NULL. If the node has a single child, the pointer to it should be made to point to its child before deleting the node. Should the node have two children, the easiest solution may be to copy the node's entire subtree to a new array or tree, delete the node and all descendants, then add the elements taken from the subtree back into the main tree.": 0.940521240234375, "you cannot delete a node because that can cause a node to have more than 2 children": 0.833809494972229, "You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a  node, you replace the node with either of the children nodes.": 0.9371404051780701, "to delete the node, you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller": 0.9157319068908691, "if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.": 0.9140886068344116, "pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place": 0.9094090461730957, "Log(n) where n is the number of nodes.": 0.8840097784996033, "log(n) steps": 0.7828985452651978, "The number of levels and the height of the tree": 0.9082903265953064, "It is the same as the height of the tree.": 0.9762881398200989, "Given n elements, it would take n/2 steps to find the search criteria.": 0.8971017599105835, "log n": 0.7291101813316345, "Depends on the location of the node you are looking for. If it is the root it is one step.  else If it is smaller than the current you are on node you go to the left.  If it is larger than the current node you are on go to the right.": 0.9376282691955566, "2^n where n is the # of levels the binary tree has": 0.7757605314254761, "The number of steps to search a node is the function n-1.": 0.8939085006713867, "It would take n/2 elements, given n.": 0.9005933403968811, "O( Log (n) )": 0.7916828393936157, "If the binary search tree is constructed efficiently, best case scenario is O(log n) time.  Where n is the number of items in the tree.  If the binary search tree is constructed poorly, with for instance the root of the tree being 1, and progressing downwards and to the right its children are each more than the last: you have a one-way linear linked list.  That worse case scenario would be a full traversal at O(n) time. Where n is the number of items in the tree.": 0.9365189075469971, "N, n being the number of nodes.": 0.9017739295959473, "depending on the way that the tree is ordered, it could be anywhere between log(n) and N steps.": 0.9106553196907043, "worst case scenario = the number of levels of the tree, ie: the node at the farthest position from the root node.  best case = 1 step if its the root node.": 0.9183167815208435, "3 steps at most.  There are 3 cases.": 0.9048085808753967, "log(n)    where n equals the total number of nodes in the tree.": 0.8790562152862549, "the same number of steps as the number of levels or generations in the tree": 0.8575462698936462, "to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree.": 0.9183375239372253, "three steps visit the root node, then go to right subtree, after visiting right subtree visit left subtree": 0.8688380718231201, "( n(n-1) ) / 2": 0.76173996925354, "2n-1": 0.3275083601474762, "it takes at most h steps, where h is the height of the tree.": 0.9278647899627686, "it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node": 0.8810659646987915}