,id,answer,score_me,score_other,score_avg,bert_distance,bert_similarity_score,normalized_bert_score,elmo_similarity_score,normalized_elmo_score,gpt_similarity_score,normalized_gpt_score,gpt2_similarity_score,normalized_gpt2_score
0,1.1,High risk problems are address in the prototype program to make sure that the program is feasible.  A prototype may also be used to show a company that the software can be possibly programmed.,4,3,3.5,0.02761769295,0.9723823071,0.9647592137,0.2961798906,0.3822948978,0.9949564265,0.9423341268,0.9999457748,0.9360623848
1,1.1,To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.,5,5,5,0.02839875221,0.9716012478,0.9637625648,0.5041723251,0.5648386846,0.9935473021,0.9262228539,0.9999495994,0.9405720437
2,1.1,A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.,5,3,4,0.01391863823,0.9860813618,0.9822395101,0.7864713669,0.812597389,0.9990154815,0.9887434732,0.9999825027,0.9793686625
3,1.1,"Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product.  Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.",5,5,5,0.01651012897,0.983489871,0.9789327106,0.6177712679,0.6645383744,0.9920655367,0.9092810377,0.9999879105,0.9857451264
4,1.1,It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.,3,3,3,0.02242964506,0.9775703549,0.9713792773,0.457669884,0.52402599,0.9951580917,0.9446398727,0.9999792639,0.9755498398
5,1.1,To find problem and errors in a program before it is finalized,2,2,2,0.05223947763,0.9477605224,0.9333412724,0.0966520533,0.2071800332,0.9944987822,0.9371016352,0.999930053,0.9175246522
6,1.1,"To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible. ",3,2,2.5,0.02779108286,0.9722089171,0.9645379642,0.2792869508,0.367468872,0.9956336,0.9500766139,0.999963253,0.9566711109
7,1.1,you can break the whole program into prototype programs to simulate parts of the final program,5,5,5,0.03721433878,0.9627856612,0.9525136815,0.3503257036,0.4298157692,0.9905921906,0.8924354835,0.9999738374,0.9691513523
8,1.1,-To provide an example or model of how the finished program should perfom.  -Provides forsight of some of the challanges that would be encountered.  -Provides opportunity To introduce changes To the finished program.,5,2,3.5,0.03602951765,0.9639704823,0.9540255394,0.3399498761,0.4207094628,0.9963232463,0.9579617085,0.9999851668,0.9825099791
9,1.1,Simulating the behavior of only a portion of the desired software product.,5,5,5,0.01137292385,0.9886270761,0.9854878978,0.8689111471,0.8849503556,0.9986046153,0.9840458208,0.9999515009,0.9428141139
10,1.1,A program that stimulates the behavior of portions of the desired software product.,5,5,5,0.01170969009,0.9882903099,0.9850581767,0.8256347775,0.8469690108,0.9985026014,0.9828794414,0.9999854255,0.9828150835
11,1.1,A program that simulates the behavior of portions of the desired software product.,5,5,5,0.0114569068,0.9885430932,0.9853807338,0.9114789963,0.9223098702,0.9985026014,0.9828794414,0.9999854255,0.9828150835
12,1.1,To lay out the basics and give you a starting point in the actual problem solving.,2,2,2,0.03590524197,0.964094758,0.9541841179,0.1381003112,0.2435569426,0.9935240547,0.9259570547,0.9999645606,0.9582129992
13,1.1,To simulate problem solving for parts of the problem,4,5,4.5,0.03451615572,0.9654838443,0.9559566228,0.419138521,0.4902090825,0.9959318677,0.9534868676,0.9999783145,0.9744303891
14,1.1,A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.,2,2,2,0.03263473511,0.9673652649,0.958357357,0.2745000422,0.3632676594,0.9951970101,0.9450848475,0.9999775935,0.9735802281
15,1.1,"A prototype program is a part of the Specification phase of Software Problem Solvin.  It's employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.",4,5,4.5,0.02427434921,0.9757256508,0.9690253941,0.3541264832,0.4331515093,0.9946912018,0.9393016713,0.9999673286,0.961476802
16,1.1,Program that simulates the behavior of portions of the desired software product,5,5,5,0.02130579948,0.9786942005,0.9728133291,0.8694002032,0.8853795739,0.9975166619,0.9716066674,0.9999861689,0.9836915991
17,1.1,it provides a limited proof of concept to verify with the client before actually programming the whole application.,2,2,2,0.02058523893,0.9794147611,0.9737327804,0.3382557631,0.4192226308,0.9936076691,0.9269130619,0.9999761604,0.9718904822
18,1.1,It tests the main function of the program while leaving out the finer details.,2,2,2,0.02528935671,0.9747106433,0.9677302221,0.2940894067,0.3804601924,0.9980257171,0.9774269683,0.9999563808,0.948568029
19,1.1,To get early feedback from users in early stages of development.  To show users a first idea of what the program will do/look like.  To make sure the program will meet requirements before intense programming begins.,3,2,2.5,0.02767193317,0.9723280668,0.9646900019,0.3859876394,0.4611143346,0.9924299196,0.9134472223,0.9999819993,0.9787751206
20,1.1,it simulates the behavior of portions of the desired software product,5,5,5,0.01666432619,0.9833356738,0.9787359516,0.8914508224,0.9047322178,0.9978230446,0.9751097046,0.9999867213,0.9843428764
21,1.1,It simulates the behavior of portions of the desired software product.,5,5,5,0.008736014366,0.9912639856,0.9888526526,0.9440821409,0.9509238989,1,1,0.9999878725,0.9857003185
22,1.1,A prototype program is used in problem solving to collect data for the problem.,1,2,1.5,0.04046738148,0.9595326185,0.9483627272,0.272711277,0.3616977563,0.994843417,0.9410420287,0.9999394499,0.9286046802
23,1.1,To ease the understanding of problem under discussion and to ease the understanding of the program itself,2,3,2.5,0.02441692352,0.9755830765,0.9688434662,0.1266872883,0.2335403455,0.9985175752,0.9830506442,0.9999892148,0.9872830248
24,1.1,it simulates the behavior of portions of the desired software product,5,5,5,0.01666432619,0.9833356738,0.9787359516,0.8914508224,0.9047322178,0.9978230446,0.9751097046,0.9999867213,0.9843428764
25,1.1,The role of a prototype program is to help spot key problems that may arise during the actual programing.,2,2,2,0.03136414289,0.9686358571,0.9599786607,0.3238514066,0.4065807009,0.9955934376,0.949617416,0.9999654024,0.9592055081
26,1.1,"the prototype program gives a general idea of what the end product will do,   without the time and effort to write out the entire program.",4,2,3,0.02900564671,0.9709943533,0.962988154,0.3255220056,0.4080468959,0.9935786198,0.9265809259,0.9999676681,0.961877043
27,1.1,to show that a certain part of the program works as it is supposed to,4,2,3,0.0341770649,0.9658229351,0.9563893101,0.1738153994,0.274902157,0.9869522898,0.8508185515,0.9999198581,0.9055036448
28,1.1,"Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution. ",3,2,2.5,0.02351373434,0.9764862657,0.9699959555,0.369107306,0.4462993727,0.9924954366,0.914196314,0.999983329,0.9803429793
29,1.2,Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.,5,2,3.5,0.06367146969,0.9363285303,0.918753798,0.2934398651,0.3798901246,0.9862947369,0.8433003972,0.9999331067,0.9211253396
30,1.2,The implementation phase and the maintenance phase are effected,3,5,4,0.05760914087,0.9423908591,0.9264894634,0.577789247,0.6294483024,0.991254753,0.9000109146,0.999943062,0.9328637428
31,1.2,"Verification, coding, refining the solution and maintenance are all influenced by the testing stage.",4,5,4.5,0.05338054895,0.946619451,0.9318852401,0.4675556123,0.5327021628,0.9889959297,0.8741845794,0.9999048512,0.8878088545
32,1.2,"In RUP the stages in the software life cycle are influenced by the testing stage is:  Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates.  Construction phase- iterative development of remaining system.  Transition phase-testing and deployment of the system.",2,4,3,0.04370987415,0.9562901258,0.9442252348,0.5026196241,0.5634759624,0.986182072,0.8420122396,0.9999376779,0.9265152202
33,1.2,"Refining the solution, Production and Maintenance are all influenced by the Testing stage. ",3,3,3,0.05351424217,0.9464857578,0.9317146447,0.4166275561,0.4880053435,0.9912752075,0.9002447818,0.9998874903,0.8673384459
34,1.2,"Elaboration, Construction, and Transition are all affected by testing",2,2,2,0.0717074275,0.9282925725,0.9084997383,0.1318166703,0.2380421285,0.9869721135,0.8510452066,0.9998593395,0.8341454741
35,1.2,"Refining, Production, Maintenance",3,4,3.5,0.1278999448,0.8721000552,0.8367968447,0.1119660214,0.2206202803,0.9909304205,0.8963026471,0.9998584752,0.8331263632
36,1.2,Refining the solution,3,5,4,0.09624528885,0.9037547112,0.8771888851,0.219870761,0.3153224739,0.9814299255,0.7876784079,0.9998918302,0.8724556189
37,1.2,-Verification  -Debugging,3,1,2,0.5652030408,0.4347969592,0.2787884328,0.1102214605,0.2190891729,0.9836867553,0.8134819499,0.9996622822,0.6017928028
38,1.2,Refining and Coding,5,5,5,0.08910804987,0.9108919501,0.8862961596,0.1496843398,0.2537236222,0.9784786795,0.7539352337,0.9999031204,0.8857681063
39,1.2,"The second half of the Elaboration phase, Construction phase, and the Transition phase. ",2,3,2.5,0.05463457108,0.9453654289,0.9302850802,0.5981388688,0.6473080723,0.9885646922,0.8692540105,0.9999231678,0.9094061643
40,1.2,"The refining step, the production step, and the maintenance stage.  ",3,4,3.5,0.05895382166,0.9410461783,0.924773621,0.4808118641,0.5443364629,0.9900651034,0.8864090137,0.9999348387,0.9231675515
41,1.2,"Elaboration, Construction, Transition",2,2,2,0.1035618186,0.8964381814,0.8678528315,0.07609939575,0.1891420697,0.9909304205,0.8963026471,0.999878709,0.8569842824
42,1.2,Refining.,3,3,3,0.1941372156,0.8058627844,0.7522766238,0.1389952004,0.2443423388,0.9736070826,0.6982356606,0.9998491089,0.822082426
43,1.2,"The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.",2,1,1.5,0.05351752043,0.9464824796,0.9317104616,0.4109953046,0.483062219,0.9941485289,0.9330970018,0.9999101474,0.8940536555
44,1.2,"Directly: Refining, coding.  Because Refining is right before the Testing Phase and Coding is right after the Testing Phase.  Indirectly: Production, Maintenance.  Because Refining occurs before these last two stages in the Software Life Cycle.",5,5,5,0.05453211069,0.9454678893,0.930415822,0.3593033254,0.4376949456,0.988013615,0.8629532505,0.9999096028,0.8934115442
45,1.2,"Testing, refining, production, and maintenance.",3,4,3.5,0.1087965369,0.8912034631,0.8611732153,0.2211283147,0.3164261612,0.9896618037,0.8817978728,0.9998457831,0.8181610113
46,1.2,"Depending on how the work is done, Testing is spread throughout the  process as to prevent errors from showing up later on due to lack of foresight. ",2,1,1.5,0.0716509223,0.9283490777,0.9085718401,0.05287811533,0.1687619993,0.9829766384,0.8053628035,0.9999249461,0.9115030508
47,1.2,"Elaboration, construction, and transition.",2,3,2.5,0.109662354,0.890337646,0.8600684135,0.1311653256,0.2374704783,0.989272844,0.8773506884,0.9998716814,0.8486979109
48,1.2,"All stages are influenced except setting the program requirements.  If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.",2,1,1.5,0.05974823236,0.9402517676,0.9237599354,0.3522845805,0.4315349702,0.9924056007,0.9131691711,0.9999177504,0.9030184521
49,1.2,"Refining, production, and maintenance",3,3,3,0.1112138033,0.8887861967,0.8580887299,0.1523013413,0.2560204239,0.9896904113,0.8821249587,0.9999088339,0.8925049783
50,1.2,coding and refining,5,5,5,0.08910804987,0.9108919501,0.8862961596,0.204779774,0.3020779252,0.9784786795,0.7539352337,0.9999031204,0.8857681063
51,1.2,"refining, production, maintenance.",3,4,3.5,0.1340162754,0.8659837246,0.8289922717,0.1710221469,0.2724506694,0.9907601939,0.8943563561,0.9999096079,0.8934175434
52,1.2,"Removing logical errors, testing for valid data, random data and actual data.",2,0,1,0.08245658875,0.9175434113,0.8947835711,0.09011527896,0.2014430575,0.990398515,0.8902210876,0.9999016455,0.8840290491
53,1.2,1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance,1,4,2.5,0.1443890333,0.8556109667,0.8157564035,0.1554262936,0.2587630267,0.9877408097,0.8598341218,0.999845347,0.8176466939
54,1.2,"Refining stage, Production stage, and Maintenance stage.  ",3,4,3.5,0.08396154642,0.9160384536,0.8928632118,0.5959767103,0.6454104619,0.9934160283,0.9247219305,0.9999236264,0.9099469507
55,1.2,Testing could affect all parts of the life cycle; it could make you go back   to specification if it does not test well.,2,2,2,0.08097267151,0.9190273285,0.8966770822,0.2328196317,0.3266870021,0.9854606773,0.8337641479,0.9999005649,0.8827548649
56,1.2,coding,3,3,3,0.1329309344,0.8670690656,0.8303771908,0.2092223763,0.3059769587,0.9575446886,0.5145857208,0.999684292,0.6277448096
57,1.2,"The Individual components and steps such as  analysis, design, and implementing code  as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output ",1,2,1.5,0.05608844757,0.9439115524,0.9284299017,0.3358141184,0.4170797304,0.9889187153,0.8733017458,0.9999246285,0.911128572
58,1.3,"Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.",4,5,4.5,0.1170705557,0.8829294443,0.8506153845,0.2297819406,0.3240209838,0.9749748034,0.7138735439,0.9999131638,0.8976104044
59,1.3,"This type of programming is more flexible, making it easier to add and modify the program.  It is also a type of a fail safe program, you check each individual module.  This eliminates redundant code and makes the program easier to read for other programmers.  When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.",5,5,5,0.1153850555,0.8846149445,0.85276612,0.1781673133,0.2787215981,0.9692338378,0.6482340146,0.9999235107,0.9098104749
60,1.3,The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier.,3,4,3.5,0.1006350517,0.8993649483,0.8715874507,0.3167737722,0.4003690414,0.9897687632,0.8830207985,0.999964562,0.9582146057
61,1.3,The advantages is that OOP allows us to build classes of objects.  Three principles that make up OOP are:  Encapsulation- Objects combine data and operations.  Inheritance- Classes can inherit properties from other classes.  Polymorphism- Objects can determine appropriate operations at execution time.,2,3,2.5,0.1104465127,0.8895534873,0.8590678097,0.387108326,0.462097901,0.9808233598,0.7807432178,0.9999659006,0.9597930008
62,1.3,Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.,3,4,3.5,0.1052248478,0.8947751522,0.8657307695,0.3331481218,0.4147399284,0.9896210447,0.8813318532,0.9999615141,0.9546207969
63,1.3,Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.,1,1,1,0.1190172434,0.8809827566,0.8481313679,0.2388381511,0.3319691333,0.9856900143,0.8363862812,0.9999311456,0.9188129008
64,1.3,"Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.",4,4,4,0.08932119608,0.9106788039,0.8860241804,0.3621056378,0.4401543847,0.9717478161,0.6769776734,0.9999813648,0.9780269985
65,1.3,Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time,2,3,2.5,0.1606426835,0.8393573165,0.7950163867,0.2005992085,0.2984088674,0.9879168346,0.8618467078,0.999953531,0.9452077877
66,1.3,-Easier to debugg   -Reusability,3,3,3,0.3462772965,0.6537227035,0.5581425193,0.1929479241,0.2916937462,0.9941109062,0.9326668408,0.9999360193,0.9245595115
67,1.3,Re-usability  and ease of maintenance,3,5,4,0.1343379617,0.8656620383,0.8285817929,0.3348133862,0.4162014415,0.9982743335,0.9802695324,0.9999858426,0.9833067827
68,1.3,"One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works.   Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance.   Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism. ",5,5,5,0.1207963228,0.8792036772,0.8458612233,0.2579091787,0.3487067498,0.9790062305,0.7599670065,0.9999537841,0.9455062185
69,1.3,"Existing classes can be reused, and program maintenance and verification are easier.",3,4,3.5,0.09447753429,0.9055224657,0.8794445789,0.4184402227,0.4895962237,0.9815601433,0.7891672576,0.9999747922,0.9702772205
70,1.3,Using different modules allows for easier debugging,2,2,2,0.1484940052,0.8515059948,0.8105183687,0.118523404,0.2263753428,0.9905951157,0.8924689278,0.9999394735,0.9286324423
71,1.3,"Data encapsulation concept,the use of functions or methods to manipulate data.",3,4,3.5,0.1089984775,0.8910015225,0.8609155346,0.4015309215,0.4747558383,0.98508776,0.8295003851,0.9999535868,0.9452736589
72,1.3,"Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.",5,4,4.5,0.09687829018,0.9031217098,0.8763811614,0.3119634688,0.3961472965,0.9731764534,0.693312047,0.9999823668,0.9792084551
73,1.3,"Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify.  The code itself also looks more organized and is easier to read and will help to avoid redundant coding.  Post-programming maintenance is also easier.  Also, modules can be reused several times in other programs without too much hassle.   Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them.  Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.",5,5,5,0.108676374,0.891323626,0.8613265458,0.3072520494,0.3920123368,0.9636927494,0.584879788,0.9999564598,0.9486612398
74,1.3,"Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.",4,5,4.5,0.1043386459,0.8956613541,0.8668615827,0.321000427,0.4040785492,0.9836014567,0.8125066847,0.9999751564,0.9707066072
75,1.3,Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.,3,4,3.5,0.100212872,0.899787128,0.8721261613,0.3296211362,0.4116444826,0.9865203495,0.8458799475,0.9999734852,0.9687360257
76,1.3,Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.,5,3,4,0.1048683524,0.8951316476,0.8661856655,0.4212119877,0.4920288529,0.9729374413,0.690579294,0.999968429,0.9627742025
77,1.3,"They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.",5,4,4.5,0.1152458191,0.8847541809,0.8529437887,0.2091399431,0.3059046115,0.9863217395,0.8436091327,0.9999624731,0.9557515767
78,1.3,"Existing classes can be reused, Program maintenance and verification are easier ",3,4,3.5,0.1247554421,0.8752445579,0.8408092996,0.2777526677,0.3661223141,0.9843944663,0.8215735875,0.9999757139,0.9713639735
79,1.3,"Existing classes can be feused, Program maintenance and verification are easier",3,4,3.5,0.1220135689,0.8779864311,0.8443079904,0.2469197959,0.3390619588,0.9843944663,0.8215735875,0.9999757139,0.9713639735
80,1.3,"the main advantages to object-oriented programming  is data abstraction, easier maintenance, and re-usability.",5,5,5,0.07751083374,0.9224891663,0.9010944637,0.5095148683,0.5695275477,0.988539058,0.868960921,0.9999839819,0.9811128838
81,1.3,Existing classes can be reused Program maintenance and verifications are easy,3,5,4,0.1393743157,0.8606256843,0.8221552939,0.2432212383,0.3358159334,0.992030309,0.908878261,0.9999641955,0.9577825267
82,1.3,1- Existing classes can be reused 2- Program maintenance and verification are easier,3,4,3.5,0.1480761766,0.8519238234,0.8110515272,0.2004861385,0.298309632,0.9902115125,0.8880829875,0.9999653999,0.9592025592
83,1.3,Information can be hidden. It is easier to debug. Programming is easier and more manageable.,3,4,3.5,0.09588027,0.90411973,0.8776546572,0.3745775521,0.4511003139,0.990356511,0.8897408326,0.9999605365,0.9534681106
84,1.3,"Existing classes can be reused, program maintenance and verification are   easier.",3,4,3.5,0.1008704901,0.8991295099,0.8712870261,0.3966002464,0.4704284497,0.9832139416,0.8080760175,0.9999771773,0.9730895219
85,1.3,existing classes can be reused program maintenance and verification are easier,3,4,3.5,0.1359740496,0.8640259504,0.8264941086,0.2148855627,0.3109472331,0.9919080643,0.9074805718,0.9999558737,0.9479701865
86,1.3,"Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class.  Example in the book included obj clock and how obj alarm would still use clock from the first class. ",3,4,3.5,0.1133553386,0.8866446614,0.8553560836,0.2935725152,0.3800065445,0.9722276738,0.6824641431,0.9999422484,0.9319043865
87,1.4,At function â€˜int main ()â€™,5,5,5,0.0601311326,0.9398688674,0.9232713463,0.5253770947,0.5834489718,0.9878804028,0.861430164,0.999850121,0.82327581
88,1.4,the Function main().,5,5,5,0.03824657202,0.961753428,0.9511965291,0.7467816472,0.7777638541,0.9907703129,0.8944720521,0.9999059162,0.8890646136
89,1.4,c++ programs begin to execute in the main method.,5,5,5,0.0545540452,0.9454459548,0.9303878331,0.4440321326,0.5120568683,0.9911559814,0.8988816063,0.9998779015,0.8560322002
90,1.4,A C++ program will begin to execute at the main() function.,5,5,5,0.03557497263,0.9644250274,0.954605549,0.6102692485,0.6579542549,0.9884297687,0.8677113576,0.9998908958,0.8713538965
91,1.4,They begin in the main() function.,5,5,5,0.03817361593,0.9618263841,0.9512896227,0.7089418769,0.7445539204,0.9892543054,0.8771387265,0.9999124619,0.8967827871
92,1.4,Int main(),5,5,5,0.1163467169,0.8836532831,0.8515390188,0.3541322649,0.4331565835,0.9857484665,0.8370545964,0.999852542,0.8261304749
93,1.4,main method,5,5,5,0.1185055971,0.8814944029,0.8487842399,0.3644489646,0.4422109967,0.9850270654,0.8288064321,0.9999173695,0.9025694138
94,1.4,in the testing phase,0,0,0,0.09965890646,0.9003410935,0.8728330335,0.01915854029,0.1391681396,0.9906150346,0.8926966722,0.9999194269,0.9049952485
95,1.4,-At the MAIN function,5,5,5,0.06002867222,0.9399713278,0.923402088,0.4813749492,0.5448306524,0.9949176587,0.9418908735,0.9998190743,0.7866683206
96,1.4,main,5,5,5,0.161395669,0.838604331,0.7940555606,0.4940617681,0.5559651918,0.9697550323,0.6541931099,0.9998078415,0.7734235735
97,1.4,They begin to execute at the funcion main().,5,5,5,0.04107630253,0.9589236975,0.9475857305,0.5749241114,0.6269337267,0.9907759111,0.8945360586,0.9998842601,0.8635296879
98,1.4,The main method.,5,5,5,0.02892619371,0.9710738063,0.9630895378,0.6516287923,0.6942533048,0.9939883009,0.9312650288,0.9999572511,0.9495942118
99,1.4,At the root,0,5,2.5,0.08647036552,0.9135296345,0.8896619032,0.2566561401,0.3476070251,0.9951829478,0.9449240667,0.9999545716,0.9464348206
100,1.4,In the main() function.,5,5,5,0.040759027,0.959240973,0.9479905811,0.7901148796,0.8157951044,0.9946526485,0.938860871,0.9999581272,0.9506273018
101,1.4,C++ programs begin execution at main.,5,5,5,0.06226962805,0.937730372,0.9205425789,0.496552974,0.5581515894,0.9893462623,0.8781901197,0.9997644276,0.7222336431
102,1.4,In the Main function..?,5,5,5,0.04406541586,0.9559345841,0.9437715558,0.5966117978,0.6459678441,0.9940085259,0.9314962721,0.9998864036,0.8660571225
103,1.4,"At the ""main()"" function",5,5,5,0.07884442806,0.9211555719,0.8993927678,0.523801744,0.5820663711,0.9918107701,0.9063681546,0.9999197579,0.9053855372
104,1.4,The main function.,5,5,5,0.01095253229,0.9890474677,0.9860243268,0.9256865978,0.9347791189,0.9939883009,0.9312650288,0.9999594722,0.9522131328
105,1.4,The function main,5,5,5,0.03559499979,0.9644050002,0.9545799938,0.7450000048,0.7762002023,0.9907071013,0.89374932,0.9999020017,0.8844489515
106,1.4,"After loading the required include statements and libraries, the main method begins the execution.",5,5,5,0.04458576441,0.9554142356,0.9431075796,0.4188372493,0.4899446726,0.9862145743,0.842383856,0.9998996387,0.8816627171
107,1.4,main function,5,5,5,0.08859270811,0.9114072919,0.8869537472,0.6934378743,0.7309468902,0.9850270654,0.8288064321,0.9998980873,0.8798334277
108,1.4,main,5,5,5,0.161395669,0.838604331,0.7940555606,0.4940617681,0.5559651918,0.9697550323,0.6541931099,0.9998078415,0.7734235735
109,1.4,C++ programs begin execution at the main function.,5,5,5,0.03699535131,0.9630046487,0.9527931144,0.6686819196,0.7092199185,0.9916984152,0.9050835417,0.9997934256,0.7564255784
110,1.4,At main,5,5,5,0.07584547997,0.92415452,0.9032194919,0.6442990899,0.6878204187,0.9833629751,0.8097799974,0.9999151455,0.8999469684
111,1.4,they beging to excute at main,5,5,5,0.06434905529,0.9356509447,0.9178891838,0.3571765423,0.4358283823,0.987882367,0.8614526212,0.9998676598,0.8439560858
112,1.4,at the main function  int main() {},5,5,5,0.0664806962,0.9335193038,0.9151691629,0.5805181861,0.6318433456,0.98971176,0.8823690497,0.9999401607,0.9294427071
113,1.4,C++ programs begin execution at the main function.,5,5,5,0.03699535131,0.9630046487,0.9527931144,0.6686819196,0.7092199185,0.9916984152,0.9050835417,0.9997934256,0.7564255784
114,1.4,"in the ""main"" function",5,5,5,0.08024060726,0.9197593927,0.8976112123,0.4558833241,0.5224580224,0.9944404213,0.9364343638,0.9998972075,0.8787961175
115,1.4,Within the main function,5,5,5,0.0330209136,0.9669790864,0.9578645847,0.6533303857,0.6957467019,0.9990706219,0.9893739227,0.9999563312,0.948509605
116,1.5,Variable can be a integer or a string in a program.,1,3,2,0.02550107241,0.9744989276,0.9674600682,0.2299056649,0.32412957,0.9930900979,0.9209953944,0.9999499179,0.9409476052
117,1.5,"In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished. ",4,5,4.5,0.02071732283,0.9792826772,0.9735642384,0.247859776,0.3398869288,0.9911714941,0.8990589705,0.9999369944,0.9257092944
118,1.5,A variable is a location in memory where a value can be stored.,5,5,5,0.01246619225,0.9875338078,0.9840928633,0.7835211754,0.8100081644,0.9974249993,0.9705586405,0.9999830664,0.9800333725
119,1.5," Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.",5,5,5,0.01216286421,0.9878371358,0.9844799166,0.7162231803,0.7509443293,0.9938030037,0.9291464274,0.9999808217,0.9773865796
120,1.5,"A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.",5,5,5,0.01451969147,0.9854803085,0.9814725529,0.6714153886,0.7116189375,0.9951843525,0.9449401265,0.9999690299,0.9634827991
121,1.5,A named object that can hold a numerical or letter value,2,5,3.5,0.02502584457,0.9749741554,0.9680664694,0.4025011659,0.4756073697,0.9980703858,0.9779376892,0.9999658733,0.9597607429
122,1.5,"It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.",3,5,4,0.0260053277,0.9739946723,0.9668166273,0.2922938168,0.3788842995,0.9933190191,0.9236127721,0.9999418086,0.931385783
123,1.5,A variable is a location in the computers memory where a value can be stored for use by a program,5,5,5,0.01658266783,0.9834173322,0.9788401495,0.6265819669,0.6722710516,0.9974957716,0.9713678172,0.9999722489,0.9672783916
124,1.5,-An identifier that holds a location in memory.,3,5,4,0.03612840176,0.9638715982,0.9538993611,0.6121017933,0.6595625811,0.9985931114,0.9839142905,0.9999361015,0.9246565166
125,1.5,a block of memory that holds a specific type of data,5,5,5,0.03336334229,0.9666366577,0.9574276381,0.3027136922,0.3880292644,0.9949919949,0.9427407993,0.9999725058,0.9675812312
126,1.5,It is a location in the computer's memory where it can be stored for use by a program.,5,5,5,0.0181158185,0.9818841815,0.9768838154,0.5461012721,0.601637469,0.9963447211,0.958207242,0.9999655878,0.9594241869
127,1.5,A location in memory where value can be stored.,5,5,5,0.01446449757,0.9855355024,0.9815429815,0.8468846083,0.8656188457,0.9982899713,0.980448327,0.9999794904,0.9758168368
128,1.5,a value/word that can assume any of a set of values,3,3,3,0.0429546237,0.9570453763,0.9451889512,0.2391973138,0.3322843511,0.9952951646,0.9462071014,0.9999330854,0.9211002158
129,1.5,A pointer to a location in memory.,3,5,4,0.02517473698,0.974825263,0.9678764794,0.6365821362,0.681047663,0.9957092002,0.9509409917,0.9999503653,0.9414751325
130,1.5,"A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.",5,5,5,0.02127283812,0.9787271619,0.9728553886,0.4109321237,0.4830067685,0.9890804054,0.8751504358,0.9999653114,0.9590982915
131,1.5,A variable is a value that is subject to change in a computer's memory that can be used by programs.  Programs can change the value of the variable and recall it later or act on it directly.,5,5,5,0.01544004679,0.9845599532,0.9802981592,0.4535965025,0.520451002,0.9960501266,0.9548389856,0.9999460519,0.9363890952
132,1.5,a symbol that stands in for a value that may or may not change depending on the program.,3,5,4,0.0221310854,0.9778689146,0.9717602461,0.3032686114,0.3885162872,0.9959378525,0.9535552956,0.9999435651,0.9334569319
133,1.5,"a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc. ",4,5,4.5,0.05564248562,0.9443575144,0.9289989591,0.2305199355,0.3246686823,0.9800694215,0.7721230372,0.9999430533,0.9328534642
134,1.5,a stored value used by the program,4,5,4.5,0.04067331553,0.9593266845,0.9480999508,0.3873725533,0.4623297992,0.994311624,0.9349617549,0.9999455501,0.9357974427
135,1.5,"A way to store different values into the program, such as numbers, words, letters, etc.",4,5,4.5,0.03975433111,0.9602456689,0.9492725952,0.3192382753,0.4025320033,0.9930742735,0.9208144657,0.9999524009,0.9438753109
136,1.5,An object with a location in memory where value can be stored,2,5,3.5,0.02217531204,0.977824688,0.971703812,0.7077282667,0.7434887999,0.9968732323,0.9642499928,0.9999734451,0.9686887812
137,1.5,location in memory where a value can be stored,5,5,5,0.02347552776,0.9765244722,0.9700447079,0.739905715,0.7717292178,0.9963028683,0.9577287161,0.9999756067,0.9712375433
138,1.5,a variable is an object where data is stored.,2,5,3.5,0.03260624409,0.9673937559,0.9583937122,0.3397462368,0.4205307395,0.9947083668,0.9394979282,0.9999702831,0.9649604831
139,1.5,Location in memory where a value can be stored.,5,5,5,0.01446449757,0.9855355024,0.9815429815,0.7916576266,0.8171490906,0.9967005669,0.9622758166,0.999983587,0.9806472557
140,1.5,it is a location in memory where value can be stored,5,5,5,0.02130812407,0.9786918759,0.9728103629,0.6950886846,0.7323957176,0.9961340992,0.9557990893,0.9999752234,0.970785548
141,1.5,A variable is the location in a computer's memory where a value can be stored for use by a program.,5,5,5,0.0141825676,0.9858174324,0.9819027304,0.6928923726,0.7304681326,0.9974892467,0.9712932145,0.999980557,0.9770745264
142,1.5,A variable is a location in a computers memory where a value can be stored   for use by a program.,5,5,5,0.01360148191,0.9863985181,0.9826442086,0.6981696486,0.7350997143,0.9974628355,0.9709912411,0.9999756334,0.9712690924
143,1.5,a location in memory where data can be stored and retrieved,5,5,5,0.03436940908,0.9656305909,0.9561438747,0.5366615653,0.5933527455,0.9970292276,0.9660335704,0.9999636366,0.9571235245
144,1.5,"Is a method or identifier I would say,  we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called. ",5,5,5,0.01726001501,0.982739985,0.9779758395,0.4242654741,0.4947087339,0.9889833132,0.8740403283,0.9999673449,0.9614959352
145,1.6,"They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.",1,3,2,0.0334841609,0.9665158391,0.9572734709,0.3344525993,0.4158847982,0.9928370685,0.9181023734,0.9999541148,0.9458962259
146,1.6,In the Function main() before using the variable.,1,5,3,0.02481579781,0.9751842022,0.9683344937,0.5476376414,0.6029858579,0.9885127733,0.8686603941,0.9998430987,0.8149957782
147,1.6,"Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.",5,5,5,0.01280659437,0.9871934056,0.9836585026,0.7017326355,0.7382267565,0.9928145783,0.9178452306,0.9999800779,0.9765095825
148,1.6,Variables are declared where ever it is defined either inside a block locally or outside a block globally.,4,5,4.5,0.02923995256,0.9707600474,0.9626891745,0.4842191339,0.5473268405,0.9933246516,0.923677172,0.9999763562,0.9721213509
149,1.6,Variables are declared before they are actually used. They can be declared before main() to use globally,3,5,4,0.01926898956,0.9807310104,0.9754123436,0.5927082896,0.6425419447,0.9936317522,0.9271884177,0.99997206,0.9670555953
150,1.6,"For good programing practice they should be declared before main(), but should at least be declared before they are used.",2,3,2.5,0.03468197584,0.9653180242,0.9557450326,0.4370476902,0.5059269983,0.9914298817,0.9020132546,0.999973261,0.9684716679
151,1.6,"They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).",5,5,5,0.0250363946,0.9749636054,0.9680530074,0.552821219,0.6075352054,0.9875425745,0.8575675927,0.9999720655,0.9670620881
152,1.6,local variables are declared inside the method while global variables are declared in the body.,5,5,5,0.01648879051,0.9835112095,0.978959939,0.6892040372,0.7272310788,0.9942997866,0.9348264122,0.9999780408,0.9741076897
153,1.6,-Any where in the main function.,1,3,2,0.05119526386,0.9488047361,0.9346737122,0.3349156678,0.4162912086,0.982315102,0.7977991037,0.9999030455,0.8856797413
154,1.6,"Globally for an entire program, and locally for individual functions (including FOR statements)",4,5,4.5,0.04129976034,0.9587002397,0.9473005934,0.4626392722,0.5283873551,0.988311996,0.8663647998,0.9999795249,0.9758576027
155,1.6,They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.,2,4,3,0.02824878693,0.9717512131,0.9639539238,0.3902972341,0.4648966343,0.9931116036,0.9212412803,0.9999614133,0.9545019817
156,1.6,Inside the method.,2,3,2.5,0.06983858347,0.9301614165,0.9108844245,0.2714914083,0.3606271431,0.9859120221,0.8389246151,0.9998486522,0.8215439359
157,1.6,at the top,1,2,1.5,0.1357280016,0.8642719984,0.8268080713,-0.0948856771,0.03907765622,0.966293027,0.6146101525,0.9998117927,0.778082473
158,1.6,Global variables are declared in the body of the code. Local variables are declared in the function they are to be used (unless the function is being passed a variable). Variables should always be declared before use.,5,5,5,0.01394540071,0.9860545993,0.9822053606,0.7404744029,0.7722283246,0.9930876187,0.9209670481,0.9999845075,0.9817325769
159,1.6,Variables are usually declared at the beginning of a module of C++ code.,2,3,2.5,0.03389161825,0.9661083817,0.9567535463,0.4688841403,0.5338681404,0.993235881,0.9226622105,0.9999870422,0.9847212857
160,1.6,"In the main function, usually at the top of code.  They can be declared almost anywhere, but must be declared before the code can use or act upon them.",3,4,3.5,0.02408581972,0.9759141803,0.9692659619,0.4763028026,0.5403791017,0.9887297077,0.871140721,0.9999601797,0.9530474458
161,1.6,in the very beginning of the program. Before the main() starts.,1,3,2,0.04549670219,0.9545032978,0.9419452028,0.336553216,0.4177283967,0.9919179368,0.9075934491,0.9999774521,0.9734135193
162,1.6,"In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc  ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.",2,3,2.5,0.03234231472,0.9676576853,0.9587304919,0.3838783205,0.4592630987,0.9814055961,0.7874002361,0.9999683646,0.9626983092
163,1.6,After declaration of the variable's data type.,1,1,1,0.04122424126,0.9587757587,0.9473969573,0.3888404965,0.463618134,0.9907710781,0.894480801,0.9999274176,0.9144171496
164,1.6,"anywhere in the code, can be at the top, or in the middle of the code, or anywhere.",3,3,3,0.03829199076,0.9617080092,0.9511385737,0.2587004304,0.3494011888,0.9882552853,0.8657163955,0.9999362594,0.9248426973
165,1.6,Before they are used.,2,2,2,0.05986720324,0.9401327968,0.9236081261,0.2543578744,0.3455899607,0.9865246874,0.8459295453,0.9999095751,0.8933788312
166,1.6,Anywhere in the same scope before they are used,3,4,3.5,0.04271775484,0.9572822452,0.9454912011,0.1830786914,0.2830320507,0.9914492887,0.9022351452,0.9999233402,0.9096094452
167,1.6,variables can be declared in classes and methods.,1,4,2.5,0.02684241533,0.9731575847,0.965748485,0.6199510098,0.6664514167,0.9930957287,0.9210597737,0.9999880408,0.9858988037
168,1.6,inside the function scope and outside of the function scope in case of global variables,5,5,5,0.02643281221,0.9735671878,0.9662711476,0.4333076775,0.5026445901,0.9922280345,0.911138962,0.9998095955,0.7754917559
169,1.6,global variables are declared in the main function local variables are declared in any other function,3,5,4,0.02553778887,0.9744622111,0.9674132172,0.6783438325,0.7176996605,0.9944407428,0.936438039,0.9999823518,0.9791907966
170,1.6,"Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.",4,4,4,0.02600574493,0.9739942551,0.966816095,0.4623780847,0.5281581249,0.9940410587,0.9318682375,0.9999649484,0.9586701739
171,1.6,"Variables are declared in the main function, before any operation is   attempted with the variables.",1,3,2,0.02153760195,0.9784623981,0.9725175441,0.6621569395,0.703493294,0.9929207079,0.9190586679,0.9999842269,0.9814017299
172,1.6,"anywhere, but where you declare them depends on where you want them to be accessible (their scope)",4,5,4.5,0.04372239113,0.9562776089,0.944209263,0.3492892981,0.4289061717,0.991719248,0.9053217336,0.9999574303,0.9498055452
173,1.6,It depends if itâ€™s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesnâ€™t need to be declared outside the variable seeing how it is used for the function or block its being called for.,4,5,4.5,0.02300697565,0.9769930243,0.9706425907,0.5533139706,0.607967667,0.9909589921,0.8966293213,0.9999672052,0.9613312762
174,1.7,"""The â€œdoâ€ statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. 	The â€œdo whileâ€ statement executes the lines of code and then it evaluates the condition. """,4,5,4.5,0.03729707003,0.96270293,0.9524081147,0.3338249624,0.415333955,0.9898070801,0.8834588957,0.999879465,0.8578756948
175,1.7,do...while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.,5,5,5,0.01066350937,0.9893364906,0.9863931264,0.7267025113,0.7601414752,0.9925428754,0.9147387061,0.9999669388,0.9610170899
176,1.7,"The main difference between a while and a do...while loop is that the do...while loop always cycles through the loop at least once, but the while loop does not always do so.",5,5,5,0.01377338171,0.9862266183,0.9824248607,0.5308815241,0.5882799138,0.9945580412,0.9377791752,0.9999388668,0.9279170909
177,1.7,While loop used to execute a block of code as long as some condition is true.  A do...while loop used to execute a block of code as long as some condition is satisfied.  The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.,5,5,5,0.01529425383,0.9847057462,0.9804841943,0.5974210501,0.6466780814,0.9919858042,0.9083694135,0.9999459561,0.9362761302
178,1.7,"The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.",5,5,5,0.01285117865,0.9871488214,0.9836016122,0.6338530183,0.6786524628,0.9902119083,0.8880875137,0.9999284854,0.9156762355
179,1.7,A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.,5,5,5,0.01544290781,0.9845570922,0.9802945085,0.6252446771,0.6710973841,0.9892570717,0.8771703562,0.9999194231,0.9049907658
180,1.7,"A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.",5,5,5,0.0133728981,0.9866271019,0.9829358866,0.5790833235,0.6305840438,0.9813050344,0.7862504611,0.9999582367,0.9507563503
181,1.7,a do while loop always executes once. A while loop's conditional statement has to be true for it to run.,5,5,5,0.0208786726,0.9791213274,0.9733583525,0.5923318267,0.6422115434,0.9948585965,0.9412155848,0.9999794605,0.9757816624
182,1.7,"-WHILE statement --The condition is checked for validity, then is repeated until the conditon is false.    -Do...WHILE statement--The code is performed at least once then checked for valid condition.  Will continue to                             ",5,5,5,0.02326858044,0.9767314196,0.9703087773,0.5020393133,0.5629666547,0.9800263634,0.771630731,0.9999515196,0.9428362023
183,1.7,"while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do...while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.",5,5,5,0.01465392113,0.9853460789,0.9813012729,0.6006116271,0.6494782794,0.9762363416,0.7282973854,0.9999168993,0.9020149021
184,1.7,The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once.   The while statement will only execute if its condition is true.,5,5,5,0.01281166077,0.9871883392,0.9836520378,0.779288888,0.8062937131,0.9949293941,0.9420250509,0.999972138,0.967147552
185,1.7,The loop of a do...while statement always executes once.,4,5,4.5,0.01390093565,0.9860990644,0.9822620991,0.7561993003,0.7860292223,0.9955047859,0.9486038136,0.9999827968,0.979715487
186,1.7,"a while statement will only process if the statement is met, while a do...while will always process once, then only continue if the statement is met.",5,5,5,0.01740074158,0.9825992584,0.9777962693,0.6393088102,0.6834407183,0.9876798369,0.8591369865,0.999828938,0.7982986882
187,1.7,"Do ...while runs the embedded code at least once, the do command does not necessarily",4,4,4,0.01729261875,0.9827073812,0.9779342364,0.5212420225,0.5798198411,0.9934100924,0.9246540618,0.9999695149,0.9640545942
188,1.7,"While tests for true first before running, do...while runs once first before checking.",5,5,5,0.03134846687,0.9686515331,0.9599986636,0.5460210443,0.6015670574,0.9901410035,0.8872768208,0.9999281487,0.9152792296
189,1.7,A do...while statement's body always executes at least once.  Where as a while statement will not execute at all unless the condition for the while is true.,5,5,5,0.009015142918,0.9909848571,0.9884964785,0.7754214406,0.8028994623,0.9956633772,0.9504170729,0.9999706469,0.9653893422
190,1.7,The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met.,5,5,5,0.01741492748,0.9825850725,0.9777781678,0.6605822444,0.7021112687,0.992865406,0.9184263709,0.9999369381,0.9256429438
191,1.7,"a do... while loop will always run through once, while an while loop performs a test before running through the loop.",5,5,5,0.0174651742,0.9825348258,0.9777140519,0.5074796677,0.5677413615,0.9921611342,0.9103740553,0.9999688053,0.9632179598
192,1.7,A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.,5,5,5,0.01542186737,0.9845781326,0.9803213565,0.6080043912,0.6559665113,0.9938024437,0.9291400244,0.9999530439,0.944633435
193,1.7,"A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.",3,4,3.5,0.03130698204,0.968693018,0.9600515993,0.2356587946,0.3291787829,0.9906881345,0.8935324624,0.9999174481,0.9026620029
194,1.7,the loop body always executes at least once,3,4,3.5,0.04162698984,0.9583730102,0.9468830413,0.4116508961,0.4836375964,0.9936059797,0.926893747,0.9999552736,0.9472625973
195,1.7,"While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.",5,5,5,0.02361124754,0.9763887525,0.9698715265,0.4602947831,0.526329723,0.9873553043,0.8554264317,0.9998479987,0.8207733504
196,1.7,"A do...while statement will always execute the ""do"" piece of code at least once before checking the condition. A while statement will always check the condition first.",5,5,5,0.01043224335,0.9895677567,0.9866882271,0.6710420847,0.7112913087,0.9935930895,0.9267463663,0.9999501337,0.9412020444
197,1.7,"A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.",5,5,5,0.02367311716,0.9763268828,0.9697925794,0.3858034313,0.460952665,0.9846174331,0.8241228859,0.9999622773,0.9555206451
198,1.7,"a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.",5,5,5,0.01444268227,0.9855573177,0.9815708183,0.6128994823,0.6602626698,0.9845086847,0.8228795077,0.9999152374,0.9000553513
199,1.7,NO ANSWER,0,0,0,0.1777616739,0.8222383261,0.7731721768,0.01117478218,0.132161224,0.9911107491,0.898364441,0.999722446,0.6727326816
200,1.7,"A do...while loop will always execute atleast once, a while loop may never   execute depending on teh conditions.",5,5,5,0.01541769505,0.984582305,0.9803266806,0.6358311176,0.6803885343,0.9928761832,0.9185495926,0.9999763596,0.9721252659
201,1.7,"a while loop is pre-check (it checks the condition statement before it executes the code within the while block)  a do while loop is post-check (it checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is)",5,5,5,0.0232359767,0.9767640233,0.9703503804,0.5280606747,0.5858042058,0.9829213028,0.8047301215,0.9999498357,0.940850619
202,1.7,"))     What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed. ",5,5,5,0.0166208148,0.9833791852,0.9787914731,0.5808182359,0.6321066832,0.9773477493,0.7410047033,0.9999669017,0.9609734423
203,2.1,"For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.",1,3,2,0.1000146866,0.8999853134,0.8723790503,0.2437590063,0.3362879035,0.9782885924,0.7517618658,0.9999364714,0.9250926245
204,2.1,The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.,4,4,4,0.09133851528,0.9086614847,0.8834500365,0.3714479804,0.4483536569,0.983887954,0.8157823617,0.9999279605,0.9150572932
205,2.1,Information telling the compiler what data members and member functions belong to the class.,5,5,5,0.05228018761,0.9477198124,0.9332893256,0.6586151123,0.7003848226,0.9873182122,0.8550023376,0.9999606317,0.9535803185
206,2.1,"Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers.  Example for specifiers would be public, private, and protected.  There is the keyword Class and the Class body is enclosed with brackets ({}). ",5,5,5,0.06229412556,0.9377058744,0.9205113195,0.5593118072,0.613231646,0.9803862618,0.7757456419,0.9999680149,0.9622860339
207,2.1,An object and data.,1,3,2,0.07009494305,0.929905057,0.9105573041,0.4736277461,0.5380313484,0.9896989412,0.8822224863,0.9998897378,0.869988507
208,2.1,"It's specific class name, includes only information defined by that class... implementation details... etc.",2,4,3,0.07516974211,0.9248302579,0.9040817483,0.3042162061,0.3893479401,0.9816140234,0.789783297,0.9998877826,0.8676831176
209,2.1,data members and member functions.,5,5,5,0.02420556545,0.9757944345,0.9691131636,0.8642362356,0.880847437,0.9902032427,0.8879884345,0.999963142,0.9565402564
210,2.1,A class definition usually contains the function and its data members,5,5,5,0.06362324953,0.9363767505,0.918815328,0.470067054,0.5349063202,0.9876011604,0.858237436,0.9999297756,0.9171975203
211,2.1,Data members and member functions,5,5,5,0.0456263423,0.9543736577,0.9417797792,0.7783280015,0.8054503947,0.9902576697,0.8886107274,0.9999606285,0.9535765642
212,2.1,member functions,3,4,3.5,0.1323472857,0.8676527143,0.8311219395,0.6591645479,0.7008670327,0.9872409985,0.8541195129,0.9998686505,0.845124211
213,2.1,Member functions and data members belonging to the class.,5,5,5,0.04354643822,0.9564535618,0.9444337828,0.739597857,0.7714590274,0.9899057654,0.8845872171,0.9999705939,0.9653269104
214,2.1,a public and private area that includes the functions and variables that are used in the class,5,4,4.5,0.07049745321,0.9295025468,0.9100436922,0.2828415632,0.3705885643,0.9832859363,0.8088991716,0.9999262784,0.9130739659
215,2.1,"the keyword class followed by they class name, on the inside you declare public and private declarations of your class",3,4,3.5,0.08845615387,0.9115438461,0.8871279933,0.09175692499,0.202883842,0.9733811721,0.6956527055,0.9999682634,0.9625790156
216,2.1,A class definition typically includes function definitions.,3,3,3,0.07564324141,0.9243567586,0.9034775528,0.3362714648,0.4174811188,0.9867936046,0.8490042192,0.9999599907,0.9528245696
217,2.1,"It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.",5,5,5,0.06568664312,0.9343133569,0.9161823922,0.4823389053,0.5456766649,0.9840580767,0.8177274653,0.9999703816,0.9650766282
218,2.1,the data and methods,5,4,4.5,0.07687038183,0.9231296182,0.9019116945,0.3482011855,0.4279511938,0.9831176827,0.8069754384,0.9999249244,0.9114774959
219,2.1,"A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.",5,4,4.5,0.08209848404,0.917901516,0.8952405206,0.3386210203,0.4195431975,0.9955147577,0.9487178266,0.9999355915,0.9240551887
220,2.1,Member functions and data members.,5,5,5,0.009306311607,0.9906936884,0.9881249408,0.9472655058,0.9537177672,1,1,0.9999129336,0.897338979
221,2.1,"public section and private section, and there must be a semicolon to set the end",1,4,2.5,0.09752362967,0.9024763703,0.8755576939,0.1283786297,0.235024745,0.9907654763,0.8944167523,0.9998764132,0.8542773318
222,2.1,member funtions and data members,5,5,5,0.06994855404,0.930051446,0.9107440997,0.684294939,0.722922627,0.9902576697,0.8886107274,0.9999606908,0.9536499997
223,2.1,Data members and Member functions,5,5,5,0.0456263423,0.9543736577,0.9417797792,0.7515409589,0.7819408463,0.9902576697,0.8886107274,0.99995452,0.9463739727
224,2.1,data members and member functions,5,5,5,0.0456263423,0.9543736577,0.9417797792,0.7776786685,0.80488051,0.9902576697,0.8886107274,0.9999374548,0.9262522396
225,2.1,"the class name and its public data types such as constructors, methods, functions.",2,5,3.5,0.06376099586,0.9362390041,0.9186395605,0.4831376672,0.5463776953,0.9804797328,0.7768143466,0.9999507622,0.9419431387
226,2.1,"a constructor and several data members, and at least one public data member or method",4,5,4.5,0.05931133032,0.9406886697,0.9243174322,0.5112903118,0.5710857592,0.9946792417,0.939164925,0.9999536038,0.9452936538
227,2.1,"class name, two curly prenthesis, public and private",1,3,2,0.09529310465,0.9047068954,0.8784038932,0.06700071692,0.181156648,0.983725652,0.813926676,0.9999681388,0.9624320806
228,2.1,data members and member functions,5,5,5,0.0456263423,0.9543736577,0.9417797792,0.7776786685,0.80488051,0.9902576697,0.8886107274,0.9999374548,0.9262522396
229,2.1,Data and functions,5,4,4.5,0.08878552914,0.9112144709,0.8867077033,0.5507044196,0.6056774043,0.9807445765,0.7798424456,0.9998886132,0.8686624012
230,2.1,functions and data members that belong to the class,5,5,5,0.05829674006,0.9417032599,0.9256120717,0.5633713007,0.6167944454,0.987425903,0.8562336247,0.999946975,0.9374775801
231,2.1,"class variables, function definitions for the class",5,5,5,0.08356398344,0.9164360166,0.893370511,0.2654225528,0.3553008346,0.9904641309,0.8909713095,0.9999678005,0.962033164
232,2.1,"A class is an expanded concept of a data structure, it holds both the data and the functions being executed ",5,4,4.5,0.07217037678,0.9278296232,0.9079090047,0.3626892269,0.4406665694,0.9888910958,0.8729859579,0.9999552418,0.9472250092
233,2.2,Data members are the data components of a particular class.  A member function are the functioning components of the class.,1,5,3,0.02929472923,0.9707052708,0.9626192783,0.623681426,0.6697254027,0.9960512395,0.95485171,0.9999690194,0.9634703659
234,2.2,A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.,1,4,2.5,0.03972607851,0.9602739215,0.9493086462,0.3978490829,0.4715244864,0.9917027319,0.9051328965,0.9999658216,0.9596998671
235,2.2,"Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.",4,5,4.5,0.01662707329,0.9833729267,0.9787834871,0.7117356062,0.7470058265,0.9892808852,0.8774426286,0.9999728132,0.9679437671
236,2.2,Data member are variables that represent an attribute in a class definition.  Local variables declared in a function body cannot be used outside of that function body.  When a function terminates the values of its local variables are lost.,4,5,4.5,0.01801127195,0.981988728,0.977017219,0.7128847241,0.7480143456,0.9955694304,0.9493429283,0.9999670697,0.9611714375
237,2.2,A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.,5,5,5,0.01317501068,0.9868249893,0.9831883953,0.7116085887,0.7468943501,0.9961824664,0.9563520966,0.9999891614,0.9872200508
238,2.2,"A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.",4,5,4.5,0.01806044579,0.9819395542,0.9769544721,0.6840165854,0.7226783309,0.992208625,0.910917043,0.9999541877,0.9459822032
239,2.2,A local variable can only be accessed within the scope of its declaration.,3,4,3.5,0.02843421698,0.971565783,0.9637173109,0.5011832118,0.5622153004,0.9954760653,0.9482754357,0.9999796251,0.9759757589
240,2.2,Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.,4,5,4.5,0.01798844337,0.9820115566,0.9770463488,0.6713151336,0.711530949,0.9958397127,0.9524332106,0.999923964,0.9103450286
241,2.2,"data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.",3,5,4,0.01646590233,0.9835340977,0.9789891449,0.7364171147,0.7686674607,0.99262314,0.9156564151,0.9999720259,0.9670154174
242,2.2,data members are declared in a class definition but outside the bodies of a class's member-function definitions. Local variables are declared in a function definition's body,3,5,4,0.02351421118,0.9764857888,0.969995347,0.5966220498,0.6459768418,0.9956341337,0.9500827153,0.9999722717,0.9673051893
243,2.2,"A data member is globally accessible, while a local variable is only accessible inside the member function.",4,5,4.5,0.01791459322,0.9820854068,0.9771405833,0.6771592498,0.7166600159,0.9886181086,0.8698647484,0.9998955783,0.8768750778
244,2.2,A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.,5,5,5,0.009285032749,0.9907149673,0.9881520931,0.8030363917,0.8271356215,0.9963416207,0.9581717925,0.9999682296,0.9625391154
245,2.2,Local variables are used only within the scope of its declaration,5,4,4.5,0.03368914127,0.9663108587,0.9570119114,0.4009856582,0.47427729,0.9954365137,0.9478232211,0.9999606259,0.9535734797
246,2.2,"A data member is a more general term describing all objects instantiated within a member function.  ""Local"" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class.  Local variables whose scope are in a member function are the same as data members of member functions.",0,4,2,0.01975125074,0.9802487493,0.9747969677,0.7000507116,0.7367506223,0.991341372,0.9010012757,0.999969889,0.9644957006
247,2.2,A data member exists permanently in that program's memory as long as it's run.  A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.,2,5,3.5,0.02214407921,0.9778559208,0.9717436657,0.5593776703,0.6132894505,0.9941082535,0.9326365114,0.9999675984,0.9617948992
248,2.2,"local variables can only be used within the function, where as data members can be set to public access and can be used throughout",5,5,5,0.02242046595,0.9775795341,0.9713909902,0.5896824002,0.6398862841,0.9925105552,0.9143691728,0.9999376617,0.9264961144
249,2.2,"The local variable is lost once it exits the block of code, while the data member is not.",4,5,4.5,0.0264030695,0.9735969305,0.9663091,0.424690932,0.4950821355,0.9934070288,0.9246190351,0.9999283176,0.9154783945
250,2.2,Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing } before it is lost from memory.,4,5,4.5,0.01876497269,0.9812350273,0.9760554803,0.6320390701,0.677060458,0.9969427627,0.9650449716,0.9999632037,0.9566130553
251,2.2,"data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes",5,5,5,0.01723510027,0.9827648997,0.9780076312,0.6493387818,0.6922434856,0.9923660245,0.9127166762,0.9999145522,0.8992474702
252,2.2,Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.,4,5,4.5,0.01161688566,0.9883831143,0.9851765972,0.7999716401,0.8244458536,0.9956953827,0.9507830088,0.9999898449,0.9880260451
253,2.2,"The data member can be accessed outside of the class, whereas the local variable cannot.",3,5,4,0.01756536961,0.9824346304,0.9775862003,0.6384293437,0.6826688578,0.9970353179,0.9661032039,0.9999766632,0.972483279
254,2.2,"Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object. ",5,5,5,0.01722002029,0.9827799797,0.9780268737,0.6875792742,0.7258051115,0.9961369956,0.9558322047,0.9999705943,0.965327325
255,2.2,a local variable in a member function has to be static. a data member can change its value freely.,0,4,2,0.02219468355,0.9778053164,0.9716790934,0.6118695736,0.6593587743,0.9938724944,0.9299409521,0.9998810394,0.8597320896
256,2.2,"a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class",5,5,5,0.02245634794,0.9775436521,0.9713452039,0.5681604147,0.6209975935,0.9913781101,0.9014213219,0.999933785,0.9219251054
257,2.2,Variable declared in a function defination's body cannot be used outside of that function.  Data members accessible only to member function of that class.,5,5,5,0.013689816,0.986310184,0.9825314923,0.7508588433,0.7813421901,0.9965942538,0.9610602826,0.9999453284,0.9355359901
258,2.2,"data members   local variables are declared in a function definitionâ€™s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.   ",5,4,4.5,0.017824471,0.982175529,0.9772555812,0.6644389033,0.7054960511,0.994732773,0.9397769771,0.999971804,0.9667537037
259,2.2,local variable is only available in the function.,4,5,4.5,0.03015106916,0.9698489308,0.9615265696,0.5121748447,0.5718620662,0.9905673127,0.8921510415,0.9998520067,0.8254993166
260,2.2,local variables are accessed inside member functions only while data members   can be accessed throughout the class,4,5,4.5,0.0139092803,0.9860907197,0.982251451,0.8293865919,0.8502617767,0.9956332326,0.9500724133,0.9999819001,0.9786581438
261,2.2,"A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.",5,5,5,0.01926529408,0.9807347059,0.9754170591,0.6624044776,0.7037105449,0.9885317673,0.8688775623,0.9999480123,0.9387006183
262,2.2,"a Data member is encapsulated within a class or object,  it is static and can be shared by all instances of that class.  however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables. ",3,5,4,0.02197277546,0.9780272245,0.971962253,0.5726777911,0.6249622521,0.9897027758,0.8822663286,0.9999551497,0.9471164806
263,2.3,A constructor initializes an object or objects of a class.  A function of a class performs a task such as display a line of text or do some kind of mathematical operations.,2,3,2.5,0.02574557066,0.9742544293,0.967148083,0.4157218039,0.4872104135,0.9920445218,0.9090407632,0.9999764937,0.9722834312
264,2.3,"all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.",2,4,3,0.01769912243,0.9823008776,0.9774155288,0.6140556931,0.661277414,0.9856466862,0.8358908877,0.9999823778,0.9792213889
265,2.3,"Unlike regular functions, constructors are only used to initialize an objectâ€™s data when it is created. Constructors must also be given the same name as the class and cannot return any values. ",5,5,5,0.01346576214,0.9865342379,0.9828173901,0.6446141601,0.6880969389,0.9945261483,0.9374145257,0.9999830277,0.9799877915
266,2.3,"A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc.  Also a constructor cannot return values.  Functions are operations that maybe globally defined.",4,5,4.5,0.01702404022,0.9829759598,0.9782769486,0.5615928769,0.6152336184,0.9925323846,0.9146187601,0.9999824773,0.9793387115
267,2.3,"Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.",3,5,4,0.01168513298,0.988314867,0.9850895121,0.6250098348,0.6708912757,0.9907084598,0.8937648524,0.99998442,0.9816294298
268,2.3,A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.,2,4,3,0.02354776859,0.9764522314,0.969952527,0.4381851554,0.5069252904,0.9901854484,0.887784983,0.9999880154,0.9858687536
269,2.3,A constructor is called whenever a new object of that class is made.,4,3,3.5,0.01856416464,0.9814358354,0.9763117158,0.5834697485,0.6344337734,0.9935421805,0.9261642958,0.9999849784,0.9822878488
270,2.3,A constructor does not return any date and has no return type.  Functions can return date or not return data can have a return type.,3,5,4,0.01780712605,0.982192874,0.9772777138,0.5650943518,0.6183066748,0.9892814619,0.8774492215,0.9999608552,0.9538438569
271,2.3,"A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user. ",4,4,4,0.01187843084,0.9881215692,0.9848428599,0.6693748236,0.7098280432,0.9978061317,0.97491633,0.9999896788,0.9878301411
272,2.3,"constructors cannot return values, so they cannot specify a return type like functions can.",3,5,4,0.01696676016,0.9830332398,0.9783500391,0.6123296618,0.6597625691,0.9907181828,0.8938760207,0.9999751264,0.9706712327
273,2.3,A constructor is a function used to initialize an object's data when it is created.,4,3,3.5,0.01480931044,0.9851906896,0.9811029927,0.6046769619,0.6530462054,0.9939412091,0.9307266039,0.9999786729,0.9748528971
274,2.3,a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.,2,3,2.5,0.02858179808,0.9714182019,0.9635289942,0.3515522778,0.4308922675,0.9913652753,0.9012745747,0.9999703294,0.9650149889
275,2.3,A constructor initialized values at the execution of its instantiation. It provides default values.,4,3,3.5,0.02835851908,0.9716414809,0.9638139031,0.2702254653,0.3595160929,0.9898099848,0.8834921073,0.9999741775,0.9695524146
276,2.3,"A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.",4,4,4,0.02035558224,0.9796444178,0.9740258274,0.531986475,0.5892496698,0.9931329256,0.9214850656,0.9999907438,0.9890859145
277,2.3,"A constructor is used to create an object that can be employed in the main function of a program.  This may or may not execute code along with it.  A function is a set of code that executes when called, but does not create a new object.",3,3,3,0.01187688112,0.9881231189,0.9848448373,0.6673189998,0.708023757,0.9930852627,0.9209401104,0.9999698207,0.9644151929
278,2.3,a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either.,3,5,4,0.04607748985,0.9539225101,0.9412041049,0.5529862046,0.6076800045,0.9905517451,0.8919730491,0.9999553195,0.9473166701
279,2.3,"a constructor does not need a type, and it is used to initialize the variables.",3,4,3.5,0.01138550043,0.9886144996,0.9854718499,0.5552820563,0.6096949502,0.9853777903,0.8328164565,0.9999841464,0.981306884
280,2.3,Constructors don't have a return type.,3,5,4,0.02337276936,0.9766272306,0.9701758299,0.6011521816,0.6499526951,0.9893106129,0.8777825203,0.9999694775,0.9640105473
281,2.3,constructor creates the class object into memory where functions perform actions against that object,2,4,3,0.04636657238,0.9536334276,0.9408352292,0.371410042,0.4483203605,0.9895408745,0.8804152247,0.9999766939,0.9725195176
282,2.3,constructors cannot return values,3,5,4,0.06051498652,0.9394850135,0.9227815403,0.3399115801,0.4206758524,0.9815412183,0.7889508777,0.9999405724,0.9299282128
283,2.3,A constructor initializes values and a function usual performs some sort of operation.,2,3,2.5,0.02536439896,0.974635601,0.9676344665,0.4436374903,0.5117105119,0.9918098564,0.906357708,0.999979791,0.9761713527
284,2.3,A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.,5,5,5,0.01062113047,0.9893788695,0.9864472028,0.7201331258,0.7543758784,0.9928742506,0.9185274966,0.999981336,0.9779930165
285,2.3,A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.,4,4,4,0.01817023754,0.9818297625,0.9768143755,0.4448215961,0.512749738,0.9924655737,0.9138548751,0.9999513154,0.9425953607
286,2.3,"a constructor is a function that initializes a class instance, a function performs whatever task it is written for",2,4,3,0.01994800568,0.9800519943,0.974545904,0.4581691325,0.5244641536,0.9942027787,0.9337172689,0.9999854819,0.9828814763
287,2.3,"A constructor cannot return values, not even void, but function get a return value.",3,5,4,0.01538163424,0.9846183658,0.9803726949,0.5214238167,0.579979392,0.9916739079,0.9048033359,0.9999581692,0.9506768075
288,2.3,"a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.",5,5,5,0.008107483387,0.9918925166,0.9896546721,0.6836259365,0.7223354794,0.9914750707,0.9025299246,0.9999663242,0.9602924446
289,2.3,A constructor initializes an object. A function is part of an object.,1,4,2.5,0.02525180578,0.9747481942,0.9677781379,0.5236655474,0.5819468386,0.9932538808,0.9228680117,0.9999644863,0.9581253074
290,2.3,constructors initialize the data that is then used in the calculations of a   function,2,3,2.5,0.04022991657,0.9597700834,0.9486657376,0.3399857283,0.4207409283,0.9911709204,0.8990524119,0.9999768862,0.9727461799
291,2.3,"a constructor is called when the class is created, a function can be called any time.",4,3,3.5,0.01209944487,0.9879005551,0.984560841,0.6706866026,0.7109793211,0.9932324606,0.9226231034,0.9999580331,0.9505162765
292,2.3,"constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code. ",4,4,4,0.01953905821,0.9804609418,0.9750677301,0.5518454313,0.606678809,0.9939891077,0.9312742538,0.9999871162,0.9848085797
293,2.4,The compiler creates a default constructor when we do not define one in our class file,5,5,5,0.02290391922,0.9770960808,0.9707740931,0.6931302547,0.730676909,0.9898555474,0.8840130481,0.9999799496,0.976358292
294,2.4,during compilation,2,5,3.5,0.225274086,0.774725914,0.7125452892,0.206362009,0.3034665679,0.9769250491,0.7361717462,0.9998628328,0.8382644999
295,2.4,When the class does not explicitly include a constructor.,5,5,5,0.01953983307,0.9804601669,0.9750667413,0.5584157109,0.6124451905,0.98263914,0.8015040031,0.9999634775,0.9569358263
296,2.4,When no parameters are set is when a default constructor is used.,3,3,3,0.02019822598,0.979801774,0.9742266174,0.6274214983,0.6730078632,0.9877853521,0.8603433987,0.9999708488,0.9656275092
297,2.4,When a class does not explicitly include a constructor.,5,5,5,0.0193772316,0.9806227684,0.9752742244,0.5618363023,0.6154472598,0.9839767296,0.8167973811,0.9999680725,0.9623538547
298,2.4,When there are no arguments passed.,1,2,1.5,0.05137056112,0.9486294389,0.9344500291,0.2470740378,0.3391973286,0.9822783805,0.7973792475,0.9999377381,0.9265861902
299,2.4,when there is not one already for a specific class,5,5,5,0.04726880789,0.9527311921,0.9396839568,0.1790689379,0.2795129055,0.977214822,0.7394848751,0.9999542074,0.9460053866
300,2.4,When it the programs compiles,2,5,3.5,0.06876957417,0.9312304258,0.912248504,0.2233192623,0.3183490382,0.980313771,0.7749168166,0.9998801518,0.8586854964
301,2.4,when a constructor is not provided by the programmer of the class,5,5,5,0.01927226782,0.9807277322,0.9754081605,0.5392202139,0.5955983339,0.9857742959,0.8373499173,0.999980858,0.9774294622
302,2.4,In any class that does not explicitly include a constructor.,5,5,5,0.02386111021,0.9761388898,0.9695526962,0.5297487974,0.5872857804,0.9798492904,0.7696061612,0.9999749452,0.9704575356
303,2.4,Before the main function of the code.,0,2,1,0.04876977205,0.9512302279,0.9377686933,0.2695914805,0.3589596785,0.9785709816,0.7549905732,0.9999183683,0.9037470459
304,2.4,whenevery you dont specifiy your own,5,5,5,0.1394098997,0.8605901003,0.822109888,0.0965346396,0.2070769855,0.9842292787,0.81968491,0.9999326734,0.9206143925
305,2.4,When non are provided,5,5,5,0.07080489397,0.929195106,0.9096513909,0.2955721915,0.3817615529,0.974553891,0.7090610279,0.9997814504,0.7423054896
306,2.4,C++ will create a default constructor when no other constructor is present.,5,5,5,0.02827638388,0.9717236161,0.9639187094,0.7079184651,0.7436557269,0.9880538798,0.8634136197,0.9999836248,0.9806918429
307,2.4,"When no constructor was specified in the constructor's class, but the class is instantiated in a program.",5,5,5,0.02733886242,0.9726611376,0.9651150076,0.5757369399,0.6276471027,0.992306731,0.912038741,0.9999735956,0.9688662682
308,2.4,"When no constructor exists when one is needed, a parameterless default constructor is declared.",5,5,5,0.0120845437,0.9879154563,0.9845798553,0.6983972788,0.7352994931,0.9958670203,0.9527454329,0.9999784056,0.974537821
309,2.4,"The Compiler creates this automatically for you, unless you specifically create one.",5,5,5,0.02900165319,0.9709983468,0.9629932498,0.4530685246,0.5199876241,0.992406172,0.9131757032,0.9999795293,0.9758626929
310,2.4,In any class that doesn't explicitly include a constructor.,5,5,5,0.0312513113,0.9687486887,0.9601226363,0.5270139575,0.5848855583,0.9818772377,0.7927927666,0.999965669,0.9595198548
311,2.4,when no user-defined constructor exists,5,5,5,0.1014832258,0.8985167742,0.8705051618,0.4911171794,0.5533808845,0.9793090104,0.7634288504,0.9998247482,0.7933584903
312,2.4,"If a class does not explicitly include a constructor, the compiler creates one.",5,5,5,0.0103353858,0.9896646142,0.9868118194,0.7667384744,0.7952788893,0.9905873964,0.8923806691,0.9999794497,0.9757689258
313,2.4,When you do not provide your own constructor.,5,5,5,0.045756042,0.954243958,0.9416142795,0.5337050557,0.5907579758,0.981204126,0.7850967214,0.9999703027,0.9649835261
314,2.4,When a class does not explicitly include a constructor.,5,5,5,0.0193772316,0.9806227684,0.9752742244,0.5618363023,0.6154472598,0.9839767296,0.8167973811,0.9999680725,0.9623538547
315,2.4,C++ creates a default constructor during compilation if one is not provided.,5,5,5,0.01593649387,0.9840635061,0.9796646817,0.7814041376,0.8081501541,0.9888146316,0.872111701,0.9999802643,0.9767294035
316,2.4,when a class does not explicitly include a constructor,5,5,5,0.02558344603,0.974416554,0.9673549577,0.4738483131,0.5382249282,0.9796874793,0.7677560881,0.9999624821,0.9557621271
317,2.4,The compiler will provide one when class does not explictly include a consructor.,5,5,5,0.02163732052,0.9783626795,0.972390301,0.6209262013,0.66730729,0.9891240969,0.8756499838,0.9999673198,0.9614663536
318,2.4,when the programmer does not explicitly include a constructor,5,5,5,0.02119755745,0.9788024426,0.9729514484,0.4882433116,0.5508586451,0.9809685995,0.782403821,0.9999714485,0.9663346272
319,2.4,When one is not explicitly stated.,5,5,5,0.03738284111,0.9626171589,0.9522986688,0.3140577376,0.3979853237,0.9817089352,0.790868474,0.9999422725,0.9319328523
320,2.4,when one is not explicitly included by a class,5,5,5,0.03837502003,0.96162498,0.9510326267,0.273638308,0.3625113616,0.9801379659,0.7729067426,0.9999516841,0.9430301661
321,2.4,When you dont specify any constructors.,5,5,5,0.04736232758,0.9526376724,0.9395646236,0.4756240249,0.539783375,0.9844028974,0.8216699855,0.9999468192,0.9372938989
322,2.4,"at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user",5,5,5,0.01571518183,0.9842848182,0.9799470808,0.5818281174,0.632993002,0.9922849819,0.9117900723,0.9999769613,0.9728347574
323,2.5,Just one per class.,0,0,0,0.0736926198,0.9263073802,0.905966589,0.3812422454,0.4569495572,0.9882808949,0.8660092042,0.9998730507,0.850312517
324,2.5,As many as you want so long as they have different parameters.,5,5,5,0.08877360821,0.9112263918,0.8867229146,0.1701166034,0.2716559224,0.993379306,0.9243020651,0.9998456549,0.8180097679
325,2.5,"There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.",5,5,5,0.07662630081,0.9233736992,0.9022231473,0.3136427701,0.397621129,0.9873715819,0.8556125422,0.9999085857,0.892212218
326,2.5,It depends what type of class is being defined.  Typically you would have a constructor call for each object.,1,2,1.5,0.07657074928,0.9234292507,0.9022940322,0.1950637251,0.2935506711,0.9870161791,0.8515490321,0.9999012719,0.8835884652
327,2.5,"In C++, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.",5,5,5,0.09044152498,0.909558475,0.884594616,0.200009346,0.2978911768,0.9862946193,0.8432990536,0.9998912231,0.8717397778
328,2.5,1,0,0,0,0.2453998923,0.7546001077,0.6868643158,0.06196600571,0.1767379525,0.9749136293,0.7131741087,0.9998079124,0.7735071179
329,2.5,any number you want,5,5,5,0.1273402572,0.8726597428,0.8375110185,0.2579087019,0.3487063313,0.9924418474,0.9135835997,0.9998847618,0.8641212626
330,2.5,One,0,0,0,0.2502527833,0.7497472167,0.6806719196,0.08479077369,0.1967700252,0.980687516,0.7791900424,0.9993966535,0.2885867055
331,2.5,"by default just one, but they may be overloaded to create as many constructors as necessary",5,5,5,0.09335815907,0.9066418409,0.8808729264,0.006032732781,0.1276483234,0.9845816434,0.8237136841,0.999889866,0.8701396841
332,2.5,as many as you want,5,5,5,0.14085114,0.85914886,0.8202708335,-0.03554691747,0.09115609799,0.9913499796,0.9010996907,0.9997852453,0.7467801387
333,2.5,"As many as you want, with different parameters.",5,5,5,0.0837803483,0.9162196517,0.8930944246,0.2762208581,0.3647779271,0.9928664235,0.9184380052,0.9998971664,0.8787475839
334,2.5,infinite,5,5,5,0.1461694837,0.8538305163,0.8134845094,0.1439295411,0.2486729446,0.9125379841,0,0.9995382818,0.4555824392
335,2.5,as many as you need,5,5,5,0.1410861015,0.8589138985,0.8199710174,-0.01332479715,0.1106592593,0.9889615692,0.8737917174,0.9997860115,0.7476835402
336,2.5,"As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.",5,5,5,0.08576494455,0.9142350554,0.8905620359,0.10669332,0.2159927135,0.9837725049,0.8144623703,0.9999053564,0.8884045229
337,2.5,"A very large amount of constructors can be created for any given class through overloading.  When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.",5,5,5,0.07387441397,0.926125586,0.9057346156,0.3064939082,0.3913469569,0.9818862522,0.7928958341,0.9999069443,0.8902768758
338,2.5,It depends on the number of objects. Each object should have a constructor.,1,4,2.5,0.0640566349,0.9359433651,0.9182623187,0.3326088786,0.4142666636,0.9926404127,0.9158539029,0.9999474257,0.9380090466
339,2.5,"Theoretically unlimited, as long as they are defined by the programmer.",5,5,5,0.06829589605,0.9317041039,0.9128529277,0.3263524473,0.4087757299,0.9877434283,0.8598640608,0.9999115963,0.8957620697
340,2.5,As many as needed.,5,5,5,0.0897872448,0.9102127552,0.8854294919,0.3349553049,0.4163259959,0.9975120518,0.9715539574,0.9998761748,0.8539962318
341,2.5,as many as wanted/needed,5,5,5,0.1895214915,0.8104785085,0.7581663897,-0.02171537839,0.1032952968,0.9907587426,0.8943397618,0.9998831043,0.8621667894
342,2.5,several,4,5,4.5,0.3002825975,0.6997174025,0.6168327714,0.01116942056,0.1321565184,0.980687516,0.7791900424,0.9995382818,0.4555824392
343,2.5,One,0,0,0,0.2502527833,0.7497472167,0.6806719196,0.08479077369,0.1967700252,0.980687516,0.7791900424,0.9993966535,0.2885867055
344,2.5,one,0,0,0,0.1609125137,0.8390874863,0.7946720774,0.3139761984,0.3979137612,0.9622906414,0.5688487375,0.9996891447,0.6334666643
345,2.5,There can be infinite constructors as long as the signature is different.,5,5,5,0.08054471016,0.9194552898,0.8972231703,0.2263509929,0.3210098253,0.9906763925,0.8933982094,0.9998891909,0.8693436335
346,2.5,that depends on the number of data members in the class,0,3,1.5,0.1098970175,0.8901029825,0.8597689777,0.2243277878,0.3192341668,0.9893162541,0.8778470196,0.999915992,0.9009451059
347,2.5,one,0,0,0,0.1609125137,0.8390874863,0.7946720774,0.3139761984,0.3979137612,0.9622906414,0.5688487375,0.9996891447,0.6334666643
348,2.5,you can overload constructors as you need,5,5,5,0.1591982245,0.8408017755,0.7968595483,-0.03948644176,0.08769858914,0.9890666072,0.8749926736,0.9998848554,0.8642316117
349,2.5,As many as the programmer wants to create.,5,5,5,0.08138948679,0.9186105132,0.8961452167,0.2496896088,0.3414928748,0.9953510601,0.9468461835,0.9999090165,0.8927201911
350,2.5,one,0,0,0,0.1609125137,0.8390874863,0.7946720774,0.3139761984,0.3979137612,0.9622906414,0.5688487375,0.9996891447,0.6334666643
351,2.5,"as many as you want, as long as they each have a unique argument list",5,5,5,0.09776246548,0.9022375345,0.8752529341,0.001706588781,0.1238514992,0.9868532038,0.8496856481,0.9997989102,0.7628925678
352,2.5,as many as the user decides to use.,5,5,5,0.07841342688,0.9215865731,0.8999427349,0.235553503,0.3290863741,0.992522787,0.9145090251,0.9998860127,0.8655962325
353,2.6,A function definition does not require any additional information that needs to be passed inside its parenthesis  to execute. While a definition prototype requires more than one parameters to be passed in order to complete its  task.,5,3,4,0.02948474884,0.9705152512,0.9623768091,0.4658909738,0.5312411989,0.9852144233,0.8309485944,0.9999475345,0.9381373024
354,2.6,"The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ). The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.",1,4,2.5,0.01381111145,0.9861888885,0.9823767166,0.5919765234,0.6418997128,0.984158739,0.8188783909,0.9999442792,0.9342989233
355,2.6,"A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.",5,5,5,0.006861388683,0.9931386113,0.9912447164,0.8232421279,0.8448691107,0.9939820356,0.9311933945,0.9999772441,0.9731682815
356,2.6,Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.,3,3,3,0.02058231831,0.9794176817,0.9737365071,0.6365066767,0.6809814362,0.9909348441,0.8963532243,0.9999388847,0.9279382553
357,2.6,"A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.",5,5,5,0.0078125,0.9921875,0.9900310774,0.8014481664,0.8257417214,0.9901408391,0.8872749405,0.9999760424,0.9717512867
358,2.6,A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.,5,4,4.5,0.02443099022,0.9755690098,0.9688255167,0.5767945051,0.6285752709,0.985551893,0.8348070659,0.999947084,0.9376061113
359,2.6,prototype only tells the user what data types go into a function and what type is returned.,5,4,4.5,0.02506917715,0.9749308228,0.968011176,0.5238316059,0.5820925793,0.9862311992,0.8425739367,0.9999346751,0.9229746663
360,2.6,Function prototype is located in the .h file and only contains the access function name and paramater type.  Function definition contains the code for the function to perform its activity.,4,5,4.5,0.01176005602,0.988239944,0.9849939087,0.7864220142,0.8125540749,0.9857875644,0.8375016235,0.9999620883,0.9552978959
361,2.6,"a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...",4,4,4,0.01030063629,0.9896993637,0.9868561605,0.7098687887,0.7453674211,0.9893438945,0.8781630472,0.9999598135,0.9526155836
362,2.6,A function prototype describes a class's public interface without revealing the class's member function implementations,5,4,4.5,0.02694576979,0.9730542302,0.9656166024,0.5098366141,0.5698099268,0.984207702,0.8194382118,0.9999452076,0.9353936326
363,2.6,"Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.",1,3,2,0.02253574133,0.9774642587,0.9712438962,0.6195032597,0.6660584505,0.9868317345,0.8494401789,0.9999427918,0.9325451596
364,2.6,a prototype does not include any actual code where the function has all the code that is executed in the program.,3,3,3,0.02600455284,0.9739954472,0.9668176161,0.5275330544,0.5853411418,0.9803882542,0.7757684219,0.9999451488,0.9353242309
365,2.6,a prototype declares what will be used in the program and the definition,3,3,3,0.03254652023,0.9674534798,0.9584699212,0.3505547941,0.4300168296,0.9819177949,0.7932564795,0.9999000477,0.8821449913
366,2.6,"A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.",5,5,5,0.006419599056,0.9935804009,0.9918084497,0.8216893077,0.8435062838,0.9931214778,0.9213541769,0.9999626742,0.9559887132
367,2.6,"A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.  A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.",5,5,5,0.01299887896,0.987001121,0.9834131432,0.7873935103,0.8134067048,0.9935266135,0.9259863105,0.9999778883,0.973927831
368,2.6,"A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.",3,4,3.5,0.01303809881,0.9869619012,0.9833630979,0.7068946362,0.7427571672,0.9925476082,0.9147928186,0.9999666225,0.9606441814
369,2.6,the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.,5,4,4.5,0.01485174894,0.9851482511,0.9810488403,0.6920868158,0.7297611387,0.9830639225,0.8063607694,0.9999605301,0.9534605844
370,2.6,A function prototype describes the class's public interface without providing how the function works. A function definition contains the inner workings of the function.,5,4,4.5,0.008425295353,0.9915747046,0.9892491369,0.7464179397,0.7774446475,0.9865334979,0.8460302795,0.9999671137,0.9612233515
371,2.6,"prototype states all functions in that class before compilation, where the definition actually holds the source for the functions",3,4,3.5,0.0346493721,0.9653506279,0.9557866357,0.5103371143,0.5702491889,0.9869058184,0.8502872194,0.9999397053,0.9289057459
372,2.6,"Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.",5,5,5,0.009308993816,0.9906910062,0.9881215182,0.8083181977,0.8317711789,0.9942052594,0.9337456321,0.9999580573,0.9505449004
373,2.6,A function prototype just specifies parameters.  A function definition includes parameters and a code body.,4,4,4,0.02329087257,0.9767091274,0.970280332,0.7432745099,0.7746858281,0.9833200545,0.8092892628,0.9999493902,0.9403253074
374,2.6,Function prototypes describe the class's public interface,5,4,4.5,0.03899282217,0.9610071778,0.9502442974,0.4037329555,0.4766884452,0.9819559531,0.7936927618,0.9999347806,0.9230989712
375,2.6,"A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function ",4,5,4.5,0.01380121708,0.9861987829,0.9823893421,0.6597131491,0.7013485104,0.9926436224,0.9158906014,0.9999491579,0.9400514374
376,2.6,"a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code",4,4,4,0.02283596992,0.9771640301,0.9708607979,0.7509005666,0.7813788084,0.9942910293,0.9347262849,0.9999644069,0.9580316884
377,2.6,"A functgion prototype is a declaration of a function , while function definition specifies what a function does",3,4,3.5,0.02617353201,0.973826468,0.9666019949,0.6525186896,0.6950343199,0.9889059012,0.8731552361,0.9999444606,0.9345128596
378,2.6,"in a function prototype you include the return type, the name of the function, and its parameters if any are needed.  in a function definition you write the code of what the function will do. ",5,5,5,0.009563565254,0.9904364347,0.9877966794,0.8299859166,0.8507877718,0.9870396565,0.8518174617,0.9999527749,0.9443162765
379,2.6,"A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.",5,4,4.5,0.0151796937,0.9848203063,0.9806303755,0.7687392235,0.7970348393,0.9875999551,0.8582236558,0.9999572543,0.9495980737
380,2.6,"function prototype describe the class's public interface without revealing   the class's member function implementations,  function definitions show what   implementations are being done",5,4,4.5,0.02192389965,0.9780761003,0.9720246196,0.5748354793,0.6268559391,0.9900211234,0.8859061677,0.9999576078,0.9500148043
381,2.6,"A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.",5,5,5,0.009856939316,0.9901430607,0.9874223277,0.7344935536,0.7669792545,0.9963581258,0.9583605047,0.9999426997,0.9324365127
382,2.6,function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.,5,4,4.5,0.02234524488,0.9776547551,0.9714869738,0.5848593116,0.6356533183,0.982928651,0.8048141378,0.999927538,0.9145591842
383,2.7,the role of a header file list all the functions a class can do while hiding the inner workings of its functions,5,4,4.5,0.03103035688,0.9689696431,0.960404579,0.2626920938,0.3529044574,0.9895769782,0.8808280179,0.9998891683,0.8693170075
384,2.7,The main role of header file is it is used to share information among various files.,3,3,3,0.02932864428,0.9706713557,0.9625760019,0.2185799479,0.3141895966,0.9907921148,0.8947213244,0.9999234894,0.9097853792
385,2.7,Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.,4,3,3.5,0.02626562119,0.9737343788,0.9664844871,0.368396163,0.4456752407,0.98901977,0.874457158,0.9999098805,0.8937390028
386,2.7,No,0,0,0,0.333196342,0.666803658,0.5748341062,-0.1394111961,0,0.9674851859,0.6282407418,0.9996185703,0.5502515479
387,2.7,"A header file consists of ""reusable"" source code such as a class in a file that by convention has a .h filename extension. This differs from .cpp files that contain ""source-code.""",4,3,3.5,0.03710383177,0.9628961682,0.9526546909,0.3305618465,0.4124700935,0.98607892,0.8408328478,0.9998949964,0.8761890017
388,2.7,"To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.",5,4,4.5,0.02098709345,0.9790129066,0.9732200051,0.5606195331,0.6143793668,0.9901188167,0.8870231475,0.9999059314,0.8890826067
389,2.7,the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.,5,4,4.5,0.02914834023,0.9708516598,0.9628060739,0.3976095021,0.4713142192,0.986601267,0.8468051199,0.999863302,0.8388176723
390,2.7,Header files declares the class member functions.,3,4,3.5,0.04773432016,0.9522656798,0.9390899528,0.6223580837,0.6685639762,0.9906402416,0.8929848768,0.9999179342,0.9032352333
391,2.7,A header file allows for the separation of declaration and implementation into separate files.,5,3,4,0.02837276459,0.9716272354,0.9637957255,0.2921887338,0.3787920738,0.9887291557,0.8711344099,0.9999099364,0.8938048438
392,2.7,the header file has access to the C++ Standard Library and makes certain classes like class string work.,0,3,1.5,0.02455502748,0.9754449725,0.9686672424,0.3550907373,0.4339977834,0.9889796473,0.8739984142,0.9999525604,0.9440633305
393,2.7,â€œInstructâ€ the compiler on how to interface with library and user-written components.,2,3,2.5,0.03534597158,0.9646540284,0.9548977593,0.3942757845,0.4683883943,0.9881524934,0.8645411216,0.9998762574,0.8540935816
394,2.7,create a comon area to contain reusable functions.,3,3,3,0.04513335228,0.9548666477,0.9424088453,0.3639753461,0.4417953272,0.9906683652,0.8933064293,0.9997606745,0.7178083567
395,2.7,to declare the functions being used in the classes,3,3,3,0.03926891088,0.9607310891,0.9498920021,0.2630618215,0.3532289475,0.991145845,0.8987657107,0.9998703664,0.847147447
396,2.7,"#include ""hat.h""  allows the use of the hat container, so called from the act of pulling names from a hat.  The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().",0,3,1.5,0.03391003609,0.9660899639,0.9567300448,0.3132630289,0.3972878505,0.9839822425,0.8168604126,0.9999165038,0.9015486427
397,2.7,To hold reusable content or modules separate from the actual  source-code file that can be easily referenced and employed for different programs.,5,3,4,0.02869832516,0.9713016748,0.963380303,0.2851292789,0.3725963695,0.9889519861,0.8736821486,0.9998894311,0.8696268264
398,2.7,a header file is a file used to store a list of prototye functions and data members.,5,5,5,0.02415758371,0.9758424163,0.9691743895,0.6079782844,0.6559435988,0.9915618983,0.9035226704,0.999926779,0.9136642589
399,2.7,"A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.",3,4,3.5,0.02101117373,0.9789888263,0.9731892782,0.368378818,0.445660018,0.9869449988,0.8507351901,0.999888202,0.8681775704
400,2.7,It contains reusable source code for use by other classes.,3,3,3,0.04658186436,0.9534181356,0.9405605119,0.3693720102,0.4465316894,0.9868499741,0.8496487221,0.9998414762,0.8130825827
401,2.7,"to separate the source code from the main function, allows the methods/classes to be included in the program without direct coding. allows re usability.",4,3,3.5,0.02496939898,0.975030601,0.9681384952,0.3798191547,0.455700587,0.9855015105,0.8342310163,0.9998966414,0.8781286068
402,2.7,Header files have reusable source code in a file that a programer can use.,3,2,2.5,0.04639619589,0.9536038041,0.940797429,0.3239603341,0.4066763007,0.9875803112,0.8579990563,0.9999217627,0.9077494114
403,2.7,To hide the definition and details of a class.  Also to help readability of the main C++ file.,4,3,3.5,0.03053212166,0.9694678783,0.9610403382,0.3375481665,0.4186016113,0.9879372219,0.8620798066,0.9999195508,0.9051413617
404,2.7,To allow the compiler to recognize the classes when used elsewhere.,3,4,3.5,0.03435772657,0.9656422734,0.9561587818,0.2430485189,0.3356643469,0.9881588325,0.8646136001,0.9998957324,0.8770567332
405,2.7,"A header file declares a class, its data, and functions available through that class.",5,3,4,0.02486467361,0.9751353264,0.9682721271,0.5360981822,0.5928582944,0.9942229165,0.9339475153,0.9999572401,0.949581251
406,2.7,header files contain code which can be used in multiple files,3,3,3,0.05470609665,0.9452939034,0.9301938121,0.2420607805,0.334797462,0.9877448825,0.8598806878,0.9999317701,0.9195492845
407,2.7,Allow compiler to recognize the classes when used elsewhere,3,3,3,0.0375418663,0.9624581337,0.9520957492,0.164161846,0.2664297518,0.9891981311,0.8764964569,0.9998824567,0.861403248
408,2.7,Allow compiler to recognize the classes when used elsewhere,3,4,3.5,0.0375418663,0.9624581337,0.9520957492,0.164161846,0.2664297518,0.9891981311,0.8764964569,0.9998824567,0.861403248
409,2.7,To promote function reusuablitly,3,3,3,0.08615231514,0.9138476849,0.8900677426,0.2631495297,0.3533059243,0.9875469565,0.857617694,0.9997866444,0.7484298254
410,2.7,class definitions are placed here,3,3,3,0.07431274652,0.9256872535,0.9051752937,0.2389165014,0.3320378971,0.9881488569,0.8644995436,0.9998985313,0.8803569866
411,2.7,A header file usually contains class and/or function prototypes.,4,5,4.5,0.03586477041,0.9641352296,0.9542357606,0.5869987011,0.6375309455,0.9882300525,0.8654278955,0.9999146633,0.8993784162
412,2.7,contains all the standard C++ library's i.e. string,0,2,1,0.06913894415,0.9308610559,0.9117771798,0.1949014217,0.293408226,0.9874297613,0.8562777384,0.9998784088,0.8566303309
413,3.1,"It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.",4,5,4.5,0.01899760962,0.9810023904,0.9757586304,0.6434019208,0.6870330216,0.9926743347,0.9162417516,0.999960757,0.9537281232
414,3.1,it includes the specific information about the function such as input and output variable types and how many of each.,1,5,3,0.02149605751,0.9785039425,0.9725705557,0.4862460792,0.5491057815,0.9926960671,0.9164902295,0.9998702176,0.8469719637
415,3.1,The function signature includes the name of the function and the types of its arguments.,5,5,5,0.006905078888,0.9930949211,0.9911889668,0.7893351912,0.8151108138,0.9950317945,0.9431958498,0.9999779624,0.9740151978
416,3.1,"A function signature consists of the function prototype.  This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.",4,5,4.5,0.02093362808,0.9790663719,0.9732882281,0.588463068,0.6388161417,0.9849969082,0.8284616278,0.9999464342,0.9368399212
417,3.1,It includes the name of the function and the types of its arguments.,5,5,5,0.008537948132,0.9914620519,0.9891053896,0.8015833497,0.8258603646,0.9974244851,0.9705527607,0.9999732368,0.9684431791
418,3.1,"Name, paramaters, scope, and other general function information",4,5,4.5,0.04737627506,0.9526237249,0.9395468263,0.3789031208,0.4548966331,0.9743407535,0.7066241126,0.9998724929,0.8496548554
419,3.1,It includes a function name and parameter list. Does not include return type. Function signatures must be different.,5,5,5,0.03842037916,0.9615796208,0.9509747473,0.5459187031,0.601477238,0.9904016997,0.8902574992,0.9999336128,0.9217220497
420,3.1,input parameters and return type,1,5,3,0.07390660048,0.9260933995,0.9056935449,0.3664479256,0.4439653774,0.9886256201,0.8699506317,0.9998680318,0.8443946703
421,3.1,The portion of the function prototyp tha has the function name and the arguments but NOT the return type.,5,5,5,0.01403039694,0.9859696031,0.9820969036,0.7012854815,0.7378343134,0.9935221261,0.9259350031,0.9999453742,0.9355899972
422,3.1,Name of the function and the types of it's arguments,5,5,5,0.01144623756,0.9885537624,0.9853943479,0.7125290036,0.7477021488,0.9968854329,0.9643894885,0.999980176,0.9766252209
423,3.1,The name of the function and the types of its arguments.,5,5,5,0.004659056664,0.9953409433,0.9940549407,0.8690520525,0.8850740207,0.9998162956,0.9978996099,0.9999992079,0.9990660542
424,3.1,Includes the name of the function and the types of its arguments.,5,5,5,0.006848454475,0.9931515455,0.9912612208,0.8049169183,0.8287860586,0.9978299944,0.9751891651,0.9999863702,0.9839289784
425,3.1,"identification of a function and the data types of its parameters, it has the name, and the data type variables ",5,5,5,0.01471823454,0.9852817655,0.9812192076,0.675348103,0.7150704697,0.9906003489,0.8925287625,0.999962638,0.9559459861
426,3.1,"a return type, and input parameters",1,5,3,0.04052126408,0.9594787359,0.9482939718,0.379706502,0.4556017177,0.9856285159,0.8356831364,0.9998631081,0.8385890896
427,3.1,The function signature includes the method name and the input types.,5,5,5,0.0170686245,0.9829313755,0.978220058,0.6779482365,0.7173524671,0.9925932235,0.9153143634,0.9998987539,0.880619487
428,3.1,"A function signature includes the name of the function and types of arguments, but not the return type.  ",5,5,5,0.01084905863,0.9891509414,0.9861563615,0.7221158743,0.7561160302,0.9935463423,0.9262118805,0.9999487149,0.9395290987
429,3.1,The signature can include a result type and thrown errors.,1,3,2,0.0358107686,0.9641892314,0.9543046681,0.3351748586,0.4165186864,0.9886779563,0.8705490201,0.9999177699,0.9030414719
430,3.1,"function name, and input paramaters",5,5,5,0.06154698133,0.9384530187,0.9214646921,0.4118815064,0.4838399907,0.9880790595,0.8637015117,0.9998884995,0.8685283926
431,3.1,"The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.",5,5,5,0.00837123394,0.9916287661,0.9893181206,0.8354769349,0.8556069436,0.9958509528,0.9525617243,0.9999818541,0.9786038927
432,3.1,the name of the function and the types of its arguments,5,5,5,0.007137417793,0.9928625822,0.9908924972,0.7782151699,0.8053513685,0.9958767023,0.9528561329,0.9999656437,0.9594901022
433,3.1,A function signature includes the name of the function and the types of its arguments,5,5,5,0.01095741987,0.9890425801,0.9860180901,0.6990418434,0.7358651928,0.99499417,0.9427656685,0.9999753649,0.9709524811
434,3.1,"A function signature includes a function's return type, parameters and semi-colon.",1,5,3,0.0395091176,0.9604908824,0.9495854931,0.5533371568,0.6079880163,0.9869410712,0.8506902839,0.9998902693,0.870615222
435,3.1,the name of the function and the types of its arguments,5,5,5,0.007137417793,0.9928625822,0.9908924972,0.7782151699,0.8053513685,0.9958767023,0.9528561329,0.9999656437,0.9594901022
436,3.1,the function's name and parameters,5,5,5,0.04043996334,0.9595600367,0.9483977134,0.7080618143,0.7437815367,0.9923199646,0.9121900482,0.9999273476,0.9143346318
437,3.1,The name of the function and the types of its arguments.,5,5,5,0.004659056664,0.9953409433,0.9940549407,0.8690520525,0.8850740207,0.9998162956,0.9978996099,0.9999992079,0.9990660542
438,3.1,The portion of a function prototype that includes the name of the function and the types of its arguments,5,5,5,0.01287794113,0.9871220589,0.9835674626,0.7340612411,0.766599837,0.9940040039,0.9314445696,0.9999181986,0.9035469411
439,3.1,the name of the function and its parameters,5,5,5,0.0115519762,0.9884480238,0.9852594231,0.788803339,0.8146440357,0.9947583674,0.940069612,0.9999701152,0.9647624772
440,3.1,The function name and parameters,5,5,5,0.03528225422,0.9647177458,0.9549790641,0.7314432859,0.7643021984,0.9915334741,0.9031976815,0.9999304576,0.9180016935
441,3.1,name of function and types of arguments,5,5,5,0.02386665344,0.9761333466,0.969545623,0.6387012005,0.6829074519,0.9941585429,0.9332114967,0.9999360177,0.9245576305
442,3.1,a function's return type and parameter list,1,5,3,0.05041497946,0.9495850205,0.9356693723,0.4422700703,0.5105104008,0.9908803872,0.8957305902,0.9998471191,0.8197362641
443,3.1,"it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures. ",5,5,5,0.0166271925,0.9833728075,0.978783335,0.7094715238,0.745018763,0.9946830263,0.9392081963,0.9999661395,0.9600746887
444,3.2,Any functions that follows their deceleration that  are in the source code file are allowed to have access the variables.  Also global scope variables retrain their value throughout the execution of the program.,5,5,5,0.08152419329,0.9184758067,0.8959733282,0.4588202834,0.5250356338,0.9855609359,0.8349104585,0.9998090452,0.7748428455
445,3.2,they can be accessed by any C++ file anywhere.,0,5,2.5,0.07980656624,0.9201934338,0.8981650583,0.3823218346,0.4578970546,0.9872149039,0.853821159,0.9997887673,0.750932973
446,3.2,Global variables have file scope.,5,5,5,0.0388917923,0.9611082077,0.9503732138,0.6988912821,0.7357330532,0.9964122095,0.9589788728,0.9999025778,0.8851282313
447,3.2,The scope of global variables are created by placing variable declarations outside any class or function definition.  Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.,0,5,2.5,0.08768606186,0.9123139381,0.8881106477,0.3552634716,0.4341493829,0.9859250922,0.8390740523,0.9998190756,0.786669855
448,3.2,A global variable is an identifier that retains it's value throughout the execution of the program. It has file scope.,5,5,5,0.07163256407,0.9283674359,0.9085952656,0.552965045,0.6076614338,0.9904456516,0.8907600252,0.9998584635,0.8331126203
449,3.2,Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included,3,5,4,0.1003106833,0.8996893167,0.8720013519,0.2023958862,0.299985715,0.9921066219,0.9097507875,0.9997759877,0.7358643693
450,3.2,They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.,5,5,5,0.0848222971,0.9151777029,0.8917648749,0.3650651574,0.4427517961,0.986549783,0.8462164761,0.9998149347,0.7817872856
451,3.2,can be accesed by any classes that have and object of that variables class in it,1,5,3,0.126021862,0.873978138,0.8391933199,0.01138329506,0.1323442245,0.9892804944,0.8774381601,0.9998111367,0.7773090189
452,3.2,Global variables have file-scope.  The variable is know to all functions throught the file,5,5,5,0.07071882486,0.9292811751,0.909761217,0.4312084913,0.5008022471,0.994638717,0.9387015848,0.9998351744,0.8056521446
453,3.2,The entire program,4,5,4.5,0.2009512186,0.7990487814,0.7435818054,0.02913338318,0.1479225234,0.9896213703,0.8813355767,0.9998490678,0.8220339758
454,3.2,They have file scope when placed outside a function.,5,5,5,0.05855119228,0.9414488077,0.925287385,0.6215112209,0.6678207303,0.9942908842,0.9347246261,0.9998648439,0.8406358212
455,3.2,File scope.,5,5,5,0,1,1,1,1,1,1,1,1
456,3.2,They can be used throughout the program,4,5,4.5,0.1399130821,0.8600869179,0.8214678161,0.02735937759,0.146365574,0.9927288861,0.9168654659,0.9998418685,0.8135451935
457,3.2,Global variable can b accessed by any class wit an object in the variables class,1,5,3,0.1204077005,0.8795922995,0.846357114,0.06144944578,0.1762845956,0.9914886221,0.9026848652,0.9998375691,0.8084757417
458,3.2,The scope of global variables is at the file level.,5,5,5,0.06786227226,0.9321377277,0.9134062413,0.6266819239,0.6723587785,0.994497637,0.9370885419,0.9998868461,0.866578822
459,3.2,Global variables all have file scope.,5,5,5,0.04763478041,0.9523652196,0.9392169678,0.6739829779,0.7138723726,0.9956770916,0.950573876,0.9998873743,0.8672016621
460,3.2,it is accessible by all functions within a program,4,5,4.5,0.1291329861,0.8708670139,0.8352234568,0.02515272051,0.1444289096,0.9911838021,0.8991996949,0.9998460401,0.8184640304
461,3.2,"variables accessible anywhere in the program, as long as they are public.",4,5,4.5,0.1009564996,0.8990435004,0.8711772761,0.2081157565,0.3050057379,0.9905045449,0.8914333841,0.9998184954,0.7859857423
462,3.2,They can be referenced by any function following their declaration or definition inside the source file.,5,5,5,0.08427464962,0.9157253504,0.8924636852,0.3800692856,0.4559201134,0.9933071335,0.9234768776,0.9998434665,0.8154293805
463,3.2,"globally, anywhere in the program.",4,5,4.5,0.09428876638,0.9057112336,0.8796854509,0.2036414891,0.3010789138,0.9887885514,0.871813512,0.9998653513,0.8412340749
464,3.2,Global variables have a file scope,5,5,5,0.07847136259,0.9215286374,0.8998688076,0.5128341913,0.5724407393,0.9968813387,0.9643426771,0.9998664046,0.8424760443
465,3.2,The entire program.,4,5,4.5,0.1024320126,0.8975679874,0.8692944889,0.2823180556,0.3701291098,0.9900391645,0.8861124414,0.9998761721,0.8539930209
466,3.2,throughout the execution of the program,4,5,4.5,0.1400188208,0.8599811792,0.8213328912,0.06606474519,0.1803351959,0.9828885816,0.8043560025,0.9998174488,0.784751591
467,3.2,"If a variable is declared global, any function or class can use that variable.",4,5,4.5,0.093988657,0.906011343,0.8800683972,0.1785463691,0.2790542749,0.9905920692,0.8924340959,0.9998753658,0.8530422966
468,3.2,The entire program or file.,5,5,5,0.06195425987,0.9380457401,0.9209449956,0.4689884782,0.5339597121,0.9913938725,0.9016015416,0.9999048764,0.8878386419
469,3.2,throught the programm,4,5,4.5,0.1782588363,0.8217411637,0.7725377866,0.04491974041,0.1617773611,0.9922781352,0.9117117903,0.9996486068,0.5856679205
470,3.2,the whole code,4,5,4.5,0.1644104123,0.8355895877,0.7902086816,0.08445105702,0.1964718742,0.9785113822,0.7543091412,0.9998019237,0.7664458579
471,3.2,File scope,5,5,5,0.05714178085,0.9428582191,0.9270858251,0.8349677324,0.8551600439,0.9979799792,0.9769040225,0.9999465118,0.9369313495
472,3.2,can be referenced by any function that follows their declarations or definitions in the source file,5,5,5,0.1097151637,0.8902848363,0.8600010272,0.2350765169,0.328667749,0.9909613847,0.8966566771,0.9998296562,0.799145559
473,3.2,global variables have program scope (accessible anywhere in program),4,5,4.5,0.1329815984,0.8670184016,0.8303125425,0.2322769016,0.326210677,0.9919444235,0.9078962858,0.9998904521,0.8708306803
474,3.2,variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.,4,5,4.5,0.09139478207,0.9086052179,0.8833782388,0.2975877225,0.3835304762,0.9863867762,0.8443527323,0.9998202903,0.7881021119
475,3.3,It expands the function's definition in that place.  Once the functions is called you can use it as many times as you need.  The compiler just expands on the function.,4,5,4.5,0.01479768753,0.9852023125,0.9811178238,0.5523324609,0.6071062487,0.9949030618,0.94172398,0.9999664944,0.9604931149
476,3.3,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code â€” optimize the called code into the caller.   ",4,5,4.5,0.01582461596,0.984175384,0.9798074404,0.505520463,0.5660218728,0.9806123459,0.7783305827,0.9999465243,0.9369461164
477,3.3,The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.,5,5,5,0.01845407486,0.9815459251,0.9764521927,0.5590013862,0.6129592062,0.9928549389,0.9183066959,0.9999488644,0.9397053294
478,3.3,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2,4,3,0.03015387058,0.9698461294,0.9615229949,0.2857607603,0.3731505868,0.9930394175,0.9204159374,0.9999431606,0.9329799651
479,3.3,"Placing the qualifier inline before a function's return type in the function definition ""advises"" the compiler to generate a copy of the function's code in place to avoid a function call.",5,5,5,0.01437664032,0.9856233597,0.9816550894,0.6375660896,0.6819112261,0.9953813929,0.9471929955,0.9999579256,0.9503895933
480,3.3,You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.,0,4,2,0.02234232426,0.9776576757,0.9714907006,0.3481923938,0.4279434778,0.990367176,0.8898627716,0.9999636544,0.9571444992
481,3.3,"It expands a small function out... making your code longer, but also makes it run faster.",4,4,4,0.0227971673,0.9772028327,0.9709103109,0.4928204715,0.5548757725,0.9919401672,0.9078476215,0.9999510061,0.9422306545
482,3.3,the function is not treated as a separate unit like other functions,4,3,3.5,0.02711212635,0.9728878736,0.9654043277,0.389756918,0.4644224279,0.9913959532,0.9016253321,0.9999611301,0.9541680709
483,3.3,"When the program compiles,it will copy the function inplace, avoiding a function call.",5,5,5,0.01429116726,0.9857088327,0.9817641548,0.6446172595,0.6880996591,0.988582748,0.8694604527,0.99996367,0.9571628781
484,3.3,"It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.",5,5,5,0.02310115099,0.976898849,0.9705224209,0.4470934272,0.514743602,0.9930614045,0.9206673269,0.999936237,0.9248163163
485,3.3,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2,4,3,0.03015387058,0.9698461294,0.9615229949,0.2857607603,0.3731505868,0.9930394175,0.9204159374,0.9999431606,0.9329799651
486,3.3,Ignores the inline qualifier and typically does so for all but the smallest functions.,2,4,3,0.03726351261,0.9627364874,0.9524509347,0.2397099435,0.3327342587,0.994764591,0.9401407689,0.9999399172,0.9291555991
487,3.3,If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.,5,4,4.5,0.0268830657,0.9731169343,0.9656966142,0.4652987123,0.5307214028,0.9917890529,0.9061198505,0.9999651165,0.9588683959
488,3.3,it treats them as the same function,2,2,2,0.04449206591,0.9555079341,0.9432271409,0.4063954949,0.4790252131,0.9896394496,0.8815422863,0.9999490736,0.939952026
489,3.3,"Inline functions are copied in place, instead of being referenced.",5,5,5,0.02743917704,0.972560823,0.9649870039,0.4208917618,0.4917478078,0.9884027534,0.8674024778,0.9999216006,0.9075582692
490,3.3,"For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.",5,5,5,0.009858369827,0.9901416302,0.9874205023,0.7608587742,0.7901185923,0.9901874529,0.8878079011,0.999970838,0.9656147208
491,3.3,it generates a copy of the function's coding which eliminates calling the function,5,5,5,0.02026134729,0.9797386527,0.9741460732,0.652332902,0.694871264,0.9963365051,0.9581133032,0.9999511347,0.9423823786
492,3.3,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
493,3.3,It generates a copy of the function's code by by inserting it in the program.,4,5,4.5,0.01950383186,0.9804961681,0.9751126796,0.6062020063,0.654384655,0.9981246414,0.9785580223,0.999966745,0.9607886046
494,3.3,"tells the compiler to make a copy of function's code in place to avoid a function call.  it typically ignores it, except for the smallest functions.",5,5,5,0.008906424046,0.991093576,0.9886352062,0.7319616079,0.7647571018,0.9965920564,0.9610351589,0.9999723498,0.9673973279
495,3.3,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2,2,2,0.03015387058,0.9698461294,0.9615229949,0.2857607603,0.3731505868,0.9930394175,0.9204159374,0.9999431606,0.9329799651
496,3.3,"Multiple copies of the function code are inserted into the program, making it bigger.",4,5,4.5,0.0172278285,0.9827721715,0.9780169102,0.5917003751,0.6416573522,0.9928875336,0.9186793684,0.9999544394,0.9462789633
497,3.3,compiler ignores inline qualifier,2,3,2.5,0.1511664391,0.8488335609,0.807108284,0.05365755036,0.1694460675,0.9866410824,0.8472603511,0.9997046269,0.6517219684
498,3.3,"It generates a copy of the function, if it is needed again.",2,5,3.5,0.01690208912,0.9830979109,0.9784325609,0.5399531722,0.596241612,0.995121998,0.9442271948,0.9999730957,0.9682767575
499,3.3,"The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.",5,5,5,0.03565472364,0.9643452764,0.954503785,0.5541095138,0.6086658725,0.9869970443,0.8513302541,0.9999422193,0.9318700682
500,3.3,Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call,5,5,5,0.01580142975,0.9841985703,0.9798370266,0.6887069941,0.7267948507,0.9960301942,0.9546110872,0.9999607953,0.9537732273
501,3.3,"instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body",5,5,5,0.01271480322,0.9872851968,0.9837756302,0.635743022,0.6803112175,0.9924086774,0.9132043493,0.9999785863,0.9747508087
502,3.3,Expands the function into the program,4,4,4,0.03791701794,0.9620829821,0.9516170475,0.2879353464,0.3750591042,0.9930249915,0.920250998,0.9999476662,0.9382925495
503,3.3,it generates a copy of the functions code in place to avoid a function call,5,5,5,0.01098787785,0.9890121222,0.9859792252,0.7589693069,0.7884603084,0.997012415,0.9658413425,0.9999643764,0.9579957298
504,3.3,the function call will be replaced by the code that was defined in the inline function,5,5,5,0.02218401432,0.9778159857,0.9716927076,0.5755100846,0.627448004,0.9916675102,0.9047301883,0.9999694409,0.9639674068
505,3.3,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code â€” optimize the called code into the caller. ",4,5,4.5,0.01582461596,0.984175384,0.9798074404,0.505520463,0.5660218728,0.9806123459,0.7783305827,0.9999465243,0.9369461164
506,3.4,Overall the program has better performance (means it is faster) because it does not have to copy large amounts of data.,5,5,5,0.03411698341,0.9658830166,0.9564659754,0.4099397957,0.4821358555,0.9811828451,0.7848534047,0.9999659129,0.9598074817
507,3.4,because you can't change the original and passing by reference limits memory needed for the program.,5,4,4.5,0.03869837523,0.9613016248,0.9506200183,0.2675082684,0.3571313551,0.9899327013,0.8848951903,0.9999486379,0.9394383741
508,3.4,Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.,5,5,5,0.02996349335,0.9700365067,0.9617659206,0.4169901311,0.4883235562,0.9927240878,0.9168106046,0.9999841578,0.9813202889
509,3.4,"It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.",5,5,5,0.02810144424,0.9718985558,0.9641419363,0.4212051034,0.4920228109,0.9863024932,0.8433890793,0.999957859,0.9503110135
510,3.4,"Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.",5,5,5,0.03396201134,0.9660379887,0.9566637233,0.4141918421,0.4858676482,0.9858223998,0.8378999155,0.9999827695,0.9796832773
511,3.4,You do not alter the original value of the variable that was passed.,3,3,3,0.04225760698,0.957742393,0.9460783599,0.1152515486,0.2235038111,0.9895474102,0.8804899514,0.9999474803,0.9380733491
512,3.4,Don't have to make copies of stuff.,4,5,4.5,0.05145674944,0.9485432506,0.9343400509,0.4643467665,0.5298859311,0.9966062786,0.9611977685,0.9999780635,0.9741343564
513,3.4,you do not use unessesary memory space to copy variables between functions,5,5,5,0.04360866547,0.9563913345,0.9443543794,0.305007726,0.3900426146,0.9875539233,0.8576973496,0.9999800967,0.9765318137
514,3.4,It elimitates the need to copy large amonts of data,5,5,5,0.04043281078,0.9595671892,0.9484068401,0.4928202927,0.5548756156,0.9887692556,0.8715928934,0.9999807691,0.9773246064
515,3.4,The function can change the data stored in a variable passed by reference directly.,3,4,3.5,0.03708565235,0.9629143476,0.9526778882,0.3426275551,0.4230595178,0.995027503,0.9431467826,0.999973817,0.9691272796
516,3.4,Gives called function the ability to access and modify the callerâ€™s argument data.,3,4,3.5,0.03104001284,0.9689599872,0.9603922579,0.5142528415,0.5736858123,0.9950165557,0.9430216164,0.9999675727,0.9617645284
517,3.4,Gives called function the ability to access and modify the callerâ€™s argument data directly.,3,4,3.5,0.0290607214,0.9709392786,0.9629178774,0.4941985309,0.5560852212,0.9948722411,0.9413715907,0.9999784321,0.9745689875
518,3.4,It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.,3,3,3,0.03250730038,0.9674926996,0.9585199665,0.2039855272,0.3013808574,0.9907972366,0.8947798847,0.9999067028,0.8899920715
519,3.4,you don't make another copy and waste memory,5,5,5,0.06434607506,0.9356539249,0.9178929866,0.2051393837,0.3023935353,0.9876123178,0.8583650047,0.9999674207,0.9615852981
520,3.4,"Passing by reference eliminates the copying of large amounts of data, typical with pass by value.",5,5,5,0.0324422121,0.9675577879,0.9586030206,0.4501631856,0.5174377641,0.9934780356,0.9254308929,0.9999789548,0.9751853874
521,3.4,"If a function's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function.  Also pass by reference gives the function called the permission to read edit the argument directly.",5,5,5,0.02583676577,0.9741632342,0.967031716,0.4829838574,0.5462427047,0.9893867819,0.8786534016,0.9999796034,0.9759501059
522,3.4,"Gives access to the caller data directly, also it allows for modifying the data.",3,4,3.5,0.02825838327,0.9717416167,0.9639416786,0.4256453812,0.4959198042,0.9892711713,0.8773315642,0.9999779945,0.9740530528
523,3.4,"less overhead overall, and you modify the variable directly.",4,3,3.5,0.03856545687,0.9614345431,0.950789625,0.1038826928,0.213525977,0.9912327778,0.8997596598,0.9999922223,0.9908292049
524,3.4,The original variable being referenced can be modified directly by the called function.,3,3,3,0.03919029236,0.9608097076,0.9499923211,0.3117984235,0.3960024451,0.9973556198,0.9697653874,0.9999746761,0.9701402873
525,3.4,gives function ability to access and modify the caller's argument data directly,3,4,3.5,0.03717684746,0.9628231525,0.9525615212,0.3692056239,0.446385661,0.9962535038,0.9571643055,0.9999768525,0.9727065033
526,3.4,Gives the called function the ability to access and modify the caller's argument data directly.,3,3,3,0.02947747707,0.9705225229,0.962386088,0.4524177015,0.5194164316,0.9929895892,0.9198462249,0.9999575843,0.9499871754
527,3.4,"Less overhead than passed by value, especially when using large numbers.",4,3,3.5,0.03384637833,0.9661536217,0.9568112735,0.3144803941,0.3983562666,0.9909170053,0.8961492643,0.9999833854,0.9804095161
528,3.4,"large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed ",5,5,5,0.03074628115,0.9692537189,0.960767066,0.3896131217,0.4642962257,0.9940873408,0.9323974051,0.9999835401,0.980591963
529,3.4,The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.,4,4,4,0.02283293009,0.9771670699,0.9708646767,0.5366882086,0.5933761288,0.995779126,0.9517404907,0.9999769641,0.9728380386
530,3.4,Functions can directly modify arguments that are passed by reference.,3,4,3.5,0.04738032818,0.9526196718,0.9395416544,0.4040031731,0.4769256008,0.9939512599,0.9308415201,0.9999779595,0.974011776
531,3.4,It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata,5,5,5,0.02885937691,0.9711406231,0.9631747975,0.4891985655,0.5516970201,0.9944848278,0.936942087,0.9999889466,0.9869667912
532,3.4,"it takes less memory, thus it would make the program faster",4,4,4,0.0438863039,0.9561136961,0.9440001066,0.1389832199,0.2443318241,0.9893107367,0.8777839369,0.9999558893,0.947988476
533,3.4,You are able to modify the variable that is referenced directly.,3,4,3.5,0.05497384071,0.9450261593,0.9298521647,0.2045568377,0.301882266,0.9920709517,0.9093429505,0.9999876324,0.9854172582
534,3.4,"if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value",3,4,3.5,0.04495090246,0.9550490975,0.9426416553,0.1194153428,0.2271581496,0.9858851875,0.8386178005,0.9999477139,0.9383487614
535,3.4,"only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.",5,5,5,0.03503227234,0.9649677277,0.9552980466,0.446305424,0.514052014,0.9868136357,0.8492332455,0.9998758616,0.8536268621
536,3.4,"Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram",3,3,3,0.03434896469,0.9656510353,0.9561699622,0.3287401795,0.4108713143,0.9911750211,0.8990992967,0.9999868996,0.9845531078
537,3.5,"The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.",5,5,5,0.01552265882,0.9844773412,0.9801927444,0.5817010999,0.6328815255,0.9967736815,0.9631117755,0.9999833178,0.9803297667
538,3.5,They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.,4,2,3,0.0252135396,0.9747864604,0.9678269664,0.499612838,0.5608370677,0.9898571518,0.8840313922,0.9999330896,0.9211051475
539,3.5,"The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.",5,5,5,0.0157007575,0.9842992425,0.9799654865,0.654932797,0.6971530522,0.9939078708,0.9303454284,0.9999600475,0.9528914843
540,3.5,"Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.",5,5,5,0.02147525549,0.9785247445,0.9725970995,0.5498782992,0.6049523629,0.9937475637,0.9285125517,0.9999412152,0.9306861574
541,3.5,"The compiler selects proper function to execute based on number, types and order of arguments in the function call.",5,5,5,0.01423788071,0.9857621193,0.9818321497,0.5972284675,0.646509062,0.9950813683,0.9437626529,0.9999568057,0.9490691058
542,3.5,"By the type they are initilized with (int, char, etc.)",2,4,3,0.03103804588,0.9689619541,0.9603947677,0.2567586303,0.3476969752,0.9854320453,0.8334367829,0.9999574471,0.9498253623
543,3.5,"It selects the proper function to execute based on number, types and order of arguments in the function call.",5,5,5,0.01249527931,0.9875047207,0.9840557476,0.5650089979,0.6182317643,0.9961081757,0.9555026916,0.9999696683,0.9642354909
544,3.5,overloaded functions must have the same return type but different input parameters,1,5,3,0.04214638472,0.9578536153,0.946220282,0.3603243828,0.4385910728,0.9906045348,0.8925766221,0.9999630675,0.9564524422
545,3.5,"It examines the names, types, and order of arguments on each function.",5,5,5,0.02352619171,0.9764738083,0.9699800596,0.3763901889,0.4526911679,0.9942901617,0.9347163654,0.9999684413,0.9627887894
546,3.5,unique function signatures,5,5,5,0.07383322716,0.9261667728,0.9057871709,0.5383125544,0.5948017299,0.986481768,0.8454388247,0.9999415071,0.9310303215
547,3.5,"Is based on number, types, and order of arguments in the function call.",5,5,5,0.01602560282,0.9839743972,0.9795509768,0.4675551057,0.5327017181,0.9932409919,0.9227206455,0.9999587501,0.9513617791
548,3.5,"Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5,5,5,0.01582109928,0.9841789007,0.9798119278,0.5754246116,0.6273729889,0.9946891349,0.9392780396,0.999947932,0.9386059972
549,3.5,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
550,3.5,"they have to have same return type, but different input parameters",1,5,3,0.03160512447,0.9683948755,0.9596711629,0.1489352584,0.2530661937,0.9899498291,0.8850910212,0.9999540659,0.9458385209
551,3.5,Overloaded functions are differentiated by their parameters.,4,5,4.5,0.04317182302,0.956828177,0.9449118,0.4966763854,0.558259901,0.9912924777,0.9004422409,0.9999214002,0.9073220641
552,3.5,"The compiler selects the right function to execute from the number, types and order of arguments in the function call.",5,5,5,0.01305752993,0.9869424701,0.9833383034,0.5752060413,0.6271811615,0.9969096127,0.9646659493,0.9999772377,0.9731606936
553,3.5,it creates a set of candidate functions then a set of viable functions,3,3,3,0.03380590677,0.9661940932,0.956862916,0.3448196352,0.4249833887,0.9896710847,0.8819039874,0.9999088228,0.8924918592
554,3.5,their function signature.,5,5,5,0.04625362158,0.9537463784,0.9409793569,0.754237771,0.7843076935,0.9885455075,0.8690346613,0.9999661783,0.9601204079
555,3.5,The number and type of its parameters.,5,5,5,0.03640961647,0.9635903835,0.9535405249,0.2123043388,0.3086818316,0.9880878535,0.8638020587,0.9999609515,0.9539574856
556,3.5,by their function signature,5,5,5,0.05197840929,0.9480215907,0.9336744014,0.6542434096,0.696548014,0.9851424944,0.8301261927,0.9999750444,0.9705745375
557,3.5,"They have the same name, just different parameters.",3,4,3.5,0.03296482563,0.9670351744,0.9579361542,0.2217423171,0.3169650381,0.9942795972,0.9345955758,0.9999606039,0.9535475866
558,3.5,"They are differntiated by number, types and order of arguments in the function call.",5,5,5,0.01452660561,0.9854733944,0.9814637303,0.4418972433,0.5101831905,0.9925213056,0.9144920873,0.9999758638,0.9715406683
559,3.5,"it looks at the number, types, and order of arguments in the function call ",5,5,5,0.01907348633,0.9809265137,0.9756618101,0.3111875951,0.3954663538,0.9912458896,0.8999095749,0.9999756198,0.9712529739
560,3.5,The compiler differentiates overloaded functions by their signature.,5,5,5,0.03674954176,0.9632504582,0.9531067727,0.6607584953,0.7022659547,0.9906316226,0.8928863314,0.9998257135,0.7944966985
561,3.5,"By the number, types, and order of their arguments",5,5,5,0.03492587805,0.965074122,0.955433808,0.09986130893,0.2099966245,0.9926536166,0.9160048703,0.9999440405,0.9340174193
562,3.5,"Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5,5,5,0.01582109928,0.9841789007,0.9798119278,0.5754246116,0.6273729889,0.9946891349,0.9392780396,0.999947932,0.9386059972
563,3.5,paremeters,4,5,4.5,0.4739958048,0.5260041952,0.395170881,0.07690424472,0.1898484424,0.9547590291,0.4827357862,0.9994984485,0.4086144159
564,3.5,"By the number, and the types and order of the  parameters.",5,5,5,0.03057056665,0.9694294333,0.9609912815,0.2037044317,0.301134155,0.9927724522,0.917363581,0.999950347,0.9414535888
565,3.5,by the number and type of arguments,5,5,5,0.04133528471,0.9586647153,0.9472552635,0.06879921257,0.1827350911,0.9839899355,0.8169483709,0.999931177,0.9188499812
566,3.5,"by their signature (return type, argument list)",3,5,4,0.04265803099,0.957341969,0.94556741,0.3157682121,0.3994865153,0.9898778672,0.8842682426,0.9999173767,0.9025778034
567,3.5,overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.,1,5,3,0.01943534613,0.9805646539,0.975200069,0.4915039539,0.5537203357,0.9924647697,0.9138456827,0.999960827,0.9538106831
568,3.6,"A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.   ",5,5,5,0.01511728764,0.9848827124,0.980710007,0.506578207,0.5669501979,0.9900433222,0.8861599779,0.9999800514,0.9764783048
569,3.6,badly designed algorithyms. using recursion for a non recursive problem.,2,3,2.5,0.04996573925,0.9500342607,0.9362426128,0.3373355269,0.418414989,0.9878356396,0.8609183621,0.9999651996,0.9589663823
570,3.6,Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.,5,5,5,0.009326398373,0.9906736016,0.9880993096,0.6766940355,0.7162517223,0.9942763405,0.9345583398,0.9999747457,0.970222392
571,3.6,"Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes ""indefinite"" recursion, eventually exhausting memory.  ",5,5,5,0.009333968163,0.9906660318,0.9880896504,0.6256787181,0.6714783186,0.9940609502,0.9320956676,0.999973903,0.9692286919
572,3.6,Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion.,5,5,5,0.01327741146,0.9867225885,0.9830577296,0.5976638198,0.6468911473,0.9948220731,0.9407979923,0.9999645688,0.9582226156
573,3.6,Not having a base case that returns a base value.,3,5,4,0.02821791172,0.9717820883,0.9639933212,0.3060632646,0.3909690042,0.9905334635,0.8917640256,0.9999629888,0.9563596773
574,3.6,Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).,5,5,5,0.01648074389,0.9835192561,0.9789702067,0.506062746,0.5664978055,0.9896403124,0.8815521514,0.9999651599,0.9589195977
575,3.6,no base case no change in values.,4,5,4.5,0.05661928654,0.9433807135,0.9277525395,0.3325308859,0.4141982137,0.986996253,0.8513212066,0.999901099,0.8833846065
576,3.6,"If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.",5,5,5,0.01406896114,0.9859310389,0.9820476948,0.5822933912,0.6334013478,0.9938273362,0.9294246333,0.9999757628,0.9714216446
577,3.6,Omitting the base case or incorrectly calling the recursive step.,5,5,5,0.02659088373,0.9734091163,0.9660694449,0.5689457059,0.6216868014,0.9925673257,0.91501826,0.9999650433,0.9587821624
578,3.6,The recursive problem cannot be reduced to reach the base case.,4,5,4.5,0.01904988289,0.9809501171,0.9756919285,0.3975810111,0.4712892141,0.9918534198,0.9068557918,0.9999842003,0.9813703864
579,3.6,"Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",5,5,5,0.01507800817,0.9849219918,0.9807601284,0.5593912601,0.6133013776,0.9958197795,0.9522053033,0.9999870253,0.984701343
580,3.6,Not having the proper case to leave the recursion,3,5,4,0.02980935574,0.9701906443,0.9619626035,0.2973381579,0.3833114467,0.9913597155,0.9012110067,0.9999541762,0.9459686417
581,3.6,"no base case, or the recursive calls do not converge to the base case",5,5,5,0.02051818371,0.9794818163,0.9738183443,0.3610284925,0.4392090321,0.9925653895,0.9149961222,0.999979026,0.9752692957
582,3.6,"No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",5,5,5,0.01373177767,0.9862682223,0.9824779483,0.5982738733,0.6474265585,0.9934056361,0.9246031111,0.9999831369,0.9801165071
583,3.6,"If the recursion function never reaches or successfully defines the base case it will recurse forever.  This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.",5,5,5,0.01105993986,0.9889400601,0.9858872723,0.6019396782,0.6506438385,0.9910970991,0.8982083728,0.9999820653,0.9788529603
584,3.6," not creating a base case, or in the case where the base case will never be met.",5,5,5,0.01818031073,0.9818196893,0.9768015219,0.5006546974,0.5617514517,0.9935749828,0.9265393423,0.9999676817,0.961893096
585,3.6,improper handling of cases such that not all possible values are able to be handled.,2,5,3.5,0.02534860373,0.9746513963,0.9676546216,0.2586639524,0.349369174,0.9915471509,0.9033540562,0.999976286,0.972038549
586,3.6,There is no base case. The recursion step doesn't reduce the problem during each recursive call.,4,5,4.5,0.02091240883,0.9790875912,0.9733153043,0.5317456126,0.5890382779,0.9922396375,0.9112716254,0.9999819823,0.9787551648
587,3.6,"no base case, as in a single return that does not include calling the function again.  a static value to end at.",2,5,3.5,0.01868522167,0.9813147783,0.9761572443,0.4538349509,0.5206602753,0.9920001916,0.9085339119,0.9998787518,0.8570347279
588,3.6,"Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",5,5,5,0.0126324892,0.9873675108,0.9838806647,0.6246088743,0.6705393742,0.9955552653,0.9491809715,0.9999843203,0.9815118583
589,3.6,omitting the base case or writing the recursive call so that it does not converge upon the base case.,5,5,5,0.01780408621,0.9821959138,0.9772815927,0.444332093,0.5123201274,0.9920213777,0.9087761445,0.9999475236,0.9381244753
590,3.6,"Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case",5,5,5,0.01759976149,0.9824002385,0.9775423155,0.5602769852,0.6140787309,0.9964301776,0.9591843118,0.9999873498,0.9850839611
591,3.6,Infinite recursion may occur if no base case is defined or if the call is not varied.,4,5,4.5,0.01047170162,0.9895282984,0.9866378774,0.7317476869,0.7645693547,0.993122389,0.9213645956,0.9999813058,0.9779573803
592,3.6,"Not having a base case, or building a recursion process that doesn't converge on the base case.",5,5,5,0.01735377312,0.9826462269,0.9778562021,0.4327001572,0.5021114021,0.9915073151,0.9028985921,0.9999831341,0.9801132043
593,3.6,"Either omitting the base case, or writing the recursion step incorerectly ",5,5,5,0.03938925266,0.9606107473,0.9497384433,0.5080701709,0.5682596144,0.9965996617,0.9611221137,0.9999841417,0.9813013361
594,3.6,no base case or if the programmar does not define the base case as the simplest case and it never gets reached,5,5,5,0.01774859428,0.9822514057,0.9773524015,0.517765522,0.5767687033,0.9910534871,0.8977097339,0.9999712396,0.9660882742
595,3.6,No easily reached base case and no base case at all,5,5,5,0.04007035494,0.9599296451,0.9488693419,0.2535851002,0.3449117383,0.9906466454,0.8930580952,0.9999742421,0.9696284981
596,3.6,function is never allowed to reach the 'base case',5,5,5,0.03246980906,0.9675301909,0.9585678062,0.2088311464,0.3056335971,0.9904170395,0.8904328876,0.9999639065,0.9574417133
597,3.6,"it has no base case, or the base case is never met",5,5,5,0.02164429426,0.9783557057,0.9723814023,0.4375717044,0.5063868974,0.990080717,0.8865875323,0.9999341673,0.9223758896
598,3.6,recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,1,5,3,0.02049171925,0.9795082808,0.9738521136,0.4083627164,0.4807517378,0.989039101,0.87467818,0.9999739023,0.9692278421
599,3.7,"Both involve a controlled repetition structures, and they both have a termination test.  Also both of them can loop forever. ",5,5,5,0.01881158352,0.9811884165,0.9759960038,0.7690424919,0.7973010017,0.9975908317,0.9724546903,0.9999824128,0.9792627152
600,3.7,"As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.",1,3,2,0.05148237944,0.9485176206,0.9343073465,0.3390456736,0.4199158928,0.9974332047,0.9706524569,0.999982432,0.9792854101
601,3.7,Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.,5,5,5,0.02561199665,0.9743880033,0.9673185264,0.7208694816,0.7550221383,0.9916404289,0.9044205536,0.9999836059,0.9806695656
602,3.7,Both are based on a control statement         - Iteration-repetition structure         - Recursion-selection structure        Both involve repetition         -Iteration-explicitly uses repetition structure         -Recursion-repeated function calls        Both involve a termination test         -Iteration-loop-termination test         -Recursion-base case         Both gradually approach termination         -Iteration-modifies counter until loop-termination test fails         -Recursion-produces progressively simpler versions of problem        Both can occur indefinitely         -Iteration-if loop-continuation condition never fails         -Recursion-if recursion step does not simplify the problem,5,5,5,0.06134426594,0.9386557341,0.9217233614,0.4586062729,0.5248478083,0.9889357433,0.873496436,0.9999288612,0.9161193982
603,3.7,"Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.",5,5,5,0.02536761761,0.9746323824,0.9676303595,0.6505956054,0.6933465321,0.9959581243,0.9537870742,0.9999799548,0.9763644088
604,3.7,"Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.",5,5,5,0.03317350149,0.9668264985,0.9576698792,0.6167877913,0.6636752298,0.9946493638,0.9388233149,0.9999823401,0.9791770533
605,3.7,"Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.",3,5,4,0.03367781639,0.9663221836,0.9570263622,0.4078674614,0.4803170791,0.9918751823,0.907104614,0.9999446474,0.9347330479
606,3.7,anything you can do iterativly you can do recursively,2,4,3,0.1188092232,0.8811907768,0.8483968063,0.2991657853,0.3849154571,0.9779121711,0.7474580402,0.9999688906,0.963318497
607,3.7,Both are repetative and both have a end test.,4,5,4.5,0.0454081893,0.9545918107,0.9420581472,0.59522295,0.644748927,0.9891386517,0.8758163962,0.9999386548,0.9276671569
608,3.7,"Incorrectly writing either can result in infinite loops, both perform the same task over and over.",3,4,3.5,0.03976279497,0.960237205,0.9492617951,0.407710135,0.4801790021,0.9944167075,0.936163231,0.9999806346,0.9771660769
609,3.7,Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5,5,5,0.02146339417,0.9785366058,0.9726122348,0.7409425378,0.7726391814,0.9901940347,0.8878831551,0.9999726764,0.9677824221
610,3.7,"Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely",5,5,5,0.0192502141,0.9807497859,0.9754363015,0.7322089076,0.7649741434,0.9920123538,0.9086729699,0.9999783101,0.9744252073
611,3.7,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
612,3.7,anything you can do recursively you can do iteratively,2,4,3,0.1159186959,0.8840813041,0.852085183,0.3118648231,0.3960607204,0.9779121711,0.7474580402,0.9999688906,0.963318497
613,3.7,"Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.",2,5,3.5,0.03196775913,0.9680322409,0.9592084331,0.527900815,0.5856639055,0.9939632177,0.9309782393,0.9999833942,0.9804199453
614,3.7,"Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit.  So both involve a termination test to find that limit and both slowly approach that termination limit.  Both are based on a control statement as well.    If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.",5,5,5,0.02192342281,0.9780765772,0.9720252281,0.6226476431,0.6688181069,0.9905895065,0.8924047956,0.9999825759,0.9794550617
615,3.7,"both based on control statement, involve repetition, and involve a termination test within loops",5,5,5,0.02896404266,0.9710359573,0.9630412416,0.5026483536,0.5635011766,0.9945531435,0.9377231767,0.9999758924,0.9715744307
616,3.7,they are methods of repeating the same task.,1,3,2,0.04759961367,0.9524003863,0.9392618413,0.3150357604,0.3988436818,0.9837800638,0.8145487949,0.9999708252,0.9655996011
617,3.7,Both involve a termination test.   They use a control statement and repition to solve the problem.  They can also result in an infinite loop.,5,5,5,0.03042143583,0.9695785642,0.9611815758,0.6107423902,0.658369506,0.9889352617,0.8734909302,0.9999830132,0.97997065
618,3.7,"based on a control statement, involve repetition, involve a termination test.",5,5,5,0.0387609005,0.9612390995,0.9505402346,0.4615178406,0.5274031349,0.9907446361,0.8941784747,0.9999634255,0.9568745429
619,3.7,Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5,5,5,0.02103942633,0.9789605737,0.9731532272,0.7439084649,0.7752422164,0.9901940347,0.8878831551,0.999974177,0.9695517968
620,3.7,"both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.",5,5,5,0.02180367708,0.9781963229,0.9721780263,0.7365326285,0.768768841,0.9928157292,0.9178583899,0.9999729019,0.9680482593
621,3.7,"they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely",5,5,5,0.01752722263,0.9824727774,0.9776348767,0.7553685904,0.7853001529,0.991549117,0.9033765356,0.9999839452,0.9810695541
622,3.7,"They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.",5,5,5,0.01994246244,0.9800575376,0.9745529774,0.6576117277,0.6995042058,0.99123024,0.8997306435,0.9999792024,0.9754773384
623,3.7,"Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their  termination requirements are not met.",5,5,5,0.01401382685,0.9859861732,0.9821180474,0.7823421955,0.8089734371,0.9901087258,0.8869077729,0.9999839577,0.981084326
624,3.7,"both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely",5,5,5,0.0187792182,0.9812207818,0.9760373027,0.7522900701,0.782598301,0.9914926686,0.9027311305,0.9999803469,0.9768268122
625,3.7,they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached (its called the base case in recursion).,3,4,3.5,0.04002302885,0.9599769711,0.9489297309,0.3336431086,0.4151743517,0.9851590731,0.8303157457,0.9999819945,0.9787695169
626,3.7,Based on control statement;  involve repetition; involve a terminal test; both can occur infinitly,5,5,5,0.02876871824,0.9712312818,0.96329048,0.6967813969,0.7338813203,0.992764037,0.9172673657,0.9999645363,0.958184337
627,3.7,"repetition, termination test, eventually terminate, occur infinately",5,5,5,0.04625988007,0.9537401199,0.940971371,0.4663349986,0.5316308957,0.9925828423,0.9151956691,0.9999232052,0.9094503638
628,3.7,both need to have some kind of base case to tell when the loop needs to stop.,3,3,3,0.04382818937,0.9561718106,0.944074262,0.2597717643,0.350341441,0.9808159212,0.780658168,0.9999328525,0.9208256103
629,3.7,"they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through",2,5,3.5,0.03615480661,0.9638451934,0.953865668,0.3918143511,0.4662281264,0.9903685126,0.8898780536,0.9999821046,0.9788992713
630,4.1,int n[10]; //array of 10 integers and int n[arraySize] //where arraySize is some positive integer defined by the user,3,5,4,0.05921447277,0.9407855272,0.9244410245,0.2718075514,0.3609046049,0.9854485628,0.8336256365,0.9999826246,0.9795124491
631,4.1,by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.,3,5,4,0.02154040337,0.9784595966,0.9725139694,0.5334200263,0.5905078208,0.9889110593,0.8732142109,0.9999365379,0.9251710324
632,4.1,You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.,5,5,5,0.01331162453,0.9866883755,0.983014073,0.730401814,0.7633881544,0.9920490411,0.9090924351,0.9999670243,0.961117957
633,4.1,Pass the length along with the array or use a vector.,2,4,3,0.02096372843,0.9790362716,0.9732498194,0.5343256593,0.5913026462,0.9939861374,0.9312402933,0.9999163036,0.9013125543
634,4.1,"One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.",5,5,5,0.0189704299,0.9810295701,0.9757933123,0.5620355606,0.6156221381,0.9844517045,0.8222280222,0.9999346085,0.9228961195
635,4.1,"In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}",5,5,5,0.04287433624,0.9571256638,0.9452913998,0.4599217772,0.5260023558,0.9863897842,0.8443871241,0.9999143639,0.899025454
636,4.1,"1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)",5,5,5,0.04091620445,0.9590837955,0.9477900191,0.4493487477,0.5167229757,0.9713600425,0.6725440501,0.9999137218,0.8982682585
637,4.1,statically and dynamically,2,3,2.5,0.164840579,0.835159421,0.7896597793,-0.006020246074,0.1170700714,0.9848320145,0.8265763105,0.9999018498,0.8842698968
638,4.1,Explicitly int array[10]; or by variable const int size = 10; int array[size];,3,5,4,0.06162303686,0.9383769631,0.9213676435,0.3682949245,0.4455863891,0.9856248983,0.835641775,0.9998349488,0.8053861429
639,4.1,"Array lengths can be explicitly specified by inputing the number of elements between the brackets [ ] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [ ], the compiler will automatically declare the array with the proper number of elements needed for the list. ",5,5,5,0.01636111736,0.9836388826,0.9791228527,0.5951991081,0.6447280023,0.9836386638,0.8129320931,0.9999133446,0.8978234983
640,4.1,Specify an arrays size with a constant variable. And setting array elements with calculations.,2,5,3.5,0.02747815847,0.9725218415,0.9649372627,0.5167681575,0.57589337,0.9894324316,0.8791753395,0.999948543,0.9393264591
641,4.1,"statically, using {} and dynamically, using []",4,4,4,0.06575286388,0.9342471361,0.916097893,0.3373244107,0.4184052328,0.9909092266,0.8960603263,0.999942541,0.9322493401
642,4.1,"define it as array[5] or array[1,2,3,4,5]",4,5,4.5,0.07709622383,0.9229037762,0.9016235151,0.334331423,0.4157784484,0.994161354,0.9332436384,0.9999324168,0.9203118556
643,4.1,Static and dynamic.,2,3,2.5,0.07081770897,0.929182291,0.9096350387,0.3083905578,0.3930115444,0.986299479,0.8433546173,0.9999071489,0.8905181087
644,4.1,manually inside the brackets or automatically via an initializer list,5,5,5,0.04371780157,0.9562821984,0.9442151193,0.4188902676,0.4899912039,0.9954258845,0.9477016911,0.9998991626,0.8811013333
645,4.1,"You can use an initializer list, or simply tell the compiler how many elements you want in the array.  For an Initializer list:  int a[] = {10, 2, 3, -4, 5};  For an elemental declaration: int b[5];  Both arrays have 5 elements in them, but array a is already initialized.",5,5,5,0.02193856239,0.9780614376,0.9720059097,0.5619206429,0.615521281,0.9784450509,0.7535507399,0.9999784596,0.9746014449
646,4.1,"In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program. ",4,5,4.5,0.01933127642,0.9806687236,0.9753328642,0.5297710299,0.5873052927,0.9787173478,0.7566640556,0.9999672275,0.9613574837
647,4.1,"Implicit, namely when you give it values, like {1,2,3,4,5,6,7,8,9}, at which the compiler will automatically give this a size. Static, during the declaration. ",5,5,5,0.02574032545,0.9742596745,0.967154776,0.4685110152,0.5335406685,0.9877171796,0.8595639457,0.9999750438,0.970573824
648,4.1,"Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n[5]; int n[] = { 1,2,3,4,5 }",5,5,5,0.03691959381,0.9630804062,0.9528897826,0.4116979837,0.4836789227,0.9945338449,0.9375025252,0.9999451535,0.9353297829
649,4.1,either initializing the array with a specific length or initializing an array while declaring its contents.,5,5,5,0.02169060707,0.9783093929,0.9723223061,0.5849369168,0.6357214282,0.9914364781,0.9020886748,0.9999566812,0.948922292
650,4.1,within the brackets or by using an initializer list.,5,5,5,0.0114094615,0.9885905385,0.9854412751,0.7364736795,0.7687171046,0.9954831664,0.9483566265,0.9999706685,0.9654148307
651,4.1,specify the number of elements in the array declaration with a constant or using a constant variable for future scalability,3,5,4,0.02705228329,0.9729477167,0.9654806888,0.3676980436,0.4450625388,0.9908270444,0.8951206934,0.9999387155,0.9277386591
652,4.1,with a number and with a variable,3,3,3,0.04868644476,0.9513135552,0.9378750208,0.1419942379,0.2469744329,0.9873080167,0.8548857671,0.9998915171,0.8720865147
653,4.1,"explicitly, by declaring it in brackets (i.e. int array[50];) and implicitly, by initializing several values (i.e. int array[] = {1, 2, 3};)",5,5,5,0.03707021475,0.9629297853,0.952697587,0.4628768861,0.5285958961,0.975758497,0.7228339323,0.9999408308,0.9302328495
654,4.1,"one way of specifying of array is A[10] ; other way of specifying array is a[arraysize] = [1,2,3,4,5,6,7,8,9,10}",4,5,4.5,0.05399692059,0.9460030794,0.9310987363,0.3278366625,0.4100783459,0.9865336882,0.8460324555,0.999949423,0.9403640432
655,4.1,1-Initializing an array in a declaration with an initializer list 2-Specifying an arrays size with a constant variable,5,5,5,0.03017312288,0.9698268771,0.9614984286,0.5244278908,0.5826159065,0.9901577004,0.8874677251,0.999961451,0.9545464214
656,4.1,"Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};",5,5,5,0.04468071461,0.9553192854,0.942986421,0.3588853776,0.4373281353,0.988368121,0.8670065072,0.9998984713,0.8802862174
657,4.1,user defined value or by the number of elements in initializer list,5,5,5,0.02367156744,0.9763284326,0.969794557,0.430722326,0.500375566,0.9935610012,0.926379483,0.9999319477,0.9197587491
658,4.1,"you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to {1,2,3}",5,5,5,0.03441303968,0.9655869603,0.956088201,0.2934514284,0.3799002731,0.9834019667,0.8102258092,0.9999297656,0.9171857053
659,4.1,"use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has. ",3,5,4,0.02794533968,0.9720546603,0.9643411291,0.4131086469,0.484916986,0.9891043884,0.8754246453,0.9999630525,0.9564347482
660,4.2,"strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole",1,4,2.5,0.01999473572,0.9800052643,0.9744862755,0.3534158468,0.4325278219,0.9893120282,0.8777987026,0.9999515092,0.942823952
661,4.2,"the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they're accessed.",1,5,3,0.01415133476,0.9858486652,0.9819425841,0.5457671881,0.6013442614,0.9876150634,0.8583963966,0.9999274402,0.9144439068
662,4.2,"Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.",5,5,5,0.01391488314,0.9860851169,0.9822443017,0.6744866371,0.7143144073,0.987151549,0.8530967887,0.9999684547,0.962804538
663,4.2,"All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example:  string s; ",5,5,5,0.0147613287,0.9852386713,0.9811642185,0.5681698322,0.6210058588,0.99051961,0.8916056315,0.9999706804,0.9654288982
664,4.2,"By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.",1,4,2.5,0.01287448406,0.9871255159,0.9835718738,0.5459480286,0.6015029754,0.9918471934,0.9067846023,0.9999834142,0.9804434321
665,4.2,type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays),0,4,2,0.01328140497,0.986718595,0.9830526338,0.6160723567,0.6630473313,0.9910019367,0.8971203309,0.9998906346,0.8710459717
666,4.2,"They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.",2,5,3.5,0.02083438635,0.9791656137,0.9734148628,0.4814217687,0.5448717433,0.9792231109,0.7624467159,0.9999774258,0.9733825199
667,4.2,string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.,4,4,4,0.02438926697,0.975610733,0.9688787565,0.4355687499,0.5046290119,0.9914869799,0.9026660892,0.9999567964,0.9490581483
668,4.2,"By using an array of characters, you are limited to the size of the array of characters.  By declaring by type the end of the string is acknowledged by white space.",3,4,3.5,0.01361554861,0.9863844514,0.9826262592,0.6335613728,0.6783965012,0.9919692088,0.9081796695,0.9999595923,0.9523547925
669,4.2,"The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly. ",5,5,5,0.01458400488,0.9854159951,0.9813904875,0.5370819569,0.5937217005,0.9805987977,0.7781756794,0.9999481856,0.9389050021
670,4.2,string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.,5,5,5,0.01560151577,0.9843984842,0.9800921212,0.6585633755,0.7003394159,0.9959855307,0.9541004258,0.99995443,0.9462678947
671,4.2,A char array reads a string as each individual character. A string literal array reads the entire string.,2,4,3,0.02099108696,0.979008913,0.9732149092,0.5809838772,0.6322520577,0.9953941023,0.9473383088,0.9999546569,0.9465353514
672,4.2,array of characters can only hold as many characters as the array size and strings are not that limited.,4,4,4,0.02160322666,0.9783967733,0.9724338054,0.5966054797,0.6459622991,0.9958791476,0.9528840909,0.999918211,0.9035616093
673,4.2,"Stings can only be modified by functions of the String class, an array of characters can be modified by the user",3,4,3.5,0.02044534683,0.9795546532,0.9739112858,0.3848534226,0.4601188935,0.991552024,0.9034097731,0.9999200978,0.9057862771
674,4.2,"if by type string, the array contains an additional terminating null character",3,5,4,0.02375650406,0.9762434959,0.9696861759,0.5716128349,0.6240275973,0.9871887898,0.8535225828,0.999969446,0.963973388
675,4.2,The array of characters has a null character \0 at the end of the array to signify the array's end.  The string does not have this.,5,5,5,0.01212507486,0.9878749251,0.9845281365,0.7549215555,0.7849078144,0.9947739846,0.9402481711,0.9999570236,0.9493259767
676,4.2,strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.,2,4,3,0.01535052061,0.9846494794,0.9804123966,0.6755261421,0.715226725,0.9845979066,0.8238996292,0.999952337,0.9438000082
677,4.2,"the array of characters has a set length, while the type string has virtually unlimited length.",4,4,4,0.02055907249,0.9794409275,0.9737661693,0.4890415072,0.5515591785,0.9905016603,0.8914004028,0.9999781132,0.9741929701
678,4.2,Char array - Individual letters can be accessed directly with array subscript notation.  String array - array subscript will return the entire string.,1,3,2,0.03044438362,0.9695556164,0.9611522939,0.5204282999,0.5791056804,0.9903982165,0.8902176743,0.9999486305,0.9394295541
679,4.2,array of characters need a termination character as well as size specification whether its explicit or implicit.,5,5,5,0.02530997992,0.9746900201,0.9677039065,0.4147983789,0.486399973,0.9917902084,0.9061330621,0.9999550567,0.9470067445
680,4.2,when using an array individual characters can be accessed and manipulated.,1,4,2.5,0.02967041731,0.9703295827,0.962139892,0.4462606013,0.5140126755,0.993604659,0.9268786462,0.9999458521,0.9361534902
681,4.2,strings declared using an array of characters could result in data loss if character array not initialized large enough.,4,4,4,0.02800697088,0.9719930291,0.9642624864,0.644857347,0.688310371,0.9968992536,0.9645475083,0.9999807724,0.9773284823
682,4.2,"an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable",3,4,3.5,0.01948553324,0.9805144668,0.9751360291,0.4312829971,0.5008676369,0.9913340304,0.9009173349,0.9999695053,0.9640433804
683,4.2,"the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.",3,4,3.5,0.01878154278,0.9812184572,0.9760343364,0.5675003529,0.6204182927,0.9872519426,0.8542446419,0.9999725016,0.9675762936
684,4.2,"declaring a string, it includes white spaces but declaring a array of character does not include white spaces",0,3,1.5,0.02754402161,0.9724559784,0.9648532199,0.4044604003,0.4773268845,0.9904870461,0.8912333108,0.9999508119,0.9420017085
685,4.2,"an array of characters has one element a string doesnt have. it is the termination element, or ""null""",5,5,5,0.01738089323,0.9826191068,0.9778215963,0.6071174145,0.6551880595,0.9945210697,0.9373564601,0.9999748499,0.9703452282
686,4.2,Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.,4,4,4,0.01347726583,0.9865227342,0.9828027111,0.6575067043,0.6994120324,0.9959245829,0.9534035769,0.9999196558,0.9052651738
687,4.2,"cant modify individual characters of a type string array, character type array can modify individual characters",1,4,2.5,0.0409398675,0.9590601325,0.9477598246,0.4580362439,0.5243475245,0.9956338887,0.9500799141,0.9999488204,0.9396534892
688,4.2,"the type string is a class and is safer, while the other is just an array of characters.",3,4,3.5,0.0182108283,0.9817891717,0.9767625808,0.453828603,0.5206547041,0.9815729378,0.7893135436,0.9999563008,0.9484737233
689,4.2,"array  it is the collection of similar data types ex:int a[10]  ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a.  where as string mean collection of group of characters.  string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols.    However  Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type ",1,4,2.5,0.01434147358,0.9856585264,0.9816999628,0.5241844058,0.5824022128,0.9721974098,0.6821181179,0.9999500427,0.9410947868
690,4.3,by reference only,5,5,5,0.1002856493,0.8997143507,0.8720332959,0.6579529047,0.6998036385,0.9965965966,0.9610870685,0.999954807,0.9467123436
691,4.3,a reference pointer to an element in the array.,4,5,4.5,0.1128754616,0.8871245384,0.8559684172,0.6237559915,0.6697908448,0.9927389864,0.9169809479,0.999892844,0.8736510789
692,4.3,Arrays are passed to functions by reference.,5,5,5,0.07948428392,0.9205157161,0.8985762977,0.6220405698,0.6682853113,0.9931976882,0.9222255317,0.9998867678,0.8664864652
693,4.3,-Arrays are passed by reference         -Individual array elements passed by value        -Functions that take arrays as arguments         -Function prototypes may include parameter names        -const array parameters,5,5,5,0.1650676727,0.8349323273,0.7893700028,0.2786288261,0.3668912713,0.9828401324,0.8038020574,0.99975336,0.7091837725
694,4.3,Arrays are passed by reference.,5,5,5,0.05469810963,0.9453018904,0.9302040037,0.695956409,0.7331572728,0.9942561397,0.9343273739,0.9999161854,0.9011731567
695,4.3,"you must pass the array and its size to the function. Ex. function(array, size);",4,4,4,0.1334093213,0.8665906787,0.8297667586,0.3076166809,0.3923323542,0.9847046215,0.8251197584,0.9998457259,0.8180934873
696,4.3,"Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array.  Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome.  Otherwise, would need to send the length of the array as well.",3,4,3.5,0.13481915,0.86518085,0.827967786,0.2764698267,0.3649964334,0.9648264373,0.5978418478,0.9998758617,0.853626948
697,4.3,you pass a pointer to the first item and also pass the size.,4,3,3.5,0.1427254677,0.8572745323,0.81787915,0.1826331317,0.282641007,0.9895267319,0.8802535252,0.9998412054,0.8127632911
698,4.3,By reference.,5,5,5,0,1,1,0.9480165243,0.9543768958,0.9926872584,0.9163895147,0.9998770086,0.8549793096
699,4.3,"In two parts, the array itself, and it's size, so that the function it's being passed to can avoid out of bounds errors.",4,4,4,0.1497007608,0.8502992392,0.8089785219,0.1499817073,0.2539846058,0.9762754239,0.7287442346,0.9999053759,0.8884275409
700,4.3,Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.,5,5,5,0.1312168241,0.8687831759,0.8325644334,0.4590721726,0.5252567035,0.9833168528,0.8092526569,0.999838733,0.8098481513
701,4.3,Arrays are passed by reference.,5,5,5,0.05469810963,0.9453018904,0.9302040037,0.695956409,0.7331572728,0.9942561397,0.9343273739,0.9999161854,0.9011731567
702,4.3,the same way but with [] at the declaration and the actual function.,3,3,3,0.1553639174,0.8446360826,0.8017522089,0.2995516956,0.3852541499,0.9852573915,0.8314398731,0.9998646015,0.8403499408
703,4.3,specify the array name without brackets.,3,3,3,0.1497116089,0.8502883911,0.8089646794,0.3422166109,0.4226988542,0.9888232044,0.8722097185,0.9998728,0.8500169701
704,4.3,by reference,5,5,5,0.06631958485,0.9336804152,0.9153747446,0.8028118014,0.8269385107,0.9961435971,0.9559076834,0.9999555202,0.9475533039
705,4.3,"You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jingle(bin); but jingle must be declared correctly in order to receive an array, either with prototype void jingle (int []); or with the definition in its initialization: void jingle (int array[]);  It's also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory.  This gives the function complete control over the array however.",5,5,5,0.140442729,0.859557271,0.820791975,0.3726714849,0.4494274611,0.9438211246,0.357676875,0.9998902009,0.8705345438
706,4.3,They are called by the function then the function must loop through the array to get the set of characters.,1,3,2,0.1475245357,0.8524754643,0.8117554332,0.2393577248,0.3324251352,0.9851951358,0.8307280703,0.9998139204,0.7805912716
707,4.3,"by reference by default, unless you specify const, at which the later will make the array unmodifiable.",5,5,5,0.112021625,0.887978375,0.8570579316,0.5910910368,0.6411225687,0.9845366065,0.8231987532,0.9999061291,0.8893157204
708,4.3,"The function recieves both the array and the array size as parameters. function(arrayName, arraySize)",4,4,4,0.171391964,0.828608036,0.7813000673,0.2061458677,0.3032768723,0.9835324273,0.8117174353,0.9998745416,0.8520704306
709,4.3,specifying array name and passing as reference in an argument into the function,5,5,5,0.1553146839,0.8446853161,0.8018150319,0.3803815246,0.4561941487,0.9880639281,0.8635285073,0.9999076379,0.8910947661
710,4.3,1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.,4,4,4,0.1624623537,0.8375376463,0.7926944474,0.1902098954,0.2892907254,0.9789750923,0.7596109861,0.999859182,0.8339597674
711,4.3,"arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array",5,5,5,0.1584059596,0.8415940404,0.7978704959,0.3028586209,0.3881564606,0.9770367682,0.7374490909,0.9998535211,0.8272849029
712,4.3,by reference only,5,5,5,0.1002856493,0.8997143507,0.8720332959,0.6579529047,0.6998036385,0.9965965966,0.9610870685,0.999954807,0.9467123436
713,4.3,by reference,5,5,5,0.06631958485,0.9336804152,0.9153747446,0.8028118014,0.8269385107,0.9961435971,0.9559076834,0.9999555202,0.9475533039
714,4.3,by reference,5,5,5,0.06631958485,0.9336804152,0.9153747446,0.8028118014,0.8269385107,0.9961435971,0.9559076834,0.9999555202,0.9475533039
715,4.3,by refrence,5,5,5,0.1649002433,0.8350997567,0.7895836464,0.4105127156,0.4826386765,0.9961435971,0.9559076834,0.9996201525,0.5521171939
716,4.3,"function( int [], int length)",4,4,4,0.1814747453,0.8185252547,0.7684342156,0.1065353826,0.2158541004,0.9747101938,0.710848121,0.9998584247,0.8330668702
717,4.3,by reference,5,5,5,0.06631958485,0.9336804152,0.9153747446,0.8028118014,0.8269385107,0.9961435971,0.9559076834,0.9999555202,0.9475533039
718,4.3,by reference,5,5,5,0.06631958485,0.9336804152,0.9153747446,0.8028118014,0.8269385107,0.9961435971,0.9559076834,0.9999555202,0.9475533039
719,4.3,"The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array. ",1,4,2.5,0.1500356793,0.8499643207,0.8085511584,0.3268814087,0.409239971,0.9734635305,0.696594353,0.9998767392,0.8546617067
720,4.4,a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time.  if you don't declare it static then the new values will not be stored and will be reset to their original value,5,5,5,0.01440733671,0.9855926633,0.9816159201,0.4691756368,0.5341239712,0.9895633142,0.8806717898,0.9999803882,0.976875465
721,4.4,a static array can only be referenced not accessed. Also static arrays can be used without creating an object.,3,5,4,0.02508109808,0.9749189019,0.9679959647,0.4095097184,0.4817583998,0.9850007777,0.8285058701,0.9999761459,0.9718733527
722,4.4,An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.,5,5,5,0.01165670156,0.9883432984,0.9851257912,0.6425676942,0.6863008657,0.990092769,0.88672533,0.999982532,0.9794032568
723,4.4,"A program intializes static local arrays when their declarations are first encountered.  If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created.  Non-static array members cannot be initialized at all in C++.",3,5,4,0.01353889704,0.986461103,0.9827240683,0.5986308455,0.6477398539,0.9931483752,0.9216617098,0.9999854917,0.9828930648
724,4.4,Arrays that are static remain the same size throughout the program execution.,3,5,4,0.01299232244,0.9870076776,0.9834215096,0.4570595622,0.5234903434,0.98952763,0.880263793,0.9999678377,0.9620770856
725,4.4,"a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.",5,5,5,0.0201138258,0.9798861742,0.9743343139,0.4903715551,0.5527264901,0.9883286684,0.8665554244,0.9999744106,0.9698272368
726,4.4,An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.,4,5,4.5,0.01407152414,0.9859284759,0.9820444244,0.4911260903,0.5533887051,0.9879444694,0.8621626722,0.9999732833,0.9684980164
727,4.4,a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.,1,5,3,0.01980495453,0.9801950455,0.9747284405,0.3323111832,0.4140053924,0.9878108166,0.860634548,0.9999688476,0.9632678073
728,4.4,"If an array is declared as static, it is not created each time the array is called.",5,5,5,0.01080256701,0.989197433,0.9862156858,0.7054116726,0.7414556497,0.9894613871,0.879506403,0.999959248,0.9519487812
729,4.4,"An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it's elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.",5,5,5,0.005197525024,0.994802475,0.9933678433,0.7735415101,0.8012495483,0.9932866649,0.9232428491,0.9999929268,0.9916599453
730,4.4,"All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays  ",4,5,4.5,0.0248991847,0.9751008153,0.9682280902,0.3609190583,0.4391129876,0.9925783485,0.9151442894,0.9999748007,0.9702872408
731,4.4,"All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.",4,5,4.5,0.02348023653,0.9765197635,0.9700386995,0.4161064625,0.4875480077,0.9931660371,0.9218636474,0.9999602896,0.9531770058
732,4.4,static cannot be changed,1,5,3,0.05984091759,0.9401590824,0.9236416671,0.1039270684,0.2135649231,0.9720465057,0.6803927505,0.9999074353,0.8908558561
733,4.4,"A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.",3,5,4,0.01416629553,0.9858337045,0.981923494,0.3638532758,0.4416881926,0.9916616735,0.9046634537,0.9999592635,0.951967122
734,4.4,"A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).",1,5,3,0.0306327939,0.9693672061,0.9609118782,0.2459490299,0.3382099696,0.9863590621,0.8440358618,0.9999483745,0.9391277317
735,4.4,A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array's elements will still be the same when called later unless specifically initialized to something else.  This doesn't happen for automatic arrays.,5,5,5,0.01397371292,0.9860262871,0.9821692336,0.5640676618,0.6174056041,0.9903605972,0.8897875525,0.9999875095,0.9852722969
736,4.4,"Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes. ",1,5,3,0.01221346855,0.9877865314,0.9844153442,0.5746577978,0.6266999976,0.9937421234,0.9284503497,0.9999795056,0.9758348458
737,4.4,"static arrays keep the values after the end of a function, while non static reinitialize every time.",5,5,5,0.01719021797,0.982809782,0.978064902,0.4445030689,0.5124701837,0.9901967743,0.8879144786,0.9999712555,0.9661069918
738,4.4,"Static arrays are created and initialized only once, and the values aren't destroyed  when the function terminates in the program. Automatic arrays reset everytime the function is called.",5,5,5,0.009993255138,0.9900067449,0.9872483857,0.6541353464,0.6964531727,0.9922063451,0.9108909753,0.9999847153,0.9819776001
739,4.4,"its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.",5,5,5,0.01585811377,0.9841418862,0.9797646964,0.4811211526,0.5446079088,0.9938985995,0.9302394247,0.9999757351,0.971388951
740,4.4,"When we declare it static the array is not destroyed after the function is over.  When an array is not declared as static, the array is created and initialized every time a function calls it.",5,5,5,0.00808686018,0.9919131398,0.9896809877,0.7809561491,0.8077569787,0.9935075945,0.9257688558,0.9999834757,0.9805159756
741,4.4,the static array exists for the duration of the program,4,5,4.5,0.02733081579,0.9726691842,0.9651252752,0.3312086463,0.413037755,0.9871953887,0.8535980316,0.9999725977,0.9676896268
742,4.4,an array declared as static can only be declared once,2,5,3.5,0.0282984376,0.9717015624,0.9638905684,0.5489580631,0.6041447211,0.9805159296,0.7772282034,0.9999762777,0.972028798
743,4.4,"A static array exists in memory until the program terminates, whereas an automatic (or normal) array is removed when the function that created it terminates",5,5,5,0.01388663054,0.9861133695,0.9822803527,0.5486980677,0.603916537,0.9918436049,0.9067435726,0.9999854446,0.982837548
744,4.4,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
745,4.4,Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized,5,5,5,0.01319473982,0.9868052602,0.9831632205,0.5239190459,0.5821693207,0.9905486502,0.8919376634,0.9999722614,0.9672930345
746,4.4,A static array cannot be changed in the program.,1,5,3,0.01987498999,0.98012501,0.9746390737,0.3906721175,0.4652256493,0.9850409735,0.8289654503,0.9999300501,0.9175212344
747,4.4,static arrays are available throughout the program,5,5,5,0.04645186663,0.9535481334,0.9407263919,0.4424719512,0.5106875809,0.9856316166,0.8357185882,0.9999682724,0.9625895596
748,4.4,"a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.",5,5,5,0.009386062622,0.9906139374,0.9880231768,0.5630382895,0.6165021794,0.9942902106,0.9347169245,0.9999850188,0.9823354301
749,4.4,"if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.   ",1,5,3,0.01705181599,0.982948184,0.9782415061,0.500872612,0.5619427036,0.9901947894,0.8878917839,0.9999768339,0.9726846236
750,4.5,"at least 2, depending on how many arrays are being used.",1,4,2.5,0.03537255526,0.9646274447,0.9548638379,0.273927629,0.3627652831,0.9896647217,0.8818312363,0.9999619425,0.9551259659
751,4.5,all of them.,2,5,3.5,0.05465656519,0.9453434348,0.9302570153,0.44297418,0.5111283601,0.9820314551,0.7945560175,0.9999259126,0.9126425902
752,4.5,"When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.",5,5,5,0.02512234449,0.9748776555,0.9679433334,0.6310802698,0.6762189704,0.9925833127,0.9152010475,0.9999624379,0.9557101253
753,4.5,It depends what parameters you are passing in a multidimensional.  A multideminsional can have more than two dimensions.,2,5,3.5,0.038877666,0.961122334,0.9503912393,0.3861421049,0.4612499006,0.9900166968,0.8858555562,0.9999575323,0.9499258649
754,4.5,The first dimension is not required however the subsequent dimension(s) are needed for the compiler.,5,5,5,0.03177583218,0.9682241678,0.9594533361,0.423512429,0.4940478267,0.9949210708,0.9419298869,0.9999504537,0.9415793485
755,4.5,all but the first,5,5,5,0.0562723279,0.9437276721,0.9281952664,0.4854563773,0.5484127026,0.9754046984,0.7187887641,0.9999322899,0.9201622065
756,4.5,All of the dimensions must be specified.,2,5,3.5,0.03563827276,0.9643617272,0.9545247765,0.5168871284,0.5759977844,0.9924686508,0.913890057,0.9999684758,0.9628294386
757,4.5,just the first one at least.,1,3,2,0.02523595095,0.9747640491,0.9677983691,0.5207434297,0.5793822529,0.9813586881,0.786863912,0.9999477767,0.9384228388
758,4.5,"Two paramaters, the array and how many columns.  array(a[],[3])",4,4,4,0.06204521656,0.9379547834,0.9208289328,0.2533472478,0.3447029881,0.9921055112,0.9097380874,0.9999467896,0.9372589429
759,4.5,"The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2][4][6] with the name MultiArray would be passed as: ""MultiArray[][4][6], 2""",4,5,4.5,0.04405814409,0.9559418559,0.9437808347,0.3358167708,0.4170820583,0.9840921312,0.8181168287,0.9999423169,0.931985136
760,4.5,Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension,4,5,4.5,0.03713828325,0.9628617167,0.95261073,0.3927535713,0.4670524295,0.9924252843,0.9133942241,0.9999633907,0.9568335634
761,4.5,Every dimension after the first.,5,5,5,0.0300553441,0.9699446559,0.9616487169,0.5971077085,0.6464030783,0.9815879802,0.7894855312,0.9999321104,0.9199505306
762,4.5,both,2,3,2.5,0.238494873,0.761505127,0.6956752729,0.1932414174,0.2919513295,0.966186142,0.6133880789,0.999501501,0.4122136968
763,4.5,"the size of the first dimension does not need to be specified, but all other dimensions do.",5,5,5,0.02249282598,0.977507174,0.9712986571,0.501126945,0.5621659181,0.9884337154,0.8677564825,0.9998497878,0.8228830015
764,4.5,"when passing (in main) a multidimensional array to a function, no dimensions need be specified",1,3,2,0.05256485939,0.9474351406,0.9329260781,0.1886427253,0.2879153045,0.9900662368,0.8864219736,0.9999590355,0.9516982239
765,4.5,"All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension.  The size of the first dimension does not need to be specified.",5,5,5,0.02675247192,0.9732475281,0.9658632548,0.5201088786,0.5788253415,0.9907204661,0.8939021261,0.999931998,0.9198180367
766,4.5,as many as there are dimensions. Most commonly just rows and columns,2,5,3.5,0.038854599,0.961145401,0.9504206733,0.3625905216,0.4405799411,0.9911204603,0.8984754742,0.9999643134,0.9579214646
767,4.5,"at least 2, but it should always equal the number of dimensions that the argument is expecting... like...  blah[][][][] will require 4 dimensional array input. blah[][][] will require a 3 dimensional array. blah[][] will require a 2 dimensional array.",1,5,3,0.06672793627,0.9332720637,0.914853679,0.2619891763,0.3522875444,0.9732354814,0.6939869457,0.9996548851,0.5930708261
768,4.5,"None, just pass the array name.",1,3,2,0.04201644659,0.9579835534,0.9463860859,0.3689576387,0.4461680178,0.9932737973,0.9230957272,0.9999332549,0.921300002
769,4.5,all subsequent dimensions after the first dimension.  first is not needed to be specified.,5,5,5,0.02085119486,0.9791488051,0.9733934146,0.5625127554,0.6160409463,0.98848215,0.8683102615,0.9999596373,0.9524078606
770,4.5,"all dimensions, excluding the first one.",5,5,5,0.01411944628,0.9858805537,0.9819832746,0.7475937009,0.77847655,0.9918975445,0.9073602938,0.9999843544,0.9815520834
771,4.5,all dimensions but the first,5,5,5,0.04355585575,0.9564441442,0.9444217657,0.5927804708,0.6426052943,0.9878788284,0.8614121625,0.9999775812,0.9735657376
772,4.5,the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][]),1,5,3,0.05964934826,0.9403506517,0.9238861137,0.1992505342,0.2972252085,0.9862901706,0.8432481892,0.9998585785,0.8332481722
773,4.5,one less than the number of dimensions the array contains,4,5,4.5,0.04415678978,0.9558432102,0.9436549607,0.3269575238,0.4093067731,0.9821038104,0.795383294,0.9999576824,0.9501028064
774,4.5,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
775,4.5,one,1,3,2,0.1609125137,0.8390874863,0.7946720774,0.3139761984,0.3979137612,0.9622906414,0.5688487375,0.9996891447,0.6334666643
776,4.5,All subsequent dimensions after the first one.,5,5,5,0.0161563158,0.9838436842,0.9793841841,0.7036120296,0.7398761997,0.9875458192,0.8576046909,0.9999659685,0.9598730457
777,4.5,two or more,1,4,2.5,0.1265196204,0.8734803796,0.8385581691,0.1534955353,0.2570685038,0.972602691,0.6867519147,0.9998305093,0.8001514768
778,4.5,1 less than the total number of dimensions,4,5,4.5,0.06206589937,0.9379341006,0.9208025411,0.2665305734,0.3562732847,0.9809328652,0.7819952508,0.9999081963,0.8917531194
779,4.5,"Multi dimensional arrays are accessed using more than 1  index, one for each dimension at least. ",2,5,3.5,0.03885799646,0.9611420035,0.950416338,0.4100768268,0.4822561204,0.9930486552,0.9205215574,0.9999642529,0.9578501158
840,5.1,"Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.",1,5,3,0.0156237483,0.9843762517,0.980063752,0.4811116457,0.544599565,0.9949566298,0.9423364515,0.999955935,0.9480423921
841,5.1,"Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.",5,5,5,0.02308160067,0.9769183993,0.9705473676,0.3848821223,0.4601440816,0.9938234961,0.9293807281,0.9999734432,0.9686865903
842,5.1,The sorted array or list is built one entry at a time.,3,4,3.5,0.02295416594,0.9770458341,0.9707099772,0.3692785501,0.4464496645,0.9894849293,0.8797755735,0.9999575291,0.9499220567
843,5.1,It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.,5,5,5,0.01336985826,0.9866301417,0.9829397654,0.4904358387,0.5527829084,0.9900991626,0.8867984317,0.9999664487,0.9604392585
844,5.1,Compare two numbers at a time and swap until the entire list is sorted.,1,3,2,0.02297955751,0.9770204425,0.9706775769,0.2732622027,0.3621812742,0.988279008,0.8659876304,0.9999702487,0.9649198761
845,5.1,"Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.",5,5,5,0.01764917374,0.9823508263,0.9774792644,0.2793903351,0.3675596068,0.9896345754,0.8814865573,0.9999691646,0.9636415929
846,5.1,insertion sort is were after k iterations the first k items in the array are sorted it take the k+1 item and inserts it into the correct position in the already sorted k elements.,5,4,4.5,0.01720434427,0.9827956557,0.9780468766,0.4732140303,0.5376682522,0.9887355065,0.871207022,0.9999671625,0.9612808729
847,5.1,Looking at the 2nd element move forward and place the element in the correct spot.,4,5,4.5,0.01764446497,0.982355535,0.9774852728,0.4535280764,0.520390948,0.9922574747,0.9114755675,0.9999620169,0.9552136336
848,5.1,"Starting at the beginning of an array, take each element in order and place it in it's correct position relative to all previously sorted elements. ",5,5,5,0.01180225611,0.9881977439,0.9849400605,0.6124846339,0.6598985797,0.994875508,0.941408943,0.9999717084,0.9666410247
849,5.1,To sort the elements in an array by removing an element from the input data and inserting it at the correct position.,5,5,5,0.01600235701,0.983997643,0.9795806389,0.5787989497,0.6303344642,0.9933461665,0.9239231634,0.9999868125,0.9844504256
850,5.1,"Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.",5,5,5,0.01454120874,0.9854587913,0.9814450964,0.5651618838,0.618365944,0.9948339576,0.9409338744,0.9999776969,0.973702114
851,5.1,Take a number and choose a pivot point and insert the number in the correct position from the pivot point.,2,4,3,0.03260159492,0.9673984051,0.9583996446,0.3455087841,0.4255882177,0.9901090051,0.8869109654,0.9999767797,0.9726206022
852,5.1,have a marker and sort everything to the left of the value for every new value when moving to the right.,3,3,3,0.01844006777,0.9815599322,0.9764700661,0.3578755558,0.4364418689,0.990229876,0.8882929474,0.9999749732,0.9704906187
853,5.1,The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.,4,5,4.5,0.009821176529,0.9901788235,0.9874679618,0.5047671199,0.565360704,0.9918214511,0.9064902771,0.9999753489,0.9709335542
854,5.1,Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.,5,4,4.5,0.01685547829,0.9831445217,0.9784920373,0.5246557593,0.5828158945,0.9907814664,0.8945995754,0.9999737296,0.9690243005
855,5.1,"it goes through the list only once, picking each integer and putting it in its desired position, then continuing. ",4,4,4,0.01303017139,0.9869698286,0.9833732134,0.3626584411,0.4406395504,0.9935492083,0.9262446491,0.9999803173,0.976791941
856,5.1,Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.,3,4,3.5,0.01644605398,0.983553946,0.9790144718,0.5012426972,0.5622675076,0.9919292833,0.9077231799,0.9999852222,0.9825752671
857,5.1,Insert the item into its proper position by shifting larger sorted array values to the right.,1,5,3,0.01479607821,0.9852039218,0.9811198773,0.504535377,0.5651573158,0.9903537899,0.889709721,0.9999622931,0.9555392847
858,5.1,a comparison sort in which the sorted array is built one entry at a time,4,4,4,0.02158755064,0.9784124494,0.9724538085,0.332541585,0.4142076036,0.9912994777,0.9005222756,0.9999669429,0.9610219363
859,5.1,"Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.",5,4,4.5,0.01312410831,0.9868758917,0.9832533479,0.4760270715,0.5401371074,0.9887975153,0.8719160011,0.9999770744,0.9729681617
860,5.1,"Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.",5,5,5,0.01284515858,0.9871548414,0.9836092938,0.5788002014,0.6303355628,0.9947002738,0.9394053963,0.999979158,0.9754248957
861,5.1,the insertion sort creates a new array and inserts each item in its place with respect to the new array.,4,4,4,0.02100521326,0.9789947867,0.9731968838,0.4028450847,0.4759092087,0.9907180662,0.893874687,0.999971169,0.966004981
862,5.1,"Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted.",5,5,5,0.01531851292,0.9846814871,0.9804532391,0.4685519338,0.5335765806,0.9953205901,0.9464978044,0.9999785814,0.9747450908
863,5.1,"it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on... ",5,5,5,0.01237988472,0.9876201153,0.9842029936,0.4886304736,0.5511984364,0.989593589,0.8810179382,0.9999646171,0.9582795761
864,5.1,"Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.",3,5,4,0.0172072053,0.9827927947,0.9780432259,0.4661473036,0.5314661658,0.989376874,0.8785401191,0.9999883935,0.9863146565
865,5.1,"one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items",5,4,4.5,0.01467728615,0.9853227139,0.9812714587,0.4145649672,0.48619512,0.9897157188,0.8824143134,0.9999762699,0.9720195225
866,5.1,you take each element and insert it in the correct position with respect to all the elements before it,5,5,5,0.01564222574,0.9843577743,0.9800401744,0.5491116643,0.6042795285,0.9867212866,0.8481773689,0.9999572135,0.9495498928
867,5.1,"Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array (or list) is built one entry at a time.",4,4,4,0.01890480518,0.9810951948,0.9758770509,0.3122443855,0.396393842,0.992369155,0.9127524684,0.9999648663,0.9585734321
868,5.2,Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,5,5,5,0.01360094547,0.9863990545,0.9826448931,0.3845025599,0.4598109601,0.9896039088,0.8811359295,0.9999300542,0.9175260423
869,5.2,"Selection sort searches the whole array for the largest item and puts it at the end of the array, then searches for the second largest item and puts it at the second to last spot and so on.",5,4,4.5,0.01403832436,0.9859616756,0.9820867879,0.3639492989,0.4417724669,0.9926407705,0.915857994,0.9999394796,0.9286396505
870,5.2,Finds the minimum value and swap it with the value in the first position.,5,5,5,0.0158213973,0.9841786027,0.9798115475,0.3319723606,0.413708026,0.992199937,0.9108177083,0.9999717,0.9666310787
871,5.2,It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.,5,5,5,0.01269245148,0.9873075485,0.9838041515,0.7090850472,0.7446795733,0.9922879214,0.9118236806,0.9999685677,0.9629377637
872,5.2,"Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.",4,5,4.5,0.01605755091,0.9839424491,0.9795102103,0.2268663794,0.3214621523,0.9960825108,0.9552092504,0.9999668772,0.9609445435
873,5.2,"Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.",5,4,4.5,0.0271538496,0.9728461504,0.965351088,0.3286137581,0.410760361,0.9890078807,0.8743212217,0.9999605869,0.953527535
874,5.2,find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until  the array is sorted.,5,5,5,0.0146535635,0.9853464365,0.9813017292,0.5568282604,0.6110519704,0.9894496971,0.8793727448,0.9998716984,0.8487179489
875,5.2,Find the smallest and put it in the current position till you get to the end.,5,5,5,0.02042472363,0.9795752764,0.9739376014,0.2623219192,0.352579575,0.9915256629,0.9031083717,0.9999722458,0.9672747351
876,5.2,"Find the lowest unsorted value in the array and place it at the current position (starting at the first element in the array) and advance the ""current"" position by one. ",5,5,5,0.01513707638,0.9848629236,0.9806847561,0.4678034782,0.5329197014,0.9957192883,0.9510563339,0.999968619,0.9629982854
877,5.2,To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array.,2,5,3.5,0.01324832439,0.9867516756,0.9830948454,0.5872000456,0.6377076548,0.99108829,0.8981076538,0.9999617548,0.9549045745
878,5.2,"Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.",5,4,4.5,0.0189858079,0.9810141921,0.9757736897,0.3635359704,0.4414097108,0.9944001494,0.9359739137,0.9999703356,0.9650223807
879,5.2,"Select the minimum number from the array and put it in the current position, then move on",5,5,5,0.01320588589,0.9867941141,0.9831489978,0.4646562636,0.5301575601,0.9949337606,0.9420749762,0.9999174419,0.9026547631
880,5.2,Find the lowest value and place it in the front of the list and swap it with that value. Continue moving right.,5,5,5,0.01588714123,0.9841128588,0.9797276568,0.3509005606,0.4303202903,0.9931263563,0.9214099563,0.9999722847,0.9673205736
881,5.2,The main idea behind selection sort is to take the least variable from the right and put it directly to the left.,5,4,4.5,0.01174926758,0.9882507324,0.985007675,0.4412624538,0.5096260699,0.9910163443,0.8972850596,0.9999813116,0.977964293
882,5.2,"Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.",5,5,5,0.01545345783,0.9845465422,0.9802810464,0.372012198,0.4488488404,0.9872982781,0.8547744206,0.999892977,0.8738078265
883,5.2,It runs through and finds the lowest (or highest) value and puts it in its desired position.,5,4,4.5,0.02472686768,0.9752731323,0.9684479705,0.2558937967,0.3469379572,0.9928256413,0.9179717207,0.9999602602,0.953142322
884,5.2,"Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.",5,5,5,0.01388883591,0.9861111641,0.9822775385,0.2848790586,0.3723767646,0.9951838178,0.9449340137,0.9999868559,0.9845016723
885,5.2,Search for the largest item in an array and swap it with the last unsorted item.,5,4,4.5,0.02050346136,0.9794965386,0.9738371303,0.3533700407,0.4324876203,0.9912536826,0.8999986758,0.9999481929,0.9389135587
886,5.2,finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.,5,5,5,0.01445418596,0.985545814,0.9815561393,0.4231685102,0.4937459876,0.9918955633,0.9073376409,0.9999813016,0.9779525346
887,5.2,Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted,5,4,4.5,0.01881319284,0.9811868072,0.9759939503,0.3225708604,0.4054568343,0.9943559155,0.9354681636,0.9999838187,0.980920437
888,5.2,Select the smallest number in the list and move it to the front of the list and then advance to the next number.,5,5,5,0.01788812876,0.9821118712,0.9771743524,0.2933446169,0.3798065303,0.9921424117,0.9101599908,0.9999552576,0.9472437286
889,5.2,the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted.,5,4,4.5,0.01701420546,0.9829857945,0.9782894979,0.2297427952,0.323986628,0.9924753406,0.9139665454,0.9999773462,0.9732886164
890,5.2,"Selection sort finds the smallest number left unsorted in an array, and puts it at the end of what it has sorted",4,5,4.5,0.01343548298,0.986564517,0.9828560269,0.3472055793,0.4270774037,0.9956504094,0.9502688046,0.9999781231,0.9742046483
891,5.2,"selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position",5,5,5,0.01300263405,0.986997366,0.9834083517,0.5801877975,0.6315533814,0.9941997204,0.9336823015,0.9999724443,0.9675086996
892,5.2,"To put the biggest element at the end of the list and place the next highest element behind it, and so on.",3,4,3.5,0.01636219025,0.9836378098,0.9791214838,0.4791265428,0.5428573469,0.9944017327,0.9359920165,0.9999651138,0.9588652813
893,5.2,"the sort finds the largest item and places it at the end, then then next largest is found and placed next to last, continue until there is only one number left, this is the beginning of the sorted array",5,4,4.5,0.01564383507,0.9843561649,0.9800381208,0.2840335667,0.3716347217,0.9928816047,0.9186115797,0.9999461655,0.9365231248
894,5.2,"you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.",5,5,5,0.01104998589,0.9889500141,0.9858999739,0.4681276083,0.5332041729,0.9825375598,0.8003425832,0.9999754486,0.9710511211
895,5.2,Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list(starting in the second position.,5,5,5,0.01792395115,0.9820760489,0.9771286424,0.3666486144,0.4441415112,0.9920221159,0.9087845845,0.9999686493,0.9630339511
896,5.3,"The run time for this sorting program is n^2.  Best case is the list is already sorted, worst case is the list is sorted but in reverse. ",4,3,3.5,0.03276997805,0.967230022,0.9581847841,0.3083637953,0.3929880564,0.9848043472,0.8262599753,0.9999636113,0.9570936718
897,5.3,"Insertion sort is O(n) and performs n-1 operations in the best-case scenario, which is when the list or array is already sorted.",5,4,4.5,0.01945316792,0.9805468321,0.975177328,0.5450341105,0.6007008787,0.9918368195,0.9066659923,0.9999797241,0.9760924953
898,5.3,"The number of operations for insertions sort, under best-case, is  n(n-1)/2. The best case for insertion sort is on a sorted list where it runs is O(n). ",3,3,3,0.01632845402,0.983671546,0.9791645319,0.5642568469,0.6175716418,0.9859436603,0.8392863512,0.9999713242,0.9661880593
899,5.3,"Best case would be O(n) or n-1, because that's what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.",4,4,4,0.03114002943,0.9688599706,0.9602646345,0.4890478253,0.5515647236,0.9913042087,0.9005763681,0.9999574509,0.9498298435
900,5.3,Best case-1 Worst Case-N,0,4,2,0.2558554411,0.7441445589,0.6735228045,-0.01921281405,0.1054916631,0.9829435965,0.8049850175,0.9997072822,0.6548528385
901,5.3,It will do (n) operations where (n) is the number of elements in the array. Best case is when all the elements are already sorted.,5,5,5,0.01954692602,0.980453074,0.9750576906,0.6058529019,0.6540782648,0.9887791225,0.8717057074,0.9999781576,0.9742453255
902,5.3,O(n),3,4,3.5,0.1197960973,0.8802039027,0.8471375332,0.271219492,0.3603884967,0.9817251541,0.7910539136,0.9998827541,0.8617539013
903,5.3,Best case is all elements sorted. n-1.,5,3,4,0.05189162493,0.9481083751,0.9337851402,0.3964714408,0.4703154039,0.9856319086,0.8357219272,0.9999284085,0.9155855369
904,5.3,"The best case scenario for an insertion sort, where all the elements of the array have been already sorted, will cause the for loop to iterate ""x"" times (""x"" being the number of elements in the array) and the while loop to never have to iterate, resulting in the insertion sort to require ""x"" operations. ",5,5,5,0.02277237177,0.9772276282,0.9709419505,0.4786650836,0.542452349,0.9878813818,0.861441358,0.9999689929,0.9634391687
905,5.3,1 operation. the best case scenario s where it is already sorted and does one comparision.,3,3,3,0.03854733706,0.9614526629,0.9508127462,0.3450815678,0.4252132729,0.9790153789,0.7600716054,0.9999645787,0.9582342725
906,5.3,"n operations, where n is the number of items.",3,5,4,0.03145813942,0.9685418606,0.9598587191,0.4101978838,0.4823623656,0.9911168244,0.8984339031,0.9999442651,0.9342823388
907,5.3,n-1,3,4,3.5,0.6583672166,0.3416327834,0.1599088862,-0.05836266279,0.07113194393,0.9584800896,0.5252806601,0.9995353932,0.4521764693
908,5.3,"O(n), the list is already sorted.",5,4,4.5,0.03230029345,0.9676997066,0.958784112,0.5352077484,0.5920768085,0.993504647,0.925735156,0.9999803812,0.9768672453
909,5.3,Insertion sort will take n-1 operations if the array is in reverse order.,4,4,4,0.03306150436,0.9669384956,0.95781279,0.4786254764,0.5424175878,0.9875222009,0.8573346502,0.999976673,0.972494841
910,5.3,"In the best case scenario of an already sorted list, insertion sort will progress once through the list.  So the number of operations is directly proportional to the number of elements in the list.  Also noted as O(n) in big o notation. ",5,5,5,0.02023726702,0.979762733,0.9741768002,0.4776607156,0.5415708691,0.9849922411,0.8284082672,0.9999707061,0.9654591464
911,5.3,1 where there is a list of two ints and only one must be moved.,2,3,2.5,0.05176728964,0.9482327104,0.9339437948,0.1413463503,0.2464058168,0.9760582033,0.7262606351,0.9999162355,0.9012322615
912,5.3,"Best case is N, while the worst case is N factorial.",2,4,3,0.04190570116,0.9580942988,0.9465273994,0.2424975187,0.3351807636,0.9926156754,0.9155710679,0.99995412,0.9459022877
913,5.3,n-1 The best case is when the array is already sorted.,5,4,4.5,0.03317832947,0.9668216705,0.9576637185,0.4414850473,0.5098214283,0.9804436019,0.7764012419,0.9999597416,0.9525308363
914,5.3,worst case its = O(n) time best case its = O(n^2) time,2,4,3,0.05179321766,0.9482067823,0.9339107099,0.3418652415,0.4223904761,0.990570135,0.8921833106,0.9999548082,0.9467138357
915,5.3,O(n),3,4,3.5,0.1197960973,0.8802039027,0.8471375332,0.271219492,0.3603884967,0.9817251541,0.7910539136,0.9998827541,0.8617539013
916,5.3,N number of times.  Where N equals the number of elements in the list.  Best-case scenario is that the elements in the list are already sorted.,5,5,5,0.02557945251,0.9744205475,0.9673600535,0.4092109203,0.4814961608,0.9824421821,0.799252079,0.9999370347,0.9257568764
917,5.3,the best case scenario for insertion sort is a list that is already sorted. the number of operations would be the same as the number of elements,5,5,5,0.02646917105,0.973530829,0.966224753,0.3313350379,0.4131486821,0.9816885879,0.790635833,0.999953293,0.9449272288
918,5.3,"insertion sort will make zero operations (and length - 1 comparisons) in the best case scenario, that is, when the array its given is already in order.",3,4,3.5,0.0230166316,0.9769833684,0.9706302696,0.467273891,0.5324549111,0.988255295,0.8657165073,0.9999646359,0.958301721
919,5.3,theta(n) the best case senario is that everything is already sorted,5,4,4.5,0.03257071972,0.9674292803,0.9584390421,0.3491417766,0.4287767001,0.9956120968,0.9498307563,0.9999501285,0.9411959131
920,5.3,n operations  The best case scenario is when all the numbers are in increasing order.,5,5,5,0.02861487865,0.9713851213,0.9634867826,0.2592056692,0.3498446098,0.9828273103,0.8036554555,0.9999424326,0.9321215751
921,5.3,"it could be considered that having only one item would be the easiest to sort, but this could also be a trivial result as nothing is moved  having two items allows the algorithm to sort the items into the correct order",2,3,2.5,0.03900504112,0.9609949589,0.9502287058,0.03271229565,0.1510635426,0.9825169369,0.8001067904,0.9999323437,0.9202256318
922,5.3,the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and doesn't have to make any changes (the list is already sorted),5,3,4,0.03297024965,0.9670297503,0.957929233,0.1498614401,0.2538790536,0.9764193891,0.7303902652,0.9999267694,0.9136529151
923,5.3,very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is (0)1,2,3,2.5,0.02730900049,0.9726909995,0.965153112,0.2040718049,0.3014565788,0.9873006273,0.8548012807,0.9999519069,0.9432927976
924,5.4,"The base case for a recursive merge sort is one number.  One number by itself is a sorted list, regardless of what number it is.",5,5,5,0.02690792084,0.9730920792,0.9656648986,0.3558414876,0.4346566766,0.9930582278,0.9206310057,0.9999709694,0.9657696609
925,5.4,The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements.,5,5,5,0.02304702997,0.97695297,0.9705914805,0.3085290194,0.3931330647,0.9948882858,0.9415550384,0.9999658295,0.9597091105
926,5.4,The base case for a recursive implementation of merge sort is one.,5,5,5,0.03323233128,0.9667676687,0.9575948111,0.186888203,0.2863754545,0.9936452221,0.9273424263,0.9999624598,0.9557358462
927,5.4,The best case is the same as the worst case O(n log n) for a recursive merge sort.,1,3,2,0.0294406414,0.9705593586,0.9624330911,0.3573011458,0.4359377401,0.9952219039,0.9453694715,0.9999609432,0.9539476316
928,5.4,there is one object in the split array to sort.,5,5,5,0.03580850363,0.9641914964,0.9543075583,0.325964272,0.4084350494,0.9940885934,0.9324117275,0.9999138164,0.8983799052
929,5.4,The base case is when the length of the current array is 1.,5,5,5,0.02051389217,0.9794861078,0.9738238203,0.4120812416,0.4840152875,0.9946694564,0.9390530443,0.9999696206,0.9641793274
930,5.4,O(nlog(n)),1,4,2.5,0.1142217517,0.8857782483,0.8542505213,0.298514843,0.38434416,0.9819704347,0.7938583384,0.9998032311,0.7679874036
931,5.4,Best case is one element.  One element is sorted.,5,5,5,0.05405682325,0.9459431767,0.9310222992,0.2400719225,0.3330519482,0.9932950781,0.9233390419,0.9999506404,0.9417994501
932,5.4,If the array being sorted has 0 or 1 elements,5,4,4.5,0.02604234219,0.9739576578,0.966769396,0.6015529037,0.6503043873,0.9964343774,0.9592323303,0.9999718421,0.9667986785
933,5.4,"T(n) = 0, if n&lt;2.",4,4,4,0.06750202179,0.9324979782,0.9138659288,0.5122785568,0.5719530887,0.9829025945,0.8045162195,0.9999254064,0.9120457587
934,5.4,"A list size of 1, where it is already sorted.",5,5,5,0.02573221922,0.9742677808,0.9671651198,0.5462158918,0.6017380646,0.9953347859,0.9466601119,0.9999682511,0.9625644602
935,5.4,Single element in the array,5,5,5,0.08878910542,0.9112108946,0.8867031399,0.2428034544,0.335449267,0.9924572036,0.9137591748,0.999924681,0.9111904799
936,5.4,O(nlog(n)),1,3,2,0.1142217517,0.8857782483,0.8542505213,0.298514843,0.38434416,0.9819704347,0.7938583384,0.9998032311,0.7679874036
937,5.4,n * log( n ),1,3,2,0.1253845096,0.8746154904,0.8400065956,0.3987183571,0.4722874016,0.9776447408,0.7444003662,0.9999239435,0.9103207883
938,5.4,A list or array of only 1 element.,5,5,5,0.02646249533,0.9735375047,0.9662332714,0.4226257205,0.4932696102,0.99325041,0.9228283282,0.9999333384,0.9213985458
939,5.4,where you only must merge sort once,3,4,3.5,0.06676363945,0.9332363605,0.914808121,0.1997895986,0.2976983163,0.9887073575,0.8708851798,0.9999466617,0.9371081658
940,5.4,A single Element on the Array.,5,5,5,0.04839903116,0.9516009688,0.9382417669,0.2891340256,0.3761111205,0.9937272727,0.9282805543,0.9999209026,0.9067353287
941,5.4,There is only one element in the subarray.,5,5,5,0.05690103769,0.9430989623,0.9273930188,0.1458692849,0.2503753535,0.9943666425,0.9355908113,0.9999683437,0.9626736861
942,5.4,"if the array length is less than or equal to 1, then that array is returned to the other array and merged together",5,4,4.5,0.02210795879,0.9778920412,0.9717897561,0.4094981849,0.4817482774,0.9952070884,0.9452000783,0.9999620447,0.9552464307
943,5.4,"if (right &gt; left)   {     mid = (right + left) / 2;     m_sort(numbers, temp, left, mid);     m_sort(numbers, temp, mid+1, right);      merge(numbers, temp, left, mid+1, right);   } ",2,2,2,0.04464840889,0.9553515911,0.9430276438,0.4528173506,0.5197671822,0.9607384942,0.5511022083,0.9997932063,0.7561669693
944,5.4,The sequence of numbers has zero or one elements.,5,5,5,0.03228390217,0.9677160978,0.9588050275,0.2638563514,0.3539262637,0.9946709337,0.9390699347,0.9999672388,0.9613708972
945,5.4,one element in an array,5,5,5,0.06903862953,0.9309613705,0.9119051835,0.2252725363,0.3200633219,0.9909262671,0.8962551596,0.9998416185,0.8132503932
946,5.4,array of length 1,5,5,5,0.05420738459,0.9457926154,0.9308301796,0.4144455194,0.4860902872,0.990266726,0.8887142737,0.9998724628,0.8496193483
947,5.4,the array has one element,5,5,5,0.05870473385,0.9412952662,0.9250914627,0.2578501999,0.3486549872,0.9905135255,0.8915360637,0.9999015183,0.8838789846
948,5.4,"When there is only one element in the array, or when the starting element in the array is the same as the ending element.",4,5,4.5,0.02355855703,0.976441443,0.9699387608,0.359826386,0.4381540078,0.9941522032,0.9331390115,0.9998320181,0.8019304848
949,5.4,"when each half or the original array has nothing else to sort, and puts the halfs back together",2,3,2.5,0.02745074034,0.9725492597,0.9649722489,0.3051663935,0.3901818686,0.9941664316,0.9333016923,0.999961051,0.9540747309
950,5.4,the size of the list being sent is &lt;= 1,5,4,4.5,0.03364419937,0.9663558006,0.9570692583,0.5592391491,0.6131678779,0.9954298357,0.9477468681,0.999946489,0.9369045176
951,5.4,O(n log n),1,3,2,0.1074517965,0.8925482035,0.8628891337,0.3774785697,0.4536463812,0.9826581248,0.801721067,0.9999065454,0.8898065384
952,6.1,Its a location in memory that contains the memory address of another location in memory that contains information.,5,5,5,0.01849508286,0.9815049171,0.9763998656,0.5950405598,0.6445888529,0.9979285496,0.9763159994,0.9999839671,0.9810953915
953,6.1,A pointer is a variable that contains a memory address as its value.,5,5,5,0.01430684328,0.9856931567,0.9817441519,0.760268569,0.7896006009,0.9969860483,0.965539878,0.9999781133,0.9741931035
954,6.1,A pointer is a variable which stores the address of another variable.,5,5,5,0.0126324296,0.9873675704,0.9838807407,0.7847107649,0.8110522032,0.9975689965,0.9722050365,0.9999542599,0.946067311
955,6.1,Pointers are variables that contain as their values memory addresses of other variables.,5,5,5,0.0352923274,0.9647076726,0.9549662105,0.682730794,0.7215498609,0.9971936471,0.9679134668,0.9999479112,0.9385815025
956,6.1,A data type whose value refers to another value stored elsewhere in the computer memory using its address.,4,5,4.5,0.02146226168,0.9785377383,0.9726136799,0.3983962238,0.4720046825,0.991963166,0.9081105795,0.9999825852,0.9794659513
957,6.1,a pointer holds a memory location,5,4,4.5,0.05589741468,0.9441025853,0.9286736639,0.2478561401,0.3398837378,0.9912566403,0.9000324925,0.9999573749,0.9497402739
958,6.1,a name that represents actual location or value of a data type. int *bPtr points to an integer value.,5,4,4.5,0.02829921246,0.9717007875,0.9638895796,0.3230638206,0.405889479,0.9950989674,0.9439638731,0.9999841894,0.9813575089
959,6.1,A variable that stores the address of another variable,5,5,5,0.01299637556,0.9870036244,0.9834163376,0.7952700257,0.8203194993,0.9995736806,0.9951256627,0.9999784069,0.9745392713
960,6.1,a pointer is a programming language data type whose value refers directly to (or points to) another value stored elsewhere in the computer memory using its address,5,5,5,0.02852088213,0.9714791179,0.9636067243,0.2949467897,0.3812126714,0.9896819504,0.8820282215,0.9999804643,0.9769652256
961,6.1,A data type whose value refers to another value stored somewhere else in the computer memory using its address.,5,5,5,0.02390795946,0.9760920405,0.9694929155,0.3835950494,0.4590144868,0.9923311897,0.912318391,0.9999813625,0.9780243355
962,6.1,"It is like a variable however instead of holding data, it holds a location in memory.",4,5,4.5,0.02301704884,0.9769829512,0.9706297372,0.4169096053,0.488252883,0.9943769557,0.9357087271,0.999967828,0.9620656558
963,6.1,A pointer is a reference to a location in memory,5,5,5,0.03957647085,0.9604235291,0.9494995488,0.2638111413,0.3538865852,0.9926715481,0.9162098908,0.9999469689,0.9374703944
964,6.1,A pointer is a reference to the memory location of an object.,4,5,4.5,0.03018468618,0.9698153138,0.9614836735,0.3539121747,0.4329634222,0.9949445953,0.9421988548,0.9999511391,0.9423875491
965,6.1,A pointer is a variable that contains the memory address of a variable that has a value.,5,5,5,0.01038312912,0.9896168709,0.9867508979,0.8582643867,0.8756062659,0.9978944004,0.9759255537,0.9999861057,0.9836170455
966,6.1,"It is a variable that contains not only a *value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.",2,5,3.5,0.01942521334,0.9805747867,0.9752129987,0.5365754366,0.5932771549,0.9930350207,0.9203656666,0.9999768523,0.9727062107
967,6.1,Contains a variable's memory address as a value.,5,5,5,0.01888108253,0.9811189175,0.9759073216,0.7724618316,0.8003019725,0.9928074813,0.917764087,0.9999403481,0.929663699
968,6.1,variable that points to the memory address of another variable and it is type specific.,5,5,5,0.01188105345,0.9881189466,0.9848395134,0.7903767228,0.8160249101,0.9967519048,0.9628627901,0.9999493181,0.9402403495
969,6.1,An element that references a memory cell,5,5,5,0.04333996773,0.9566600323,0.9446972437,0.3239710927,0.4066857429,0.997178357,0.9677386463,0.9999637075,0.9572071086
970,6.1,Is a reference call to the place in memory where the object is stored.,4,4,4,0.02761310339,0.9723868966,0.96476507,0.3053329289,0.3903280278,0.9948283037,0.9408692308,0.9999645249,0.9581708745
971,6.1,a variable that contains the address of another variable,5,5,5,0.007410943508,0.9925890565,0.9905434724,0.8711688519,0.8869318218,0.9980862242,0.9781187774,0.9999916896,0.9902010854
972,6.1,"A pointer variable contains the number of a memory address as its value, which may be null or 0, or the address of some value stored in memory.",5,5,5,0.01435691118,0.9856430888,0.9816802641,0.6421298981,0.6859166356,0.9941106648,0.9326640808,0.9999609579,0.9539649253
973,6.1,A pointer is a variable that contains a memory address of anther variable,5,5,5,0.01424586773,0.9857541323,0.9818219581,0.8418350816,0.8611871474,0.9974165065,0.9704615371,0.999977449,0.9734098421
974,6.1,A variable that contains the memory address of another variable that contains a specific value.,5,5,5,0.00496762991,0.9950323701,0.9936611945,0.8948135972,0.9076835447,0.9992538093,0.9914684024,0.9999945507,0.9935746207
975,6.1,a variable with a memory address as the value,5,4,4.5,0.02409261465,0.9759073853,0.9692572914,0.6674584746,0.7081461666,0.9922696493,0.9116147664,0.9999457784,0.9360666275
976,6.1,it is a type that points to something else. It is the memory address of something else,5,4,4.5,0.02973657846,0.9702634215,0.9620554689,0.2705755234,0.3598233201,0.9929965573,0.9199258948,0.9999612167,0.9542701681
977,6.1,A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory.,4,5,4.5,0.01995140314,0.9800485969,0.9745415689,0.3348064125,0.416195321,0.9946714746,0.9390761201,0.9999542455,0.9460503094
978,6.2,This operator returns the memory address of its operand.,5,5,5,0.01184344292,0.9881565571,0.9848875052,0.8144007325,0.8371094929,0.9982486154,0.9799754837,0.9999831257,0.9801033578
979,6.2,The address operator returns the memory address of its operand.,5,5,5,0.01029545069,0.9897045493,0.9868627774,0.8548108935,0.8725753205,0.9987367495,0.9855565815,0.9999885271,0.9864721847
980,6.2,Returns memory address of its operand.,5,5,5,0.009145855904,0.9908541441,0.9883296858,0.8592399359,0.8764624531,1,1,0.9999911697,0.9895880961
981,6.2,The address (&) operator returns the memory address of its operand.,5,5,5,0.0212970376,0.9787029624,0.9728245095,0.809967339,0.8332185416,0.9897051542,0.882293523,0.9999884947,0.9864339472
982,6.2,Returns the memory address of its operand.,5,5,5,0.005699396133,0.9943006039,0.9927274447,0.8814343214,0.895941273,0.9954879702,0.9484115508,0.9999815464,0.9782411644
983,6.2,returns the place in memory of that element,5,3,4,0.05306428671,0.9469357133,0.9322887978,0.3094575703,0.393948004,0.9938795723,0.9300218773,0.9999269595,0.9138770818
984,6.2,The address of the where the data is stored: &b will return the address of b.,4,5,4.5,0.03752118349,0.9624788165,0.9521221409,0.4798550308,0.5434967016,0.9919084702,0.907485213,0.9999538863,0.945626722
985,6.2,The & operator returns the address of a variable,5,5,5,0.0488973856,0.9511026144,0.9376058557,0.3291804492,0.4112577154,0.9958807174,0.9529020387,0.9999576743,0.9500932652
986,6.2,"the ampersand (&) means ""pass by reference"". When the function is called, a pointer to the variable, instead of the variable itself, will be passed into the function.",3,3,3,0.03536278009,0.9646372199,0.9548763113,0.2696579397,0.3590180061,0.9798658337,0.7697953096,0.9999498299,0.940843799
987,6.2,& returns the memory address of its operand.,5,5,5,0.01565378904,0.984346211,0.9800254194,0.8381464481,0.857949832,0.9920817405,0.9094663043,0.9999806478,0.9771815816
988,6.2,the address of the variable in memory,5,5,5,0.03945815563,0.9605418444,0.9496505217,0.5643213987,0.6176282954,0.9906844274,0.8934900763,0.9999395433,0.928714791
989,6.2,Returns the address location in memory of the item.,5,4,4.5,0.02534455061,0.9746554494,0.9676597935,0.6609839201,0.7024637979,0.994251352,0.9342726327,0.999939236,0.9283524311
990,6.2,The address operator returns the memory address of its operand.,5,5,5,0.01029545069,0.9897045493,0.9868627774,0.8548108935,0.8725753205,0.9987367495,0.9855565815,0.9999885271,0.9864721847
991,6.2,The & operator returns the memory address of the variable it precedes.,5,5,5,0.027972579,0.972027421,0.9643063712,0.6181508899,0.6648715482,0.9955560541,0.94918999,0.9999854385,0.9828303147
992,6.2,"The memory address of operand, 0x000000 or something along those lines. ",4,5,4.5,0.02550053596,0.974499464,0.9674607527,0.6260616779,0.6718144219,0.9937183451,0.9281784799,0.9999626958,0.9560141541
993,6.2,The object's memory address.,4,5,4.5,0.02897173166,0.9710282683,0.9630314303,0.7365172505,0.7687553445,0.9982868246,0.9804123493,0.9998341955,0.8044978907
994,6.2,the reference to a variable,5,4,4.5,0.0602042675,0.9397957325,0.9231780246,0.0450162515,0.1618620637,0.9893676486,0.8784346403,0.9999113079,0.8954220146
995,6.2,returns the memory address of its operand,5,5,5,0.01947277784,0.9805272222,0.9751523053,0.7226449847,0.756580402,0.9952328029,0.945494086,0.9999771033,0.9730022472
996,6.2,memory address of its operand,5,5,5,0.01813691854,0.9818630815,0.9768568913,0.817086935,0.8394670286,0.9993846893,0.992964824,0.999983013,0.9799703667
997,6.2,returns the address number of the specified variable,5,4,4.5,0.04540610313,0.9545938969,0.9420608093,0.2280083299,0.3224643809,0.9945239079,0.937388911,0.9999488986,0.939745687
998,6.2,"It returns the memory address of it's operand. That is, if applied to a normal variable, it gives the variable's memory address, just as a pointer variable might.",4,5,4.5,0.02383929491,0.9761607051,0.969580533,0.5621333122,0.6157079294,0.9884070951,0.8674521183,0.9999569368,0.9492236833
999,6.2,The & is a unary operator that returns the memory address of its operand,5,5,5,0.02813243866,0.9718675613,0.9641023867,0.6214882135,0.6678005379,0.9933696976,0.9241922073,0.9999727121,0.967824504
1000,6.2,the address of the variable it is attached to,5,3,4,0.03008896112,0.9699110389,0.9616058209,0.2459521741,0.3382127291,0.9917160752,0.9052854582,0.9999544383,0.9462776635
1001,6.2,the memory address of its operand,5,5,5,0.01202684641,0.9879731536,0.9846534783,0.8377087116,0.8575656541,0.9969598553,0.9652403993,0.9999806237,0.9771531284
1002,6.2,returns the address of what it is put in front of,5,4,4.5,0.03606492281,0.9639350772,0.9539803617,0.234568283,0.3282216994,0.9900231069,0.8859288456,0.9999044556,0.887342379
1003,6.2,returns a pointer,4,3,3.5,0.1060426235,0.8939573765,0.8646872696,-0.08122634143,0.05106572139,0.9874953543,0.8570276981,0.9999011467,0.8834408267
1004,6.3,returns a synonym for the object to which its pointer operand points.,5,5,5,0.02075469494,0.9792453051,0.9735165508,0.6427668929,0.6864756917,0.9879664295,0.8624137537,0.999988525,0.9864696338
1005,6.3,The star operator returns a synonym for the object to which its pointer operand points.,5,5,5,0.0148332715,0.9851667285,0.9810724179,0.6722872853,0.7123841544,0.9887279652,0.8711207976,0.9999881991,0.9860854451
1006,6.3,Returns synonym for the object its operand points to.,5,5,5,0.03031027317,0.9696897268,0.9613234217,0.680470109,0.7195657791,0.9904702328,0.8910410758,0.9999875429,0.9853116336
1007,6.3,"It returns a synonym, alias or nickname of the name of the object that its operand points to in memory (dereferencing the pointer).",5,5,5,0.005056083202,0.9949439168,0.9935483261,0.8602736592,0.8773696965,0.997217354,0.9681845206,0.9999943095,0.9932902606
1008,6.3,Returns an alias/nickname for the object to which the pointer operand points.,5,5,5,0.02592629194,0.9740737081,0.9669174787,0.5506327152,0.6056144732,0.986656869,0.8474408473,0.9999888476,0.9868501216
1009,6.3,the * operator returns the value in the memory address the element points to.,4,4,4,0.0218526721,0.9781473279,0.9721155076,0.4695034325,0.5344116599,0.9848931756,0.8272755979,0.9999578941,0.950352439
1010,6.3,The * returns the value,4,4,4,0.07750886679,0.9224911332,0.9010969735,0.05241277441,0.1683535945,0.9936611276,0.9275242823,0.9999477447,0.9383851362
1011,6.3,The * operator returns the dereferenced pointer variable (ie: it returns the value of whatever variable the pointer is pointing to),5,5,5,0.02518880367,0.9748111963,0.96785853,0.3169389367,0.4005139974,0.9978665829,0.9756075012,0.9999680562,0.962334706
1012,6.3,The dereferencing operator returns the dereferenced object.,4,5,4.5,0.03796541691,0.9620345831,0.9515552893,0.5299461484,0.5874589848,0.9901128078,0.8869544443,0.9999472554,0.937808203
1013,6.3,* returns the synonym for the object its operand points to.,5,5,5,0.0243319869,0.9756680131,0.9689518471,0.6844097376,0.7230233795,0.9902711275,0.8887645982,0.9999808184,0.9773827141
1014,6.3,it returns the information in the address the pointer points to.,4,4,4,0.02108436823,0.9789156318,0.9730958804,0.4045230746,0.4773818904,0.9893923461,0.8787170198,0.9999600113,0.9528488627
1015,6.3,the star operator returns the value at the memory address the pointer is pointing at.,5,4,4.5,0.02850109339,0.9714989066,0.9636319751,0.4670447409,0.5322537984,0.9881493029,0.8645046421,0.9999568259,0.9490928583
1016,6.3,The star operator returns the object at that memory location.,4,4,4,0.02818667889,0.9718133211,0.964033175,0.5603474975,0.6141406158,0.9876002236,0.8582267257,0.9999681832,0.9624844631
1017,6.3,The * operator returns the value of the object's memory address it precedes.,4,3,3.5,0.0226123333,0.9773876667,0.9711461631,0.5150468349,0.5743826577,0.9984234911,0.9819749304,0.9999748987,0.9704026973
1018,6.3,The value of the object that the operand points to,4,5,4.5,0.02249729633,0.9775027037,0.9712929529,0.3773055077,0.4534944939,0.9914982122,0.9027945132,0.9999574155,0.9497881263
1019,6.3,The value stored in the object being pointed to.,4,4,4,0.02685654163,0.9731434584,0.9657304596,0.4086112678,0.4809698779,0.9904220066,0.8904896793,0.9999798684,0.9762625869
1020,6.3,the value of the variable the pointer points to.,4,4,4,0.02579009533,0.9742099047,0.9670912686,0.3470711112,0.4269593883,0.9857682372,0.8372806451,0.9998810497,0.859744182
1021,6.3,returns synonym for the object its operand points to,5,5,5,0.03955638409,0.9604436159,0.94952518,0.5220730305,0.5805491721,0.9901443424,0.8873149958,0.9999780323,0.9740975856
1022,6.3,synonym for the object its operand points to,5,5,5,0.03933155537,0.9606684446,0.9498120663,0.5923900008,0.6422625997,0.9870429387,0.851854989,0.9999793062,0.9755996952
1023,6.3,Returns synonym for the object its operand points to,5,5,5,0.03955638409,0.9604436159,0.94952518,0.5260544419,0.5840434431,0.9901443424,0.8873149958,0.9999853861,0.9827685909
1024,6.3,"It dereferences a pointer, meaning it returns the value stored in the memory address a pointer refers to.",4,5,4.5,0.01832616329,0.9816738367,0.9766154107,0.4171136916,0.4884319985,0.994735504,0.939808202,0.9999813251,0.9779801899
1025,6.3,It is unary operator that returns the value of the variable located at the address,4,4,4,0.028218925,0.971781075,0.9639920283,0.1807837486,0.2810179028,0.9902490619,0.8885123101,0.9999806522,0.9771868157
1026,6.3,a reference to a = variable,1,3,2,0.07590663433,0.9240933657,0.9031414576,0.1762845814,0.2770692254,0.9820492892,0.7947599236,0.9999354921,0.9239379644
1027,6.3,a synonym for the object to which its pointer operand points,5,5,5,0.02494972944,0.9750502706,0.9681635941,0.5518659949,0.6066968566,0.9883309344,0.8665813324,0.9999877704,0.9855798721
1028,6.3,it returns the actual data at the address pointed to,4,3,3.5,0.03358030319,0.9664196968,0.9571507912,0.1361770034,0.2418689587,0.9899316581,0.8848832633,0.9999745209,0.9699573031
1029,6.3,will return zero or many characters placed before the operator,1,3,2,0.04608440399,0.953915596,0.9411952823,0.1456756294,0.2502053925,0.9906712466,0.8933393733,0.9999605547,0.9534896093
1030,6.4,The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.,2,4,3,0.01571160555,0.9842883945,0.9799516443,0.6589112282,0.7006447076,0.9939967666,0.9313618216,0.9999745937,0.9700431405
1031,6.4,An array can be addressed in pointer/offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.,5,4,4.5,0.01185405254,0.9881459475,0.9848739671,0.6118943691,0.659380536,0.9955982704,0.9496726712,0.9999773187,0.9732561654
1032,6.4,Element b[ n ] can be accessed by  *( bPtr + n ).,5,3,4,0.06844937801,0.931550622,0.9126570814,0.1156539693,0.2238569941,0.9818802974,0.7928277505,0.999884608,0.863939895
1033,6.4,Using either the name of the array as a pointer or using a separate pointer that points to the array.,3,3,3,0.01477789879,0.9852221012,0.9811430746,0.6527664065,0.6952517277,0.9949473474,0.9422303207,0.9999762371,0.9719808797
1034,6.4,An element b[3] can be referenced by using *( bPtr + 3) instead.,5,3,4,0.05314391851,0.9468560815,0.9321871859,0.1753212959,0.2762238014,0.9875546675,0.8577058578,0.9999104349,0.8943926653
1035,6.4,you get the memory location of the first element and the you add an offset to it to get other elements.,5,5,5,0.01812827587,0.9818717241,0.9768679194,0.4019562006,0.475129083,0.9906896597,0.8935499006,0.9999090355,0.8927426517
1036,6.4,yes *(array +offset),5,3,4,0.1353448629,0.8646551371,0.8272969647,0.2085006386,0.3053435282,0.9792487139,0.7627394486,0.9999122832,0.8965720802
1037,6.4,"The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer ""a"" which stores the address of a[0].",3,4,3.5,0.0210416913,0.9789583087,0.973150337,0.316185683,0.3998529071,0.9930420156,0.920445644,0.9999470569,0.9375741747
1038,6.4,Element b[ n ] can be accessed by  *( bPtr + n ) is an example of how an array can be addressed as pointer/offset notation.,5,4,4.5,0.0351190567,0.9648809433,0.9551873078,0.2153065503,0.3113167113,0.9787694194,0.7572594185,0.9999305455,0.918105386
1039,6.4,*(array + element),5,3,4,0.107583344,0.892416656,0.8627212762,0.345472753,0.4255565952,0.9863483054,0.8439128748,0.9998950248,0.8762223983
1040,6.4,*f[3],2,3,2.5,0.2630551457,0.7369448543,0.6643358224,0.01025335491,0.1313525368,0.9831545792,0.8073972954,0.9997152428,0.6642393345
1041,6.4,you can have a pointer to the front of the array and add to the memory location (or offset from the initial value).,5,5,5,0.01535230875,0.9846476912,0.9804101148,0.5066744685,0.5670346815,0.9961416764,0.955885723,0.9999366334,0.9252836293
1042,6.4,"The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.",2,5,3.5,0.009833455086,0.9901665449,0.987452294,0.8123720884,0.835329061,0.9978259052,0.9751424119,0.9999799123,0.9763143126
1043,6.4,With int x[10]; int *xPtr; xPtr = x; Address &x[1] is the same as xPtr + 1.,5,3,4,0.06588226557,0.9341177344,0.9159327735,0.1329366416,0.2390250672,0.9724834973,0.68538911,0.999906074,0.8892507405
1044,6.4,Takes the number of array elements and points to each at a time,1,3,2,0.0191462636,0.9808537364,0.9755689446,0.5079174638,0.5681255916,0.9957659348,0.9515896684,0.9999651552,0.9589141121
1045,6.4,The array can act as a pointer or be referenced by a pointer.  *(arrayPtr + 3) or *(array + 3),5,3,4,0.0357503891,0.9642496109,0.9543817137,0.3750011325,0.4514720676,0.9944914777,0.9370181185,0.9999470486,0.9375644098
1046,6.4,by using the *(pointer + element-index),5,3,4,0.07903921604,0.920960784,0.8991442142,0.343614608,0.4239258012,0.9920946315,0.9096136939,0.9999539357,0.9456850313
1047,6.4,using the star operator.   array: b[n] can be accessed by *(bpointer +n),5,4,4.5,0.04789406061,0.9521059394,0.9388861205,0.2063343823,0.3034423214,0.9926077635,0.9154806073,0.9999391955,0.9283046568
1048,6.4,Element A[n] can be accessed by *(APtr + n),5,3,4,0.06505560875,0.9349443913,0.916987606,0.06632393599,0.1805626738,0.9853481503,0.8324775667,0.9998876534,0.8675307489
1049,6.4,"by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)",2,4,3,0.02349382639,0.9765061736,0.9700213585,0.4784801006,0.5422899993,0.9967688814,0.9630568926,0.9999671711,0.9612910918
1050,6.4,"First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity's address plus some offset. i.e. ptrToArray = array;  nthEntity = *(ptrToArray + n);",5,5,5,0.01784271002,0.98215729,0.9772323078,0.4715573192,0.5362142459,0.9939017947,0.9302759577,0.9999720078,0.9669940769
1051,6.4,&[b3] is as bptr + 3. Array can be treated as pointer,4,3,3.5,0.04016047716,0.9598395228,0.9487543438,0.2676891387,0.3572900952,0.9846110155,0.8240495103,0.9998951926,0.8764202594
1052,6.4,a[i] = *(a+i),5,3,4,0.1090278625,0.8909721375,0.8608780387,0.05466687679,0.1703318991,0.9836840528,0.8134510507,0.9999189444,0.9044263423
1053,6.4,&b[3]  bPtr + 3,5,3,4,0.1324901581,0.8675098419,0.8309396311,0.007838936523,0.1292335314,0.9827795291,0.8031091469,0.9998807255,0.8593619283
1054,6.4,*(arrayName + index),5,3,4,0.1190078259,0.8809921741,0.8481433849,0.09497126192,0.2057048929,0.9863483054,0.8439128748,0.9998866404,0.8663363222
1055,6.4,multi-dimensional array,0,2,1,0.3499740958,0.6500259042,0.5534253217,0.4053745866,0.4781292167,0.9839176724,0.8161221483,0.9997349111,0.6874304379
1056,6.5,the number of bytes of an array during program compilation.,4,5,4.5,0.0373468399,0.9626531601,0.9523446072,0.4350266159,0.5041532099,0.9949687892,0.9424754761,0.9999457943,0.9360854322
1057,6.5,The sizeof operator returns the size of the operand.,5,3,4,0.02628046274,0.9737195373,0.966465549,0.6479071379,0.6909870086,0.9974101133,0.9703884398,0.9999138702,0.8984433058
1058,6.5,Returns size of operand in bytes.,5,5,5,0.01323050261,0.9867694974,0.9831175864,0.8034564257,0.8275042627,0.9995699186,0.9950826495,0.9999822075,0.9790206275
1059,6.5,It returns the size of an array in bytes.,4,5,4.5,0.01700270176,0.9829972982,0.9783041769,0.7121525407,0.7473717475,0.9963892621,0.9587165026,0.9999643228,0.9579325785
1060,6.5,Returns the size of the array in bytes during the program compilation.,4,5,4.5,0.02895897627,0.9710410237,0.9630477064,0.5899255276,0.6400996639,0.9939890025,0.9312730507,0.9999348203,0.9231458076
1061,6.5,it returns the size of the argument passed in,5,3,4,0.03402501345,0.9659749866,0.9565833312,0.3018479943,0.3872694879,0.9944775596,0.9368589857,0.9999137596,0.8983128279
1062,6.5,The byte size of the date stored ina variable.,4,5,4.5,0.03502219915,0.9649778008,0.9553109001,0.5418422818,0.597899582,0.9981071306,0.9783578114,0.9999818017,0.9785421915
1063,6.5,sizeof returns the size of the operand in bytes,5,5,5,0.02498829365,0.9750117064,0.9681143853,0.6701632738,0.7105200236,0.9960427829,0.9547550205,0.9999008143,0.8830489626
1064,6.5,"The amount of memory required for a specific parameter such as ints, doubles.",4,3,3.5,0.03386741877,0.9661325812,0.9567844254,0.2489225715,0.3408196874,0.9971617626,0.9675489136,0.9999743443,0.9697490715
1065,6.5,sizeof returns the size of the operand in bytes.,5,5,5,0.01133304834,0.9886669517,0.98553878,0.8118248582,0.8348487864,0.9961002841,0.9554124626,0.9999090643,0.892776632
1066,6.5,the size of the information in bits.,1,4,2.5,0.02436625957,0.9756337404,0.9689081144,0.6546963453,0.6969455313,0.9921187535,0.9098894936,0.9999189852,0.9044743989
1067,6.5,the size of the string.,3,3,3,0.03006029129,0.9699397087,0.9616424042,0.5859986544,0.6366532582,0.990513857,0.8915398546,0.9999403035,0.929611094
1068,6.5,sizeof returns the size in bytes of the respective object.,4,5,4.5,0.01898878813,0.9810112119,0.9757698869,0.6079403758,0.6559103285,0.9968122223,0.9635524328,0.9999658186,0.9596962344
1069,6.5,The sizeof operator returns the total number of bytes of its operand.,5,5,5,0.01925086975,0.9807491302,0.9754354648,0.6167873144,0.6636748113,0.9972126152,0.9681303391,0.9999631101,0.9565026161
1070,6.5,"The size of an operand in bytes. Used with variable names, type names, and constant values",5,5,5,0.0255395174,0.9744604826,0.9674110115,0.558668375,0.6126669402,0.9966916548,0.9621739206,0.9999758371,0.9715092261
1071,6.5,the size in bytes needed to store the object in memory,4,5,4.5,0.03852796555,0.9614720345,0.9508374648,0.4184815884,0.4896325281,0.995816201,0.9521643882,0.9999057259,0.888840307
1072,6.5,the size of the list object.,4,2,3,0.03121215105,0.9687878489,0.9601726056,0.5143970251,0.5738123545,0.9893222433,0.8779154974,0.999930945,0.9185763462
1073,6.5,the sizeof operator returns the size in bytes of an array parameter,3,5,4,0.03536683321,0.9646331668,0.9548711395,0.5115402341,0.5713051025,0.9969619899,0.9652648056,0.9999706135,0.9653499973
1074,6.5,the size of operand in bytes,5,5,5,0.02206003666,0.9779399633,0.9718509058,0.8005440235,0.8249482038,0.9948985726,0.9416726529,0.9999829089,0.9798476241
1075,6.5,returns the size in bytes of the specified data,4,5,4.5,0.03657758236,0.9634224176,0.9533261967,0.4686774015,0.5336866969,0.9949622257,0.9424004321,0.9999496487,0.9406301051
1076,6.5,"It returns the size of an operand in memory, which is checked at compiler-time.",5,3,4,0.02192562819,0.9780743718,0.972022414,0.46045506,0.5264703894,0.9946139269,0.9384181461,0.9999538928,0.9456344201
1077,6.5,Return size of operand in bytes,5,5,5,0.03382277489,0.9661772251,0.956841392,0.6327978373,0.6777263871,0.9992216656,0.9911008868,0.9999779446,0.9739942084
1078,6.5,the total number of bytes of an object.,4,5,4.5,0.03075540066,0.9692445993,0.9607554292,0.4622907341,0.5280814619,0.992425133,0.9133924946,0.9998815684,0.8603558275
1079,6.5,total number of bytes in the array,4,5,4.5,0.0535774827,0.9464225173,0.9316339484,0.3531618118,0.4323048691,0.993729824,0.9283097247,0.9999258548,0.9125745335
1080,6.5,it returns the size in bytes of a certain variable type,4,5,4.5,0.03004676104,0.969953239,0.9616596691,0.4568614364,0.523316459,0.9943751327,0.9356878846,0.9999725401,0.9676216819
1081,6.5,"it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type",3,5,4,0.02554249763,0.9744575024,0.9674072087,0.5166633129,0.5758013536,0.9909781232,0.8968480578,0.9999614965,0.9546000702
1082,6.6,They can be passed by value or by reference,2,3,2.5,0.07342064381,0.9265793562,0.9063136364,0.03952984884,0.1570469428,0.9838761114,0.8156469588,0.9998937635,0.8747351982
1083,6.6,"Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.",5,5,5,0.00441211462,0.9955878854,0.9943700443,0.984490335,0.9863880002,0.9969761401,0.9654265922,0.9999834873,0.9805296675
1084,6.6,-Nonconstant pointer to nonconstant data       -Nonconstant pointer to constant data        -Constant pointer to nonconstant data         -Constant pointer to constant data,5,5,5,0.05140733719,0.9485926628,0.934403102,0.8834802508,0.8977368754,0.9912249726,0.8996704194,0.9999216734,0.907644085
1085,6.6,"Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.",5,5,5,0.004411399364,0.9955886006,0.9943709569,0.9804599285,0.9828507289,0.9964328744,0.9592151449,0.9999910666,0.9894665211
1086,6.6,Pass-by-value or pass-by-reference.,2,3,2.5,0.3105668426,0.6894331574,0.6037098474,0.1860032529,0.2855987813,0.9771740681,0.7390189143,0.9999459498,0.9362687908
1087,6.6,you can pass a pointer to a pointer or pass a reference to pointer.,2,3,2.5,0.0596742034,0.9403257966,0.9238543981,0.3756754696,0.4520638971,0.9856263026,0.8356578313,0.9998614845,0.8366746745
1088,6.6,by address &bPtr or directly bPtr.,2,3,2.5,0.1030956507,0.8969043493,0.868447672,0.03036492877,0.1490033848,0.9825293495,0.80024871,0.9999591556,0.9518398128
1089,6.6,"Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. ",5,5,5,0.00441211462,0.9955878854,0.9943700443,0.984490335,0.9863880002,0.9969761401,0.9654265922,0.9999834873,0.9805296675
1090,6.6,By argument and reference.,1,3,2,0.08723199368,0.9127680063,0.8886900488,0.1567455232,0.2599208436,0.985694178,0.8364338861,0.9998149241,0.7817746796
1091,6.6,"Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.",5,5,5,0.004012048244,0.9959879518,0.9948805379,0.9833645225,0.985399935,0.9968195867,0.9636366338,0.9999863572,0.9839135481
1092,6.6,pass by value and pass by reference with reference or pointer arguments.,2,3,2.5,0.06322193146,0.9367780685,0.9193274186,0.2287163883,0.3230858058,0.9855950488,0.8353004895,0.9999075944,0.8910433709
1093,6.6,you can pass them with the pointer (*) or the memory address (&),2,3,2.5,0.0832388401,0.9167611599,0.893785401,0.06219347939,0.1769375939,0.9795012352,0.7656266593,0.999892808,0.8736085615
1094,6.6,nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const,5,5,5,0.1975556612,0.8024443388,0.7479146117,0.1486039162,0.2527753925,0.9874685259,0.8567209554,0.9996762558,0.6182691885
1095,6.6,Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data,5,5,5,0.01965498924,0.9803450108,0.9749197995,0.9382503033,0.9458056082,0.9912249726,0.8996704194,0.9999682525,0.9625661824
1096,6.6,"Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.",5,5,5,0.02920073271,0.9707992673,0.9627392199,0.9260336757,0.9350837305,0.9969761401,0.9654265922,0.9999834873,0.9805296675
1097,6.6,Pass by reference with reference arguments. function(int &)  Pass by reference with pointer arguments. function(int *),2,3,2.5,0.06983613968,0.9301638603,0.9108875428,0.1942670792,0.2928514978,0.98938734,0.8786597831,0.9998482205,0.8210348966
1098,6.6,you can pass the reference or the dereference in a function,2,2,2,0.07432967424,0.9256703258,0.9051536935,0.02715232968,0.1461838591,0.9828935624,0.8044129505,0.9999165258,0.9015745092
1099,6.6,1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data.  4. Constant pointer to constant date.,5,5,5,0.02218669653,0.9778133035,0.9716892851,0.7925639153,0.8179444915,0.9879758132,0.8625210425,0.9999613186,0.9543903288
1100,6.6,"constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data",5,5,5,0.005902349949,0.9940976501,0.9924684711,0.9794366956,0.9819526923,0.9971019494,0.9668650379,0.9999796883,0.9760501849
1101,6.6,Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data,5,5,5,0.01655173302,0.983448267,0.978879623,0.9405934811,0.9478620895,0.9912249726,0.8996704194,0.9999216734,0.907644085
1102,6.6,"Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.",2,3,2.5,0.04715466499,0.952845335,0.9398296057,0.2368474156,0.3302219716,0.9914211526,0.9019134502,0.9999685111,0.962870999
1103,6.6,There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.,5,5,5,0.02073758841,0.9792624116,0.973538379,0.8627710342,0.8795615084,0.9900487421,0.8862219473,0.9999132738,0.8977400428
1104,6.6,nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,5,5,5,0.01655173302,0.983448267,0.978879623,0.9659975171,0.9701578473,0.9912249726,0.8996704194,0.9999216734,0.907644085
1105,6.6,"pass by value, pass by reference with reference arguments, pass by reference with pointer arguments",2,3,2.5,0.07071334124,0.9292866588,0.9097682143,0.1945333779,0.2930852138,0.9888100994,0.8720598828,0.9999130322,0.897455177
1106,6.6,"you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither",5,3,4,0.0614182353,0.9385817647,0.9216289748,0.2319695204,0.3259409051,0.9884133148,0.867523232,0.999938615,0.9276201598
1107,6.6,"there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function",2,3,2.5,0.05083340406,0.9491665959,0.9351354533,0.1550997198,0.2584764103,0.9915219354,0.9030657538,0.999951013,0.942238829
1108,6.7,A pointer that points to the memory address of the beginning part of a functions.  pretty much the pointer points to the function so it can be called to execute.,5,5,5,0.02538317442,0.9746168256,0.9676105087,0.3667966127,0.4442714014,0.9961206699,0.9556455439,0.9999486777,0.939485273
1109,6.7,A function pointer is a pointer that contains the address of the  function in memory.,5,5,5,0.01989138126,0.9801086187,0.974618158,0.556563437,0.6108195491,0.997116872,0.9670356556,0.9999576116,0.9500192815
1110,6.7,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",5,5,5,0.05619716644,0.9438028336,0.9282911741,0.4390001893,0.5076406019,0.9900281445,0.8859864428,0.999918187,0.9035332722
1111,6.7,"A pointer to a function is the address where the code for the function resides. They can be passed to functions, returned from functions, stored in arrays and assigned to other pointers.",5,5,5,0.02255940437,0.9774405956,0.9712137016,0.5913369656,0.6413384072,0.9947833106,0.9403548005,0.9999457506,0.936033833
1112,6.7,It contains the address of the function in memory.,5,5,5,0.01271873713,0.9872812629,0.9837706105,0.7263513803,0.7598333064,0.9983364598,0.9809798554,0.9999695766,0.9641273998
1113,6.7,when it is dereferenced a function pointer calls its function with zero or more arguments.,4,3,3.5,0.03490453959,0.9650954604,0.9554610363,0.3209337294,0.4040200123,0.993624039,0.9271002281,0.9999285737,0.9157803331
1114,6.7,a pointer to a function,5,2,3.5,0.05707848072,0.9429215193,0.9271665976,0.1447215527,0.2493680506,0.9831205905,0.8070086849,0.999782029,0.7429877353
1115,6.7,"A pointer to a function itself, contains the address of the function and can be used to call that function",5,5,5,0.02807551622,0.9719244838,0.9641750211,0.4373504221,0.5061926899,0.9911889486,0.8992585377,0.9999414132,0.9309196054
1116,6.7,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",5,5,5,0.05619716644,0.9438028336,0.9282911741,0.4390001893,0.5076406019,0.9900281445,0.8859864428,0.999918187,0.9035332722
1117,6.7,A pointer to a function that contains the addresses of the function.,5,5,5,0.02684783936,0.9731521606,0.9657415638,0.5595761538,0.6134636488,0.9965269151,0.9602903634,0.9999097403,0.8935737307
1118,6.7,a pointer that contains the address of a function,5,5,5,0.02974611521,0.9702538848,0.9620432998,0.4250544608,0.4954011851,0.9958166443,0.9521694568,0.9999208907,0.9067212401
1119,6.7,a function pointer is a pointer to a function. It can be used in substitution for calling a function.,5,5,5,0.03535550833,0.9646444917,0.9548855903,0.3399074376,0.4206722168,0.9931891595,0.9221280182,0.9999115948,0.8957603709
1120,6.7,Points to the memory address of a function.  Kind of like breaking a branch off of a tree object and hitting other objects with it.,5,5,5,0.02144730091,0.9785526991,0.9726327702,0.38752985,0.46246785,0.9965251817,0.9602705442,0.9999629729,0.956340848
1121,6.7,"They are pointers that contain the addresses to functions, they can be passed and returned from functions, as well as stored in arrays and assigned to other function pointers.",5,5,5,0.0327168107,0.9672831893,0.9582526267,0.3231062889,0.4059267511,0.9902385454,0.8883920689,0.9998984574,0.8802698468
1122,6.7,Pointer variables that point to function addresses.,5,5,5,0.06569075584,0.9343092442,0.9161771443,0.4204865396,0.4913921661,0.9958376168,0.9524092473,0.9999389744,0.9280440157
1123,6.7,Contains the address of the function in memory.,5,5,5,0.01324629784,0.9867537022,0.9830974314,0.7182990909,0.7527662444,0.9973829209,0.9700775347,0.9999711721,0.9660086901
1124,6.7,"a pointer that points to a function itself, which allows passing a function as a parameter to another function.",5,3,4,0.03861957788,0.9613804221,0.9507205654,0.3267756402,0.4091471437,0.9914180034,0.901877444,0.9999090022,0.8927033442
1125,6.7,pointers that contain the addresses of functions.,5,5,5,0.04862034321,0.9513796568,0.9379593679,0.4965173006,0.5581202808,0.9929939231,0.9198957756,0.9999198289,0.9054693153
1126,6.7,is a pointer that contains the address of a function,5,5,5,0.03126072884,0.9687392712,0.9601106194,0.4127257466,0.484580935,0.9954829642,0.9483543138,0.9999109516,0.8950018938
1127,6.7,a pointer that contains the address of the function definition,4,5,4.5,0.02323442698,0.976765573,0.9703523578,0.4738386869,0.5382164798,0.997005381,0.9657609193,0.9999383231,0.9272760133
1128,6.7,"A function pointer contains the memory address of a function. Using a function pointer, a function can be passed to or returned by another function. Function pointers can also be stored in arrays.",5,5,5,0.03322601318,0.9667739868,0.9576028731,0.4770509303,0.5410356932,0.9929284729,0.9191474487,0.9999420179,0.9316326383
1129,6.7,Function pointer is a pointer to a function. function pointer contains address of functions,5,5,5,0.05302035809,0.9469796419,0.9323448517,0.3975346684,0.4712485417,0.9949260317,0.941986607,0.9999239179,0.9102907118
1130,6.7,a pointer that contains the address of a function in memory.,5,5,5,0.0187163353,0.9812836647,0.9761175427,0.5977707505,0.6469849947,0.9966020927,0.9611499084,0.9999409685,0.9303952598
1131,6.7,it contains the address of the function in memory,5,5,5,0.01582479477,0.9841752052,0.9798072122,0.6416220665,0.6854709391,0.9964950831,0.9599264109,0.9999669224,0.9609977452
1132,6.7,it is a pointer that points to the address of a function.,5,5,5,0.03195500374,0.9680449963,0.9592247093,0.4214147031,0.4922067654,0.9947525654,0.9400032735,0.9999255053,0.9121623682
1133,6.7,"When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.",4,4,4,0.02733296156,0.9726670384,0.9651225371,0.3813659847,0.4570581565,0.9855472529,0.8347540139,0.9999241788,0.9105982667
1134,7.1,"Consists of sequence of nodes, each containing a number of data fields and one or two links called pointers that point to the next or previous nodes. ",4,5,4.5,0.03227603436,0.9677239656,0.958815067,0.2415651977,0.3343625156,0.9883009674,0.866238704,0.9998912581,0.871781058
1135,7.1,A linked list is a list in which each item in the list points to the next item in the list.,4,5,4.5,0.05226230621,0.9477376938,0.9333121426,0.1809762865,0.281186883,0.9909842352,0.89691794,0.9998363005,0.806979906
1136,7.1,"A linked list is a chain of structs or records called nodes and you have the ability to add, delete, or retrieve items. ",4,5,4.5,0.02920514345,0.9707948565,0.9627335917,0.2740750015,0.362894624,0.9924707038,0.9139135297,0.9999495569,0.9405218954
1137,7.1,"A list of elements, or nodes, that are linked to one another such that each element points to the next element.",4,5,4.5,0.0250300765,0.9749699235,0.9680610694,0.3876659274,0.4625872778,0.9874940928,0.8570132748,0.9998887893,0.8688700842
1138,7.1,"A sequence of nodes, each containing data fields (specified by programmer) and pointer(s) which can point to the next or previous nodes.",4,5,4.5,0.03439468145,0.9656053185,0.9561116265,0.2448949665,0.3372848748,0.9869550122,0.8508496786,0.999914468,0.8991482228
1139,7.1,a list of nodes where each node contains a data member and also a pointer to the next node.,4,5,4.5,0.03280478716,0.9671952128,0.9581403668,0.2052932084,0.302528539,0.9965310429,0.9603375587,0.9999026622,0.8852278458
1140,7.1,A list of items linked together.  Each item is linked to its successor.,4,5,4.5,0.03316855431,0.9668314457,0.9576761919,0.3103875816,0.3947642249,0.9964572142,0.9594934357,0.9999238997,0.9102692175
1141,7.1,A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.,4,5,4.5,0.02567851543,0.9743214846,0.967233647,0.209834516,0.3065142008,0.9920619264,0.9092397598,0.9999461312,0.9364826743
1142,7.1,"one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes. ",4,5,4.5,0.02882421017,0.9711757898,0.963219671,0.3429359198,0.4233301529,0.9877675841,0.8601402472,0.9999686453,0.9630293459
1143,7.1,"A data structure in a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.",4,5,4.5,0.03958499432,0.9604150057,0.9494886727,0.2283886671,0.3227981825,0.9870245904,0.8516452027,0.9999723909,0.9674457323
1144,7.1,Information in memory linked to the next piece of information and can only be linked forwards and not backwards.,2,5,3.5,0.03642785549,0.9635721445,0.9535172516,0.2136821747,0.3098910841,0.9969804882,0.965476307,0.9999457355,0.9360160241
1145,7.1,"A linked list is a data structure that is not necessarily in the same contiguous memory space (such as arrays). It holds the data type and points to the next data item in the list, or in a doubly linked list also to the previous item.",5,5,5,0.03193366528,0.9680663347,0.9592519376,0.2999550998,0.3856081961,0.9850802763,0.8294148202,0.9999425704,0.9322840681
1146,7.1,A linked list is a data structure containing one or more data elements with a pointer to the next node.,4,5,4.5,0.03035968542,0.9696403146,0.9612603707,0.3092780709,0.393790467,0.9946189365,0.9384754236,0.9999237188,0.9100559315
1147,7.1,"A series of ""Nodes"" structures with a value and a pointer that point to a similar ""Node"". Not quite an array, but still can carry a list of values. ",4,5,4.5,0.02889102697,0.971108973,0.9631344113,0.3066132069,0.391451659,0.9953739711,0.9471081376,0.9998862928,0.8659263996
1148,7.1,A data type that contains a pointer to at least the next  element in a list.,4,5,4.5,0.03235065937,0.9676493406,0.9587198439,0.3204622865,0.4036062522,0.995048059,0.9433818107,0.9999178987,0.9031933633
1149,7.1,Each component contains a Node - a data item and a pointer to the next item in the list,4,5,4.5,0.04257130623,0.9574286938,0.9456780728,0.1629475951,0.265364069,0.9896933664,0.882158746,0.99986205,0.8373414802
1150,7.1,"A linked list is a chain of structs or records called nodes.  Each node has at least two members, one of which points to the next item or node in the list.",4,5,4.5,0.03163552284,0.9683644772,0.959632374,0.2785645127,0.3668348269,0.9900961819,0.8867643515,0.9999220084,0.9080391589
1151,7.1,"An array based list that uses an implicit ordering scheme, often using pointers.",1,4,2.5,0.03366142511,0.9663385749,0.9570472779,0.3641773164,0.4419725857,0.9947015657,0.9394201676,0.9999069967,0.8903387177
1152,7.1,a series of structures containing data items and a pointer that links the structure to the next structure.,4,5,4.5,0.03368330002,0.9663167,0.957019365,0.2758228183,0.3644285889,0.9971046486,0.9668958986,0.9999592786,0.9519848788
1153,7.1,"A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list (and the previous object in the case of a doubly linked list)",4,5,4.5,0.03831928968,0.9616807103,0.9511037397,0.2050029486,0.3022737936,0.9879535426,0.8622664106,0.9999235221,0.9098239541
1154,7.1,A link list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together,4,4,4,0.03285652399,0.967143476,0.9580743495,0.2482681423,0.34024533,0.9927945419,0.9176161438,0.9999460985,0.9364441053
1155,7.1,its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element,4,5,4.5,0.03672415018,0.9632758498,0.953139173,0.1725583225,0.2737988882,0.9945777468,0.9380044794,0.9998611059,0.8362282391
1156,7.1,linear collection of self-referential nodes connected by pointers.,4,4,4,0.05147999525,0.9485200047,0.9343103886,0.3434791863,0.4238069488,0.9979915678,0.9770365201,0.9999660116,0.9599238625
1157,7.1,the items of a data structure are linked to each other using pointers,4,5,4.5,0.03742104769,0.9625789523,0.9522499164,0.1443486363,0.2490407619,0.9959522594,0.9537200166,0.9999001593,0.8822765762
1158,7.1,A list of objects where each object contains a link to the next item in the list,4,5,4.5,0.04222804308,0.9577719569,0.9461160841,0.1607713848,0.2634541261,0.9964346229,0.9592351366,0.9998968886,0.8784200907
1159,7.1,"A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.  ",4,5,4.5,0.02739936113,0.9726006389,0.9650378099,0.3575243056,0.4361335955,0.9838115736,0.8149090638,0.9999682402,0.9625515936
1160,7.2,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be.,5,5,5,0.03303992748,0.9669600725,0.9578403226,0.4444994926,0.512467045,0.994138753,0.9329852282,0.999919445,0.9050166174
1161,7.2,"Unlike arrays, linked lists can insert and delete without shifting data and change in size easily.",5,5,5,0.03163230419,0.9683676958,0.959636481,0.4362769723,0.5052505806,0.9903722175,0.8899204139,0.9999536458,0.9453432278
1162,7.2,"Array size is fixed,but Linked is not fixed.",5,5,5,0.03059005737,0.9694099426,0.9609664109,0.3129094541,0.396977537,0.9907032484,0.8937052678,0.9999430438,0.9328422917
1163,7.2,You can insert into and delete items from a pointer-based linked list without shifting data.,5,4,4.5,0.03799426556,0.9620057344,0.9515184777,0.4455671012,0.5134040278,0.9970144405,0.9658645016,0.9999426865,0.9324209963
1164,7.2,Arrays must be of a defined size... elements can be added to a linked list w/o defining any size.,5,5,5,0.02063089609,0.9793691039,0.9736745208,0.4677258134,0.5328515391,0.9959867861,0.9541147799,0.9999313557,0.9190607015
1165,7.2,"The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk, allowing the list of items to be traversed in a different order. A linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type. Linked lists permit insertion and removal of nodes at any point in the list in constant time",3,5,4,0.02066904306,0.9793309569,0.9736258444,0.5453038812,0.6009376418,0.97565876,0.7216935864,0.9998982375,0.8800105536
1166,7.2,You can expand when you need it.  You do not have to predetermine the size.,5,5,5,0.0493748188,0.9506251812,0.9369966404,0.2558532953,0.3469024113,0.9902269356,0.8882593289,0.9999105366,0.894512569
1167,7.2,Linked lists are able to grow and shrink in size as needed,5,5,5,0.0242023468,0.9757976532,0.9691172708,0.3237187862,0.4064643071,0.9952165075,0.9453077716,0.9999518328,0.94320546
1168,7.2,Linked list is able to grow in size as needed. Does not require the shifting of items during insertions and deletions,5,5,5,0.02211368084,0.9778863192,0.9717824547,0.4110968411,0.4831513321,0.9891670257,0.8761408111,0.9999155091,0.9003757046
1169,7.2,"A linked list is not fixed in size, and does not require the shifting of items during insertions and deletions.",5,5,5,0.02851384878,0.9714861512,0.963615699,0.4638942182,0.5294887538,0.9827104637,0.8023194859,0.9999433591,0.9332139733
1170,7.2,There is no limit as to how many you create where an array can only hold a given amount of information.,3,3,3,0.03335398436,0.9666460156,0.957439579,0.2641649544,0.354197108,0.9915932468,0.9038810951,0.9999512706,0.9425425603
1171,7.2,Linked lists have constant time insertion and deletion,4,3,3.5,0.05010521412,0.9498947859,0.9360646398,0.3749230802,0.4514035653,0.995888979,0.9529964983,0.9998345515,0.8049176594
1172,7.2,"Linked lists can be grown dynamically, items don't require shifting, and they have a greater awesome factor than that of arrays.",5,5,5,0.02109193802,0.978908062,0.9730862211,0.3986038864,0.4721869368,0.9888254293,0.8722351572,0.9999200245,0.90569995
1173,7.2,Linked lists have an indefinite size. They can be added to and taken away from very easily with little difficulty in the shifting of data.,5,5,5,0.02146470547,0.9785352945,0.9726105616,0.4692107439,0.5341547828,0.9970172904,0.9658970858,0.9999108236,0.8948509762
1174,7.2,"Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.",5,5,5,0.03310108185,0.9668989182,0.9577622883,0.2226698548,0.3177790881,0.9870931299,0.8524288514,0.9999129039,0.897303865
1175,7.2,"They grow as needed, while arrays are of fixed size.",5,5,5,0.02216559649,0.9778344035,0.9717162092,0.2684741914,0.3579790939,0.9905930974,0.8924458516,0.9999508549,0.9420524096
1176,7.2,Does not have a fixed size. Linked list is able to grow as needed. The time to access an array bases list takes a contant amount of time where as an linked-base like depends on 'i',5,5,5,0.01940482855,0.9805951715,0.9752390101,0.4272399247,0.4973192494,0.9886794888,0.8705665411,0.9999337441,0.9218768775
1177,7.2,Linked lists can grow and shrink as you need them to.  Arrays have a fixed size.,5,5,5,0.01969403028,0.9803059697,0.9748699822,0.4450774491,0.5129742864,0.9949472365,0.9422290525,0.9999371318,0.9258713152
1178,7.2,more memory can be allocated on the fly for more items,4,5,4.5,0.05153954029,0.9484604597,0.9342344079,0.1499280483,0.2539375121,0.9948912947,0.9415894407,0.9999531958,0.9448125506
1179,7.2,"A linked list may be increased in size as needed, while an array's size is set when it is created",5,5,5,0.02736902237,0.9726309776,0.9650765227,0.3533321321,0.43245435,0.9885088319,0.8686153298,0.999971399,0.9662761915
1180,7.2,"Array has a fixed size, but linked list is able to grow in size as needed",5,5,5,0.02440351248,0.9755964875,0.9688605789,0.3609456718,0.4391363448,0.9888519837,0.8725387683,0.9999291681,0.9164811997
1181,7.2,its resizeable,5,5,5,0.1849181652,0.8150818348,0.7640403358,0.0426969789,0.1598265627,0.9948836501,0.9415020359,0.9996398229,0.5753107351
1182,7.2,Linked lists do not have a set size and can grow or shrink as needed.,5,5,5,0.02652132511,0.9734786749,0.9661582032,0.4028357565,0.475901022,0.9951525141,0.9445761008,0.999949312,0.9402331951
1183,7.2,linked lists are abe to grow as needed to a new size,5,5,5,0.03272169828,0.9672783017,0.95824639,0.3703856766,0.44742133,0.9914447019,0.9021827014,0.9999112242,0.8953233503
1184,7.2,"The size is not fixed, easier sorting because of no shifting, easier to insert items into the list",5,5,5,0.03435713053,0.9656428695,0.9561595424,0.2664390802,0.3561929861,0.9870804385,0.8522837438,0.999932393,0.920283713
1185,7.2,The size of array is restricted to declaration. Insertion/Deletion of values in middle of array is not possible.,5,5,5,0.0233399868,0.9766600132,0.9702176612,0.3936700821,0.4678568018,0.9932386423,0.9226937815,0.9999090428,0.8927512745
1186,7.3,Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node.,5,5,5,0.01781404018,0.9821859598,0.9772688911,0.3696914613,0.4468120545,0.9937954813,0.9290604195,0.9999458369,0.9361356641
1187,7.3,"Arrays require less memory than linked lists and allow direct access to a specified item. Also, insertion and deletion in arrays does not require a list traversal.",4,5,4.5,0.0125425458,0.9874574542,0.9839954345,0.6598621011,0.7014792376,0.987816847,0.8607034966,0.9999611205,0.9541567167
1188,7.3,"Access to a particular element is very fast, because its location in memory can be determined mathematically and accessed directly.",5,5,5,0.01770138741,0.9822986126,0.9774126386,0.4759974182,0.5401110823,0.9949535679,0.942301443,0.9999833927,0.9804180899
1189,7.3,Arrays are good for random access and good for sequential access which are both in constant time. Where linked lists are linear for random access. Arrays are faster in this case.,5,5,5,0.02501022816,0.9749897718,0.9680863963,0.4504315853,0.5176733241,0.975884066,0.7242696302,0.9999543479,0.9461710755
1190,7.3,"An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.",5,5,5,0.01604765654,0.9839523435,0.9795228358,0.5819603205,0.6331090295,0.9898839429,0.8843377097,0.9999814315,0.9781056073
1191,7.3,"On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5,5,5,0.01299250126,0.9870074987,0.9834212813,0.5959920883,0.6454239584,0.9830734868,0.8064701227,0.9999720678,0.9670647543
1192,7.3,You have to keep up with the head of the list.,1,3,2,0.03620702028,0.9637929797,0.9537990422,0.1507909,0.2546947907,0.9852583708,0.8314510699,0.9998972745,0.8788750843
1193,7.3,Arrays are easier to implement and require less memory,3,4,3.5,0.03514736891,0.9648526311,0.9551511808,0.29164204,0.3783122701,0.9919209512,0.907627914,0.9999789946,0.9752322761
1194,7.3,Linked list has an increase complexity of the implementation. The linked list has an array that keeps growing which leads to a increase in memory.,2,3,2.5,0.01778066158,0.9822193384,0.977311483,0.5310711861,0.5884463699,0.989054118,0.874849878,0.9999884046,0.9863277627
1195,7.3,You don't have to iterate through the entire list to access elements.,5,4,4.5,0.03152507544,0.9684749246,0.9597733073,0.4617223442,0.5275826166,0.9919526588,0.9079904444,0.9999874519,0.985204379
1196,7.3,you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.,2,4,3,0.03035032749,0.9696496725,0.9612723116,0.2636094689,0.3537095883,0.9857617663,0.8372066597,0.9999333022,0.9213557902
1197,7.3,Take up less memory and are contiguously stored,4,4,4,0.05485731363,0.9451426864,0.9300008559,0.09342865646,0.2043510309,0.9886754474,0.8705203337,0.9999516196,0.9429541336
1198,7.3,"Arrays, being fixed, are less error prone.",1,3,2,0.03001213074,0.9699878693,0.9617038582,0.3480888605,0.4278526122,0.9933026769,0.9234259234,0.9999095895,0.8933958393
1199,7.3,"Arrays have a set list of values. Meaning you can pick a spot in the array such as a[7] picks the 8th spot in the array. With linked lists you have to keep track with pointers if you want to take specific nodes out, otherwise you must traverse the entire list. ",5,5,5,0.01538896561,0.9846110344,0.9803633399,0.475446105,0.5396272243,0.9878442122,0.8610163773,0.9999662022,0.9601485471
1200,7.3,"direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted. ( like getting the last element without a pointer directly to the end of the list. )",5,4,4.5,0.01221269369,0.9877873063,0.984416333,0.6529201865,0.6953866921,0.9829745007,0.8053383618,0.9999761549,0.971883967
1201,7.3,Array items are accessed directly with equal access time,5,5,5,0.04687833786,0.9531216621,0.9401822051,0.4015733004,0.474793032,0.9939860464,0.9312392529,0.9999818575,0.9786079772
1202,7.3,Array-bases implementations require less memory than a pointer-bases one.,3,4,3.5,0.05970287323,0.9402971268,0.9238178148,0.2902937829,0.3771289773,0.9889225932,0.8733460843,0.9999639008,0.9574349691
1203,7.3,You can access specific elements quickly in an array.  In a linked list you must traverse the list to get access the same element.,5,5,5,0.01540714502,0.984592855,0.9803401426,0.620211184,0.6666797577,0.9913620217,0.9012373744,0.9999838682,0.9809787501
1204,7.3,link lists only allow sequential access where arrays allow random access,5,4,4.5,0.06304109097,0.936958909,0.9195581751,0.3556660116,0.4345026707,0.9918168347,0.906437495,0.9999554547,0.9474760702
1205,7.3,"Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects",5,5,5,0.02048093081,0.9795190692,0.9738658798,0.488394767,0.5509915694,0.9962167154,0.9567436839,0.9999852176,0.9825698743
1206,7.3,Array based implementation requires less memory than lined lists based implementation,3,4,3.5,0.05105322599,0.948946774,0.9348549557,0.3936372995,0.4678280304,0.9920149317,0.9087024434,0.9999604653,0.9533841727
1207,7.3,Array-based implementations require less memory than a pointer-based ones,3,4,3.5,0.08357584476,0.9164241552,0.8933553756,0.2586859763,0.3493885032,0.9898570545,0.88403028,0.9999681327,0.9624249302
1208,7.3,"You can go up and down an array , but you can only go one direction while traversing a linked list.",1,5,3,0.03246825933,0.9675317407,0.9585697838,0.4101445973,0.4823155989,0.9913782118,0.901422485,0.999955967,0.9480801347
1209,7.3,"arrays allow for the random access of any item cotained a any time, linked lists must be gone through toget to the desired item",5,5,5,0.0215331912,0.9784668088,0.9725231723,0.3871565461,0.4621402212,0.9850445817,0.8290067053,0.9999623173,0.9555678946
1210,7.3,"In arrays you have direct access to each element, but in linked lists you have to traverse the list up to the element that you need.",5,5,5,0.02008634806,0.9799136519,0.9743693761,0.5266708732,0.5845844516,0.9903367875,0.8895153237,0.9999534287,0.9450872581
1211,7.3,"Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5,5,5,0.01371747255,0.9862825274,0.9824962019,0.6208223701,0.6672161628,0.9772020068,0.7393383516,0.9999728167,0.9679478569
1212,7.4,They are passed by reference because you want the function to change the pointer,4,5,4.5,0.04551047087,0.9544895291,0.9419276337,0.1264968961,0.2333732485,0.99416182,0.9332489665,0.999965018,0.9587522706
1213,7.4,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.,5,5,5,0.1063662767,0.8936337233,0.864274281,0.4697573185,0.534634482,0.9906986916,0.8936531665,0.9996999481,0.6462050597
1214,7.4,- A function with access to a linked list's head pointer has access to the entire list.        - Pass the head ponter to a function as a reference argument.,5,5,5,0.1150458455,0.8849541545,0.8531989594,0.4538654387,0.5206870328,0.9812676548,0.7858230798,0.9997617538,0.7190809329
1215,7.4,By using a node.,2,3,2.5,0.1087369919,0.8912630081,0.861249196,0.5550633073,0.6095029659,0.9982053175,0.9794804351,0.9998877638,0.8676609488
1216,7.4,Pass-by-reference,5,5,5,0.7836854905,0.2163145095,0,0.2701185346,0.3594222455,0.980687516,0.7791900424,0.9991519044,0
1217,7.4,you send a pointer to an object of the LinkedList class,2,3,2.5,0.1598259211,0.8401740789,0.7960585936,0.03823176399,0.1559076835,0.9916039687,0.9040036844,0.999681061,0.6239350657
1218,7.4,Passed as a pointer to the head.,5,3,4,0.1272945404,0.8727054596,0.8375693541,0.3031600714,0.3884210275,0.9904732297,0.8910753409,0.9997055869,0.6528539388
1219,7.4,Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list,5,4,4.5,0.1515877247,0.8484122753,0.8065707142,0.06902441382,0.1829327381,0.9872266481,0.8539554366,0.9996345705,0.5691175376
1220,7.4,You have to pass the head pointer to a function since it has access to the entire list.,5,3,4,0.1386637688,0.8613362312,0.8230619675,0.2520034909,0.3435236448,0.9904192305,0.8904579393,0.9996926183,0.637562443
1221,7.4,You pass the head pointer to a function as a reference argument.,5,5,5,0.1138997674,0.8861002326,0.8546613804,0.5055269003,0.5660275225,0.9937103463,0.928087026,0.9997771743,0.7372635333
1222,7.4,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
1223,7.4,passes a pointer to a linked list object,2,3,2.5,0.1646798253,0.8353201747,0.7898649046,0.03112594783,0.1496712903,0.9923211057,0.9122030955,0.9997662393,0.7243698746
1224,7.4,"The linked list object contains the head, through which the other elements are accessible.",4,3,3.5,0.1445217133,0.8554782867,0.8155871009,0.2992108166,0.3849549787,0.986392944,0.8444232524,0.9997682343,0.7267221954
1225,7.4,By the head of the list. It takes the head address and traverses from there on in.,5,3,4,0.1297116876,0.8702883124,0.8344850209,0.4572168589,0.5236283942,0.9861610093,0.8417714181,0.9996914767,0.6362163887
1226,7.4,as a pointer node.,3,3,3,0.1237344146,0.8762655854,0.8421121533,0.3663521409,0.4438813123,0.9939124873,0.9303982118,0.9998202201,0.7880192833
1227,7.4,A method with access to a linked list's head pointer as access to the entire list,5,3,4,0.1547974348,0.8452025652,0.8024750532,0.1382240057,0.2436655026,0.9878205384,0.860745702,0.9997442773,0.6984742659
1228,7.4,A function with access to a linked list's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument,5,5,5,0.129157424,0.870842576,0.8351922735,0.3326101005,0.414267736,0.9839966934,0.8170256371,0.9997525422,0.7082194444
1229,7.4,the head pointer is passed to a function as a reference argument.,5,5,5,0.1129870415,0.8870129585,0.8558260388,0.4806495905,0.544194044,0.9915819214,0.903751605,0.999795196,0.758513145
1230,7.4,the pointer to the first element is passed to a function,5,3,4,0.1662698984,0.8337301016,0.7878359362,-0.006185501814,0.1169250353,0.9902535376,0.8885634834,0.9997273847,0.6785559464
1231,7.4,"linked lists are passed by reference, specificly the Head pointer",5,5,5,0.1116963029,0.8883036971,0.8574730498,0.4225713015,0.4932218496,0.9912617128,0.9000904896,0.9998088743,0.7746413285
1232,7.4,Pass the head pointer to a function as a reference argument,5,5,5,0.13525033,0.86474967,0.8274175908,0.3243488967,0.4070173213,0.9921629852,0.9103952184,0.9997846985,0.7461353029
1233,7.4,by refrenece,5,5,5,0.1955657005,0.8044342995,0.7504538455,0.3627997041,0.4407635294,0.9872516307,0.8542410764,0.9994828489,0.3902207866
1234,7.4,By passing the head pointer and going through the list as needed inside the function.,5,3,4,0.1405156851,0.8594843149,0.8206988814,0.3558013737,0.4346214707,0.9898074917,0.8834636015,0.9996069356,0.5365329455
1235,7.4,linked lists are passed by using pointers,3,3,3,0.1379511952,0.8620488048,0.8239712271,0.1700202525,0.2715713604,0.9954750282,0.9482635777,0.9997764095,0.7363616897
1236,7.4,the head object is passed to the function,4,3,3.5,0.1738820076,0.8261179924,0.7781227167,-0.04067757353,0.08665319677,0.9900387539,0.8861077468,0.9997523995,0.7080512456
1237,7.4,"Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. ",0,3,1.5,0.1465339065,0.8534660935,0.8130194979,0.2379539311,0.3311931009,0.9881329759,0.8643179671,0.9996994308,0.6455951333
1238,7.5,They are passed by reference because you want the function to change the pointer,0,1,0.5,0.04551047087,0.9544895291,0.9419276337,0.1264968961,0.2333732485,0.99416182,0.9332489665,0.999965018,0.9587522706
1239,7.5,"In a circular linked list, every node has a successor which means that the last node's successor is the head or first node.",5,5,5,0.01874911785,0.9812508821,0.9760757113,0.4476060569,0.5151935096,0.9931041227,0.9211557466,0.9999774758,0.9734413896
1240,7.5,A circular linked list is a linked list that links items in a continuous circle. This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required.,5,4,4.5,0.01358443499,0.986415565,0.9826659608,0.6919541359,0.7296446927,0.9929587127,0.9194931971,0.9999779686,0.9740225529
1241,7.5,"In a circular linked list, the last node points to the first node.",5,5,5,0.009234011173,0.9907659888,0.9882171977,0.6810728312,0.720094756,0.9953151627,0.9464357493,0.9999797027,0.9760672076
1242,7.5,"On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.",5,5,5,0.009368777275,0.9906312227,0.9880452332,0.7844660282,0.810837411,0.9866314083,0.8471497421,0.9999687951,0.9632059223
1243,7.5,the circular linked list's last node points to the begining of the list while a standard linked list points to NULL,5,5,5,0.008859992027,0.991140008,0.9886944545,0.7491850257,0.7798731703,0.9956616771,0.9503976347,0.9999799225,0.9763263353
1244,7.5,The last item in the list points to the head,5,5,5,0.01214432716,0.9878556728,0.9845035702,0.7138658166,0.7488753978,0.9988389589,0.9867251959,0.9999758031,0.9714691012
1245,7.5,"In a circular linked list, the last node points back to the first node, there is no NULL",5,5,5,0.01661098003,0.98338902,0.9788040225,0.5455303788,0.6011364267,0.9922787694,0.9117190419,0.9999696691,0.9642364557
1246,7.5,"Circular linked lists are most useful for describing naturally circular structures, and have the advantage of regular structure and being able to traverse the list starting at any point.",2,3,2.5,0.01884329319,0.9811567068,0.9759555416,0.4949545264,0.5567487178,0.9907635852,0.8943951304,0.9999475574,0.9381642588
1247,7.5,A circular linked list has the last node point back to the head of the linked list.,5,5,5,0.006233334541,0.9937666655,0.9920461275,0.8465471268,0.8653226563,0.9964532086,0.9594476368,0.999975927,0.9716152692
1248,7.5,Basic linked list points to a NULL at the end and circular points to the head at the end.,5,5,5,0.01856678724,0.9814332128,0.9763083693,0.6447253823,0.6881945527,0.9970140521,0.9658600611,0.9999742311,0.969615612
1249,7.5,in a circular linked list the the last item points to the first item.,5,5,5,0.008850991726,0.9911490083,0.988705939,0.7394797802,0.7713553977,0.9965749569,0.9608396502,0.9999868585,0.9845046865
1250,7.5,"The circular linked list's tail points to the head, whereas the basic linked list's tail points to a NULL.",5,5,5,0.01015430689,0.9898456931,0.9870428801,0.7115533352,0.7468458571,0.9941688352,0.9333291749,0.9999552245,0.9472046839
1251,7.5,a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning,5,5,5,0.01959604025,0.9804039598,0.9749950198,0.5563446283,0.6106275125,0.9955330331,0.9489267788,0.9999263668,0.9131781873
1252,7.5,"how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.",5,5,5,0.00962382555,0.9903761744,0.9877197859,0.790543437,0.8161712262,0.9885151376,0.8686874261,0.999963171,0.9565744813
1253,7.5,"No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.",5,5,5,0.01201933622,0.9879806638,0.9846630615,0.5394510627,0.5958009375,0.9950183099,0.9430416726,0.9999507738,0.9419568061
1254,7.5,"The difference between a circular linked list and a basic linked list is that a circular linked list, the last node references the first node. Every node in a circular linked list has a successor and no node in a circular linked list contains NULL.",5,5,5,0.01136434078,0.9886356592,0.9854988501,0.7084012628,0.7440794524,0.9906469452,0.8930615227,0.9999684441,0.9627920228
1255,7.5,No node in a circular linked list contains NULL.,3,4,3.5,0.02796238661,0.9720376134,0.9643193769,0.5625038147,0.6160330996,0.9981991048,0.979409402,0.9999615511,0.9546644346
1256,7.5,in a circular linked list the last element points to the head of the list,5,5,5,0.002309083939,0.9976909161,0.9970535579,0.9436784387,0.9505695911,0.9976005734,0.9725660727,0.9999941398,0.9930901811
1257,7.5,"In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list",5,5,5,0.004710316658,0.9952896833,0.9939895318,0.7733911276,0.8011175656,0.9946090085,0.9383619114,0.9999806116,0.9771389542
1258,7.5,"In circular linked list each node has successor, no node contains NULL, while in basic linked list last node contain NULL.",3,3,3,0.02425938845,0.9757406116,0.9690444844,0.4871408641,0.5498910862,0.9906596907,0.893207249,0.9999609435,0.9539480282
1259,7.5,"in a circular linked lists, the last element points to the first",5,5,5,0.009468734264,0.9905312657,0.9879176858,0.8105313778,0.8337135682,0.9942722576,0.9345116586,0.9999783359,0.9744556081
1260,7.5,"A circular linked list does not have a last element. Instead, it's last item points to the head of the list.",5,5,5,0.01067888737,0.9893211126,0.9863735037,0.8389758468,0.8586777506,0.994639391,0.9387092911,0.9999593406,0.9520579957
1261,7.5,"in a circular linked list, the last node contains a pointer that goes back to the first node; in a basic linked list, the last node contains a null pointer ",5,5,5,0.01557588577,0.9844241142,0.9801248256,0.5706598759,0.6231912363,0.9850464414,0.8290279679,0.9999768976,0.9727597059
1262,7.5,"in a circular linked list, the last object is linked back to the first object.",5,5,5,0.01558232307,0.9844176769,0.9801166115,0.6248641014,0.6707633733,0.9932208267,0.9224900861,0.9999744779,0.9699065745
1263,7.5,"In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move.  In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.  ",2,5,3.5,0.02424371243,0.9757562876,0.9690644874,0.5333482623,0.5904448374,0.9866961068,0.8478894745,0.9999159529,0.9008990355
1264,7.6,they can traverse in both directions,3,4,3.5,0.04445964098,0.955540359,0.9432685158,0.1658666283,0.2679259476,0.9809656895,0.7823705492,0.999976468,0.9722531819
1265,7.6,In a doubly linked list you can delete a node without having to traverse the list.,5,4,4.5,0.02177959681,0.9782204032,0.9722087533,0.3938375413,0.4680037718,0.9908930999,0.8958759412,0.9999671467,0.9612622944
1266,7.6,A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer.,5,4,4.5,0.02713906765,0.9728609324,0.9653699502,0.326725632,0.4091032541,0.9917975028,0.9062164635,0.999957702,0.950125959
1267,7.6,A doubly linked list allows you to traverse the list in either direction. Each node points to its successor as well as to its predecessor.,3,4,3.5,0.02515333891,0.9748466611,0.9679037838,0.2566938698,0.3476401384,0.9920663624,0.9092904787,0.9999775217,0.9734955026
1268,7.6,"Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.",3,4,3.5,0.01801723242,0.9819827676,0.9770096134,0.299384743,0.3851076245,0.994854859,0.941172851,0.999981527,0.9782182429
1269,7.6,you can traverse the list from front to back and back to front,3,4,3.5,0.03628742695,0.9637125731,0.9536964416,0.1561271846,0.2593781611,0.9859281611,0.8391091411,0.9999550256,0.9469701134
1270,7.6,You can traverse the list in reverse.,3,4,3.5,0.03023284674,0.9697671533,0.9614222197,0.333753705,0.4152714163,0.9864028149,0.8445361111,0.9999699259,0.9645392943
1271,7.6,Doubly linked lists can be traversed in both directions,3,4,3.5,0.03123950958,0.9687604904,0.9601376956,0.2540326416,0.3453045214,0.9881318385,0.8643049627,0.9999717202,0.9666549989
1272,7.6,"Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions.",4,3,3.5,0.01703041792,0.9829695821,0.9782688105,0.3342007101,0.4156637286,0.9888319069,0.8723092196,0.9999796577,0.9760141504
1273,7.6,You can traverse forwards and backwards through nodes.,3,4,3.5,0.04395824671,0.9560417533,0.943908306,0.1297577024,0.236235083,0.9880424251,0.8632826517,0.9999474992,0.9380956855
1274,7.6,You can point both forwards and backwards,3,4,3.5,0.06000268459,0.9399973154,0.9234352488,-0.008430859074,0.1149544058,0.9856703344,0.8361612702,0.9999639574,0.9575017582
1275,7.6,You can go backwards in the linked list and access previous data easier without having to keep track of the previous item,4,4,4,0.01942205429,0.9805779457,0.9752170296,0.2635541558,0.3536610429,0.9924711828,0.9139190063,0.9999860588,0.9835617235
1276,7.6,Doubly linked lists allow backward movement through the nodes.,3,4,3.5,0.03856438398,0.961435616,0.950790994,0.2357942462,0.3292976614,0.990497587,0.8913538303,0.9999504756,0.9416052112
1277,7.6,"they have double pointers, so each node can point forwards or backwards. Making it a little easer to get to where you need. ",3,4,3.5,0.03091001511,0.9690899849,0.9605581378,0.1183374375,0.22621213,0.990955475,0.8965891085,0.9999767241,0.9725551115
1278,7.6,ability to backtrack through a list.,3,3,3,0.05307543278,0.9469245672,0.9322745751,0.3223614991,0.4052730891,0.9832738147,0.8087605786,0.9999721795,0.9671964658
1279,7.6,You can move forwards and backwards in the double-linked list. Basic only moves forwards.,3,4,3.5,0.03301507235,0.9669849277,0.9578720383,0.1898097843,0.2889395694,0.9922012087,0.910832249,0.9999742861,0.969680456
1280,7.6,The advantage is that each node points to bothe its predecessor and its successor. There are no special cases for insertion and deletion.,4,5,4.5,0.02947551012,0.9705244899,0.9623885979,0.309845984,0.3942888938,0.9922580878,0.9114825776,0.9999860807,0.9835876262
1281,7.6,each node points to both its predecessor and its successor.,4,3,3.5,0.04894477129,0.9510552287,0.9375453905,0.06798104942,0.1820170332,0.9894802954,0.879722592,0.9999718143,0.9667659258
1282,7.6,a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back,3,5,4,0.0219424367,0.9780575633,0.972000966,0.1907499284,0.2897646834,0.9929531723,0.9194298503,0.9999600351,0.9528769184
1283,7.6,"A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish",3,4,3.5,0.02290803194,0.9770919681,0.9707688452,0.2832648456,0.3709600565,0.9917869237,0.9060955069,0.9999685183,0.9628795076
1284,7.6,"Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction",4,4,4,0.01945722103,0.980542779,0.9751721561,0.2889588475,0.3759573761,0.9933373324,0.9238221587,0.9999900831,0.9883068387
1285,7.6,"given a node in the list, one can navigate easily in either direction",4,4,4,0.0231025815,0.9768974185,0.9705205956,0.3117372394,0.395948747,0.9929099267,0.9189354008,0.9999641892,0.9577750443
1286,7.6,You can traverse the list both forward and backwards.,3,4,3.5,0.02702885866,0.9729711413,0.9655105791,0.234974429,0.3285781519,0.9898077521,0.8834665791,0.9999834476,0.9804828427
1287,7.6,a doubly linked list allows you to back up from a node rather than having to go through the entire list again,4,4,4,0.02189511061,0.9781048894,0.9720613551,0.2478212714,0.3398531354,0.9918073808,0.9063294035,0.9999402981,0.929604761
1288,7.6,Gives faster times for some operations such as insertion and deletion,5,5,5,0.02989798784,0.9701020122,0.961849507,0.3626524806,0.4406343192,0.990352905,0.8896996042,0.9999503506,0.9414577833
1289,7.6,"The primary disadvantage of doubly linked lists are that (1) each node requires an extra pointer, requiring more space, and (2) the insertion or deletion of a node takes a bit longer (more pointer operations).",0,4,2,0.02053904533,0.9794609547,0.9737917244,0.2759114206,0.3645063504,0.9879513571,0.8622414227,0.9999812761,0.9779224245
1290,7.7,they take up twice as much memory for each node,5,5,5,0.07176327705,0.9282367229,0.9084284729,0.04629898444,0.1629878495,0.9862474658,0.8427599222,0.9999410736,0.9305191343
1291,7.7,"In a doubly linked list, there are more pointers to set and the mechanics of inserting and deleting are more difficult. Also, the special cases at the beginning or end of the list are more complicated.",4,3,3.5,0.03962618113,0.9603738189,0.9494361174,0.2331661582,0.3269911298,0.9762889683,0.7288990945,0.9999211857,0.9070690519
1292,7.7,"There are more pointers to set, the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list.",4,4,4,0.0373942852,0.9626057148,0.9522840659,0.1826464534,0.2826526987,0.9809402731,0.7820799492,0.999929809,0.9172369114
1293,7.7,Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms.,3,3,3,0.05266851187,0.9473314881,0.9327938152,0.1222997978,0.2296896808,0.9807212167,0.7795753612,0.9998887072,0.8687732459
1294,7.7,"Need more memory to store ""previous"" pointers.",5,5,5,0.05893582106,0.9410641789,0.9247965902,0.4107638001,0.4828590399,0.9918462342,0.9067736355,0.9999578247,0.950270587
1295,7.7,a node in a doubly linked list takes up more memory than a node in a singly linked list.,5,5,5,0.06257766485,0.9374223351,0.920149517,0.08801443875,0.1995992629,0.9830881769,0.8066380825,0.9999341346,0.9223372648
1296,7.7,You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting/deleting.,3,3,3,0.05336153507,0.9466384649,0.9319095023,0.1068428606,0.2161239573,0.9882334581,0.8654668342,0.9998882141,0.8681918795
1297,7.7,"Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes",5,5,5,0.04877948761,0.9512205124,0.9377562961,0.3124509454,0.3965751285,0.9705686621,0.6634957745,0.9999376287,0.9264572247
1298,7.7,"Double-linked lists require more space per node, and their elementary operations are more expensive",5,5,5,0.06848675013,0.9315132499,0.9126093938,0.2850227356,0.3725028621,0.9753912642,0.7186351638,0.9999451888,0.9353714604
1299,7.7,More difficult to delete and create nodes.,3,3,3,0.05455380678,0.9454461932,0.9303881373,0.2212350219,0.3165198124,0.9896847828,0.8820606054,0.9999296219,0.9170163384
1300,7.7,They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.,5,5,5,0.03689199686,0.9631080031,0.9529249969,0.2513774931,0.3429742402,0.9892571854,0.8771716552,0.9999212072,0.9070944533
1301,7.7,nodes take up more memory,5,5,5,0.1148101091,0.8851898909,0.8534997643,0.1000652909,0.2101756485,0.9862499996,0.842788892,0.9999123855,0.8966926558
1302,7.7,"Each node requires an extra pointer (space requirements increased), Insertion or deletion of a node takes a longer (more pointer operations).",5,5,5,0.05067634583,0.9493236542,0.9353358632,0.445515275,0.5133585426,0.9737096906,0.6994088332,0.99993143,0.9191482804
1303,7.7,its a little more confusing. The special cases at the end and beginning become more difficult to do.,3,3,3,0.04449343681,0.9555065632,0.9432253916,0.2241981924,0.3191204279,0.9900931583,0.886729781,0.9999176339,0.9028811039
1304,7.7,increased actions to add and remove elements to the linked list.,3,3,3,0.03858906031,0.9614109397,0.9507595065,0.1920376569,0.2908948535,0.989698348,0.8822157036,0.9999411885,0.9306546287
1305,7.7,"Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.",3,3,3,0.05810570717,0.9418942928,0.9258558339,0.1618115604,0.2643670323,0.9746496981,0.7101564412,0.9999149405,0.8997052482
1306,7.7,The main disadvanate is that if hard to remove all items in the list.,1,3,2,0.04202330112,0.9579766989,0.9463773394,0.1223476306,0.229731661,0.9882079417,0.8651750915,0.999951539,0.9428590323
1307,7.7,"each node requires an extra pointer, taking up more storage.  insertions and deletions require more pointer operations.",5,5,5,0.03959661722,0.9604033828,0.9494738416,0.5404420495,0.5966706734,0.9778250711,0.7464621796,0.9999546947,0.9465799338
1308,7.7,"in a doubly linked list there are twice as many pointers for each element , therefore more memory is used",5,5,5,0.05613124371,0.9438687563,0.9283752929,0.08291228116,0.1951213732,0.9810547493,0.7833888178,0.9999326049,0.9205336328
1309,7.7,The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list,3,4,3.5,0.06245487928,0.9375451207,0.9203061942,0.09474609047,0.205507272,0.9836657426,0.8132416995,0.9999243279,0.9107741093
1310,7.7,"Double linked lists require more space per node, and their elementary operation are more expensive",5,5,5,0.05787158012,0.9421284199,0.9261545852,0.2733971477,0.3622997081,0.9762991183,0.7290151451,0.9999639135,0.9574500196
1311,7.7,"1- each node requires an extra pointer, requiring more space 2- the insertion or deletion of a node takes a bit longer, more pointer operations",5,5,5,0.04994386435,0.9500561357,0.9362705257,0.4163751006,0.4877837769,0.9764297916,0.7305092025,0.9999300731,0.9175482824
1312,7.7,It takes up twice the storage needed.,5,5,5,0.05407845974,0.9459215403,0.9309946907,0.3220724165,0.4050193769,0.9890628977,0.8749502605,0.9999060265,0.8891946466
1313,7.7,"using more pointers to enable the backward movement takes up more memory, having more pointers make it slightly more work to add or remove a node from the list",5,5,5,0.04006886482,0.9599311352,0.9488712433,0.260045588,0.3505817614,0.9794223038,0.7647241949,0.9999331384,0.9211626847
1314,7.7,"increased memory requirements, slightly more complicated when modifying elements in the list",5,5,5,0.06650179625,0.9334982038,0.9151422388,0.1755368412,0.2764129739,0.9787565047,0.7571117578,0.9998567724,0.8311185336
1315,7.7,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
1316,8.1,A data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways.,5,5,5,0.01579976082,0.9842002392,0.9798391562,0.5102369189,0.5701612528,0.9950340273,0.9432213786,0.9999821179,0.9789149647
1317,8.1,A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack.,5,5,5,0.01154643297,0.988453567,0.9852664964,0.4801437557,0.5437501,0.9924753407,0.9139665457,0.9999800085,0.9764278028
1318,8.1,Stores a set of elements in a particular order.,0,4,2,0.0323651433,0.9676348567,0.9587013621,0.1769262254,0.2776323619,0.981896631,0.7930145012,0.9999655405,0.9593683322
1319,8.1,"An ADT whose most recently inserted item is the first item removed or retrieved. This property is called last in, first out (LIFO). Items enter and leave a stack at its top.",5,5,5,0.01555866003,0.98444134,0.9801468061,0.4797450006,0.5434001341,0.9935973198,0.9267947333,0.9999877416,0.9855459166
1320,8.1,A list in which only the top (or last item added) can be modified.,4,5,4.5,0.01798599958,0.9820140004,0.9770494671,0.5750420094,0.6270371995,0.9898864212,0.884366045,0.9999622084,0.9554394457
1321,8.1,a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.,5,5,5,0.01528221369,0.9847177863,0.9804995577,0.4272018671,0.4972858483,0.9906913106,0.8935687759,0.9999764963,0.9722865499
1322,8.1,A data structure that stores data using LIFO.,5,5,5,0.04045289755,0.9595471025,0.9483812091,0.3516426086,0.430971546,0.9911043015,0.8982907213,0.9999748513,0.9703468247
1323,8.1,"A stack is similar to an array, but does not allow for random access. Stacks only allow a user to retrieve the last item put into the stack. Last in, fist out.",5,5,5,0.021682024,0.978317976,0.9723332584,0.23654221,0.3299541091,0.9939354336,0.9306605687,0.9999779384,0.9739868989
1324,8.1,Stores a set of elements in a particular order. Stack principle: LAST  IN  FIRST  OUT. It means: the last element inserted is the first one to be removed.,5,5,5,0.01726520061,0.9827347994,0.9779692226,0.3172306418,0.4007700113,0.9914699715,0.9024716223,0.9999600003,0.9528358156
1325,8.1,A stack is an ADT that stores a set of elements in a particular order.,1,4,2.5,0.02253288031,0.9774671197,0.9712475469,0.2675353885,0.357155157,0.9909999135,0.8970971976,0.9999733095,0.9685289086
1326,8.1,"a data type that stores a set of elements in a certain order, last in, first out.",5,5,5,0.01874005795,0.9812599421,0.9760872721,0.3800570071,0.4559093372,0.9913332092,0.9009079463,0.9999598442,0.9526517997
1327,8.1,a data structure that moves elements in last in first out,5,5,5,0.03171634674,0.9682836533,0.9595292409,0.4374393821,0.5062707652,0.9916589568,0.9046323925,0.9999728678,0.9680080734
1328,8.1,Stores a set of elements in a last in first out order.,5,5,5,0.0270819068,0.9729180932,0.9654428886,0.2464638054,0.3386617604,0.984652218,0.8245206008,0.9999450091,0.935159581
1329,8.1,A list that can be added to or removed from only from the top.,5,5,5,0.01889204979,0.9811079502,0.9758933271,0.4246831238,0.4950752826,0.9905254905,0.8916728667,0.9999714214,0.9663026019
1330,8.1,"a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not support ( at least in the pure stack) peeking at a element without removing the rest of the stack first.",5,5,5,0.01291018724,0.9870898128,0.9835263159,0.3521377146,0.431406074,0.9927775824,0.9174222378,0.9999749541,0.9704680721
1331,8.1,Stores a set of elements in a particular order based on the principle of Last In First Out (LIFO).,5,5,5,0.02429711819,0.9757028818,0.9689963404,0.2314703763,0.3255028331,0.9910197245,0.8973237079,0.9999670934,0.9611993747
1332,8.1,"an object list that stores elements in a particular order, the first object inserted is at the bottom with the last object at the top so the first object in is the last object out.",5,5,5,0.02123177052,0.9787682295,0.9729077918,0.3123458922,0.3964829289,0.9920601346,0.9092192726,0.9999580403,0.9505247909
1333,8.1,An ADT that stores a set of elements in a particular order. The stack principles are LIFO. The last item inserted in the list is the first out.,5,5,5,0.01693880558,0.9830611944,0.9783857098,0.3818594813,0.457491272,0.9937856987,0.9289485705,0.9999800355,0.9764596473
1334,8.1,An abstract data type that stores a set of elements in a particular order.,1,4,2.5,0.0204975605,0.9795024395,0.9738446599,0.3034001291,0.3886317132,0.9902345411,0.888346286,0.9999655181,0.9593419112
1335,8.1,a collection of data to be executed in the order of last in first out,5,5,5,0.02598053217,0.9740194678,0.9668482669,0.1910369992,0.2900166301,0.9885311056,0.8688699967,0.9999695588,0.964106359
1336,8.1,"A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a ""Last in First Out"" structure.",5,5,5,0.01232165098,0.987678349,0.9842773011,0.4786919653,0.5424759416,0.9941965515,0.9336460703,0.9999676284,0.9618302587
1337,8.1,Stores a set of element in a particular order,0,4,2,0.03724789619,0.9627521038,0.9524708615,0.1022195369,0.2120663145,0.9802941292,0.774692241,0.9999596669,0.9524427012
1338,8.1,is a list of element where the first one to be removed is the last one inserted,5,5,5,0.01949131489,0.9805086851,0.9751286516,0.4315415025,0.5010945131,0.9859071704,0.8388691429,0.9999757088,0.9713579901
1339,8.1,A data structure that puts elements in a list and only allows the user  access to the last element.,4,5,4.5,0.01721864939,0.9827813506,0.978028623,0.4523231387,0.5193334389,0.9939489531,0.9308151445,0.9999796823,0.9760431564
1340,8.1,a finite ordered list with zero or more elements,0,4,2,0.03869795799,0.961302042,0.9506205506,0.1385804415,0.2439783272,0.9852365067,0.8312010858,0.9999745011,0.9699339312
1341,8.1,"A storage container that holds objects in a certain order, which has a LIFO priority",5,5,5,0.02636855841,0.9736314416,0.9663531369,0.2530530691,0.3444448032,0.9952722954,0.9459456247,0.9999664482,0.9604386966
1342,8.1,"Stacks are a type of container adaptors, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from the end of the container.",5,5,5,0.01592028141,0.9840797186,0.9796853692,0.3666808605,0.4441698119,0.9876895023,0.8592474969,0.9999731282,0.9683151368
1343,8.2,Push and pop are two main functions defined in a stack,5,5,5,0.05501627922,0.9449837208,0.9297980123,0.4032576084,0.4762712587,0.9874813026,0.8568670383,0.9999458318,0.9361296536
1344,8.2,Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack.,5,5,5,0.07127779722,0.9287222028,0.909047956,0.2936229706,0.3800508264,0.9774795367,0.7425114998,0.9998756321,0.8533562283
1345,8.2,Push and pop.,5,5,5,0.02979123592,0.9702087641,0.9619857248,0.704518795,0.740672019,0.9920781303,0.9094250268,0.9999297962,0.9172218629
1346,8.2,Pop function and Push function,5,5,5,0.07719552517,0.9228044748,0.9014968043,0.3756542802,0.4520453003,0.9797573257,0.7685546799,0.9999023687,0.884881695
1347,8.2,push and pop.,5,5,5,0.02979123592,0.9702087641,0.9619857248,0.8062185049,0.8299283913,0.9978576599,0.9755054795,0.9999811225,0.9777412843
1348,8.2,push (insert an item) pop (remove an item),5,5,5,0.09888356924,0.9011164308,0.873822381,0.3445813358,0.4247742462,0.9768963244,0.735843322,0.9998757337,0.8534760358
1349,8.2,Adding a new item and removing the item,5,5,5,0.1121065021,0.8878934979,0.8569496265,0.03402293101,0.1522138169,0.9860721643,0.8407556065,0.9999169212,0.9020407679
1350,8.2,Push (insert) and pop (retrieve).,5,5,5,0.0840638876,0.9159361124,0.8927326222,0.3881118894,0.4629786747,0.9666960293,0.6192178925,0.9998847744,0.8641360294
1351,8.2,push and pop.,5,5,5,0.02979123592,0.9702087641,0.9619857248,0.8062185049,0.8299283913,0.9978576599,0.9755054795,0.9999811225,0.9777412843
1352,8.2,Push and Pop.,5,5,5,0.02979123592,0.9702087641,0.9619857248,0.5558709502,0.6102117907,0.9865531142,0.8462545634,0.9999202711,0.9059907284
1353,8.2,pop and push,5,5,5,0,1,1,1,1,0.993155412,0.9217421646,0.9999638572,0.9573835466
1354,8.2,push (add an element) pop (remove an element),5,5,5,0.09968465567,0.9003153443,0.872800177,0.3753480613,0.4517765484,0.9768963244,0.735843322,0.9998740113,0.8514451902
1355,8.2,Push and pop.,5,5,5,0.02979123592,0.9702087641,0.9619857248,0.704518795,0.740672019,0.9920781303,0.9094250268,0.9999297962,0.9172218629
1356,8.2,pop and push,5,5,5,0,1,1,1,1,0.993155412,0.9217421646,0.9999638572,0.9573835466
1357,8.2,push ( to add to a item the Stack) Pop  ( to pull the last item added from an array. ),5,5,5,0.0793530941,0.9206469059,0.8987436988,0.2451462746,0.3375054344,0.9694523289,0.6507321405,0.9998146442,0.7814446864
1358,8.2,pop and push,5,5,5,0,1,1,1,1,0.993155412,0.9217421646,0.9999638572,0.9573835466
1359,8.2,"push and pop, push puts an object into the list, and pop takes the last object off.",5,5,5,0.04296052456,0.9570394754,0.9451814215,0.6489526629,0.6919046098,0.9781271554,0.7499160701,0.9999437439,0.9336676849
1360,8.2,Push and Pop are the two main functions of a stack,5,5,5,0.05182152987,0.9481784701,0.9338745829,0.3672714829,0.4446881695,0.9838829282,0.8157248992,0.9999272921,0.9142691916
1361,8.2,Push and Pop,5,5,5,0,1,1,0.6797447801,0.7189291969,0.9866794547,0.8476990819,0.9999181392,0.9034769076
1362,8.2,"push, which adds an element to the stack... and pop which takes an element off the stack",5,5,5,0.07095837593,0.9290416241,0.9094555447,0.3390861154,0.4199513864,0.9820615639,0.7949002675,0.9999345413,0.9228168004
1363,8.2,"Push and Pop, which add and remove data from the stack, respectively.",5,5,5,0.05405837297,0.945941627,0.9310203217,0.3099409938,0.3943722788,0.969210009,0.6479615672,0.9999317485,0.9195238524
1364,8.2,push and pop,5,5,5,0,1,1,1,1,1,1,1,1
1365,8.2,pop - to remove item push - to insert an element,5,5,5,0.09048581123,0.9095141888,0.8845381058,0.4428953826,0.5110592039,0.9839204347,0.8161537315,0.9999113597,0.8954830851
1366,8.2,Pop and push,5,5,5,0,1,1,0.8525220156,0.8705664953,0.9889923415,0.8741435535,0.9999355954,0.9240597419
1367,8.2,pop and push,5,5,5,0,1,1,1,1,0.993155412,0.9217421646,0.9999638572,0.9573835466
1368,8.2,push - adds an item to the top of the stack pop - removes the top item from the stack,5,5,5,0.09075701237,0.9092429876,0.8841920471,0.3277648389,0.4100153102,0.9773217776,0.7407077552,0.9998473527,0.8200116739
1369,8.2,push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack,5,5,5,0.06002908945,0.9399709105,0.9234015556,0.3869001567,0.461915202,0.9752586331,0.7171187216,0.9998876071,0.8674761571
1370,8.3,An array has a fixed size.  You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added.  Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array.,5,5,5,0.01121389866,0.9887861013,0.9856908175,0.5897608399,0.6399551264,0.9890869307,0.8752250432,0.9999142236,0.8988599865
1371,8.3,By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. You increment top when an element is pushed and you decrement it when an item is popped.,5,5,5,0.01932686567,0.9806731343,0.9753384924,0.4938146174,0.5557482809,0.9902817576,0.8888861377,0.9999792772,0.9755654469
1372,8.3,"If you use a dynamically allocated array, you must provide a destructor and copy constructor.",2,4,3,0.04415202141,0.9558479786,0.9436610452,0.2263135016,0.3209769212,0.9875961175,0.8581797775,0.9999525202,0.9440159355
1373,8.3,"Create a int value that stores the ""head"" of the stack. Increment the top when one element is pushed and decrement after it is popped.",5,5,5,0.01817989349,0.9818201065,0.9768020542,0.4461880028,0.5139489597,0.9925032464,0.9142856076,0.9999619991,0.9551927011
1374,8.3,Use a pointer that always points to the end of the array list for push/pop modifications.,5,4,4.5,0.02648729086,0.9735127091,0.9662016316,0.3990475535,0.4725763197,0.9912718014,0.900205838,0.9999451778,0.9353584841
1375,8.3,if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.,5,4,4.5,0.01617377996,0.98382622,0.9793618994,0.5871348381,0.6376504257,0.9896577719,0.8817517754,0.9999498819,0.9409051121
1376,8.3,You predetermine the size of the stack as you would an array.  This type can not grow.,1,4,2.5,0.01916527748,0.9808347225,0.9755446825,0.4198254049,0.4908119237,0.9907263929,0.8939698908,0.9999679173,0.9621708927
1377,8.3,"Declare a variable that points the last item in the array, which increases (++) when items are pushed onto the stack, and decreases (--) when an item is popped off the top.",5,5,5,0.01908069849,0.9809193015,0.9756526072,0.3868164718,0.4618417563,0.9849781643,0.8282473192,0.9999762955,0.9720497357
1378,8.3,"Allocate an array of some size. The bottom stack element is stored at some element. Last index in the array is the top. Increment top when one element is pushed, decrement after pop. ",5,4,4.5,0.02341419458,0.9765858054,0.9701229704,0.539727211,0.596043298,0.9898108411,0.883501897,0.9999692063,0.9636908002
1379,8.3,"You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head.",5,3,4,0.02637249231,0.9736275077,0.9663481172,0.4075927436,0.480075974,0.9835357665,0.8117556134,0.9999460151,0.9363457192
1380,8.3,"Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad",5,4,4.5,0.0179502964,0.9820497036,0.9770950252,0.4414974749,0.5098323353,0.9905071934,0.8914636651,0.9999350737,0.92344463
1381,8.3,treat the beginning of the array as the beginning of the stack,4,4,4,0.01559990644,0.9844000936,0.9800941748,0.4577186704,0.5240688072,0.992304793,0.9120165835,0.9999589674,0.9516179108
1382,8.3,Use an index value called top to keep track of the last element in the array.,5,4,4.5,0.01818490028,0.9818150997,0.9767956655,0.5084216595,0.5685680971,0.9908600556,0.8954981274,0.9999167211,0.9018048527
1383,8.3,create an array and implement pointers that point to the next list item down and stack them up.,1,3,2,0.03288125992,0.9671187401,0.9580427859,0.4018526077,0.4750381651,0.9887792331,0.8717069717,0.9999572617,0.9496068013
1384,8.3,"for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.",3,4,3.5,0.0159560442,0.9840439558,0.9796397351,0.3160866499,0.399765991,0.9890922129,0.8752854363,0.9999661683,0.9601085766
1385,8.3,"Create an array based on a pre-defined size N There can't be more elements than N.  Bottom stack element stored at element 0 last index in the array is the top  Increment top when one element is pushed, decrement after pop",5,4,4.5,0.02818208933,0.9718179107,0.9640390314,0.4205542207,0.4914515661,0.9853154368,0.8321035359,0.9999633717,0.9568110923
1386,8.3,"with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array",4,4,4,0.01512748003,0.98487252,0.9806970013,0.5480307937,0.6033309065,0.9947572786,0.9400571624,0.9999004426,0.8826106199
1387,8.3,Allocate an array of some pre-defined size. Bottom stack element stored at element 0. The last index in the array is the top. Increment top when one element is pushed.,5,4,4.5,0.02528351545,0.9747164845,0.9677376756,0.5087854266,0.568887356,0.98750599,0.8571493025,0.9999623358,0.9555896453
1388,8.3,"Create an array, size N.  N++ when one element is pushed.  N-- when one element is popped.",4,4,4,0.04373443127,0.9562655687,0.9441938994,0.3188238144,0.4021682533,0.9850203844,0.8287300436,0.9999550874,0.9470430516
1389,8.3,define an array and keep track of a pointer to the last element as items are added,5,3,4,0.02192544937,0.9780745506,0.9720226422,0.4488387108,0.5162753437,0.9888345195,0.8723390904,0.9998810655,0.8597628605
1390,8.3,"By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the ""top"" tracking integer is incremented.",5,4,4.5,0.01546108723,0.9845389128,0.9802713111,0.5888289809,0.6391372838,0.9884187975,0.867585919,0.9999071509,0.8905204301
1391,8.3,"Allocate an array of some size, bottom stack element stored at element 0",4,4,4,0.04940515757,0.9505948424,0.9369579274,0.39025563,0.4648601207,0.9878343741,0.8609038935,0.9999167323,0.9018180375
1392,8.3,you store the stack in the array but you have to keep in mind the first element,3,3,3,0.02333772182,0.9766622782,0.9702205514,0.4145367146,0.4861703242,0.990625567,0.8928170944,0.9999344182,0.9226716708
1393,8.3,You keep track of the last item entered into the array and do not  allow the user access to the other parts of the array.,5,3,4,0.01020866632,0.9897913337,0.9869735163,0.5148686767,0.5742262978,0.9921106013,0.9097962851,0.9999679564,0.9622170097
1394,8.3,"using arrays, you are pushing one int at a time into the stack until you get to the end of your array",4,4,4,0.01477378607,0.9852262139,0.9811483225,0.4005171955,0.4738661454,0.9868799346,0.8499912765,0.9999678989,0.9621491697
1395,8.3,"by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list",5,3,4,0.01547038555,0.9845296144,0.9802594462,0.4332758188,0.5026166294,0.9831162251,0.8069587725,0.9999620608,0.9552654707
1396,8.3,"Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. ",2,4,3,0.01095598936,0.9890440106,0.9860199155,0.5342882276,0.5912697944,0.9893871793,0.8786579451,0.9999699906,0.9646155385
1397,8.4,You can add an element to the end of the linked list and update a pointer called top each time you modify the list.,2,4,3,0.01282322407,0.9871767759,0.9836372827,0.5740196109,0.6261398953,0.9920274863,0.9088459876,0.9999603622,0.953262555
1398,8.4,You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to.,5,5,5,0.01377189159,0.9862281084,0.9824267621,0.5949881673,0.6445428708,0.9930987598,0.9210944298,0.999962642,0.9559507305
1399,8.4,This is the implementation of the stack using single linked list.   The operations performed on a stack are    1)push(): This is the function which is for insertion(pushing)of an element into stack                      It is similar to the insertion of an element at the end of a single linked list                   see  the function insert_end() in the program for operations of single linked list    2)pop(): This is the function which is for deletion(popping up) of an element from the stack             It is similar to the deletion of an element at the end of a single linked list       see  the function delete_end() in the program for operations of single linked list    3)stack_display():This is the function which is for displaying the elements of a stack,3,5,4,0.01813608408,0.9818639159,0.976857956,0.5007073879,0.5617976954,0.9729377885,0.6905832636,0.999878149,0.8563240423
1400,8.4,Using nodes to keep track of the head of the stack. Then using Push( ) and Pop ( ) to create the stack as needed.,4,4,4,0.01495534182,0.9850446582,0.9809166535,0.5109325647,0.5707717838,0.9936794231,0.9277334643,0.9999386619,0.9276754458
1401,8.4,"Use the head as the top of the stack, only modify the head when you push/pop... push would add a new item to the head, pop would remove the item from the head.",5,4,4.5,0.00877481699,0.991225183,0.9888031396,0.5489064455,0.604099419,0.9975745057,0.9722680271,0.9999770437,0.9729319616
1402,8.4,you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.,5,4,4.5,0.009286522865,0.9907134771,0.9881501916,0.5569762588,0.6111818606,0.9940677647,0.9321735812,0.999879622,0.8580607998
1403,8.4,You dynamicly create space as the stack grows.  The stack can be as long as you need.,1,4,2.5,0.0298884511,0.9701115489,0.9618616761,0.2616127729,0.3519571955,0.9868272792,0.8493892385,0.9999753978,0.9709912015
1404,8.4,"Declare a pointer that points to the head of the linked list, only add and remove nodes from the beginning of the list.",5,5,5,0.009185016155,0.9908149838,0.9882797164,0.7015509009,0.7380672578,0.9955647625,0.9492895577,0.9999831252,0.9801026721
1405,8.4,Creating a linked list. Add an element to the top of the stack when pushing and deleting an element when popping.,4,4,4,0.01381033659,0.9861896634,0.9823777054,0.6225063205,0.6686940757,0.99111453,0.89840767,0.9999401618,0.9294440154
1406,8.4,"A singly-linked list is already a lot like a stack, it just depends on the way you address moving the head.",4,3,3.5,0.01748335361,0.9825166464,0.9776908545,0.3389137685,0.4198001268,0.9898151652,0.8835513376,0.999974583,0.9700304659
1407,8.4,"make a list, make the bottom the head, add on the end and make the end top",3,4,3.5,0.01967591047,0.9803240895,0.9748931035,0.4966063499,0.5581984346,0.9856806423,0.8362791256,0.999894215,0.8752676632
1408,8.4,use the add function with a list as the beginning of the stack and remove for pop,5,4,4.5,0.01312184334,0.9868781567,0.983256238,0.628275156,0.6737570727,0.9927680828,0.9173136232,0.9999601957,0.9530662268
1409,8.4,Use head as the top and push and pop nodes from the head.,5,4,4.5,0.01462751627,0.9853724837,0.981334966,0.5135478377,0.5730670684,0.9883161172,0.8664119195,0.9999787739,0.974972092
1410,8.4,create a node based list that points to the next list item down.,0,3,1.5,0.03692054749,0.9630794525,0.9528885657,0.4536622763,0.520508728,0.9888543179,0.8725654566,0.9998973464,0.8789598633
1411,8.4,"have the head of the list be the last item added, and a push just adds a new head.",5,4,4.5,0.01051896811,0.9894810319,0.9865775643,0.5569236875,0.6111357216,0.9965006833,0.9599904405,0.9999660216,0.9599357007
1412,8.4,"Create a new list.  Pop elements in the stack as needed.  Push the stack to remove items, unless the stack is empty.  The top item is at the head of the list. The last item is at the end.",5,4,4.5,0.01070773602,0.989292264,0.9863366923,0.6056842208,0.6539302224,0.9887907601,0.8718387661,0.9999064319,0.8896727371
1413,8.4,adding the element to the end of the list so that it links to the element before it. when popping the element it takes the last element in the list and sets the previous one as the end of the list.,3,4,3.5,0.01042598486,0.9895740151,0.9866962129,0.6274504066,0.6730332344,0.9941405652,0.9330059489,0.9999251866,0.9117866513
1414,8.4,"You can implement a stack using arrays or and linked list. By the use of pointers, that point element(node) to the next element in the stack. By the use of pointers, the stack becomes a linked list.",1,4,2.5,0.018214643,0.981785357,0.9767577131,0.5619236231,0.6155238965,0.9866364936,0.8472078847,0.9999173117,0.9025012123
1415,8.4,Elements are only inserted and removed from the head of the list.  There is no header node or current pointer.,5,4,4.5,0.0179490447,0.9820509553,0.9770966224,0.476775229,0.540793725,0.9918688784,0.9070325381,0.9999617311,0.9548766584
1416,8.4,use a linked list and keep track of a pointer that points to the first item,4,4,4,0.02254486084,0.9774551392,0.9712322595,0.4950376153,0.5568216405,0.9911748104,0.8990968881,0.9999187499,0.9041969888
1417,8.4,"A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.",5,4,4.5,0.01531654596,0.984683454,0.9804557489,0.3969714642,0.4707542475,0.9851444358,0.8301483906,0.9999732117,0.9684136032
1418,8.4,using pointer,0,3,1.5,0.1673129201,0.8326870799,0.7865050175,0.1412010193,0.2462782675,0.9745467777,0.7089796981,0.999613997,0.5448590809
1419,8.4,the top is the first pointer.,3,3,3,0.03658157587,0.9634184241,0.9533211009,0.3987083435,0.4722786132,0.9843624817,0.8212078909,0.9999324835,0.9203904528
1420,8.4,"Keep a pointer pointing to the last element entered at the front of  the array and move the pointer ""back"" when you delete an element.",2,3,2.5,0.01550132036,0.9844986796,0.9802199727,0.4402827322,0.508766221,0.9894193722,0.8790260241,0.9999700777,0.9647181929
1421,8.4,"using linked list, you are pushing the node that contains each int to the stack until you get to the end of your linked list",1,4,2.5,0.01376998425,0.9862300158,0.9824291959,0.5057034492,0.56618247,0.9888483757,0.8724975161,0.9999712256,0.9660717348
1422,8.4,"have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.",5,5,5,0.0120754838,0.9879245162,0.9845914159,0.6584355235,0.7002272071,0.9782238599,0.7510217445,0.9999072081,0.8905879094
1423,8.4,"Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you'll want to create files stack.h and a stack.c",0,4,2,0.02020704746,0.9797929525,0.974215361,0.3752202094,0.4516643396,0.9915791015,0.9037193644,0.9999614527,0.9545483747
1451,8.6,They are converted to post fix expressions.  It still follow the order of precedence for the operators.,5,5,5,0.02233839035,0.9776616096,0.9714957203,0.5485551357,0.6037910933,0.9849798662,0.8282667781,0.999982219,0.9790341842
1452,8.6,They are first converted to postfix expressions and then evaluated.,5,5,5,0.02434974909,0.9756502509,0.9689291822,0.7216932774,0.7557451396,0.9871793571,0.853414733,0.9999771041,0.9730031399
1453,8.6,"Computers cannot evaulate infix expressions, it must first convert infix to postfix expression then it can evaluate.",5,5,5,0.03007894754,0.9699210525,0.9616185984,0.5120722651,0.5717720376,0.9940912918,0.9324425797,0.9999605314,0.9534621389
1454,8.6,By using parentheses to have order in the expression.,2,3,2.5,0.03243899345,0.9675610065,0.9586071276,0.400465101,0.4738204249,0.989625309,0.8813806099,0.9999756649,0.9713062303
1455,8.6,In postfix notation.,3,5,4,0.09865266085,0.9013473392,0.8741170253,0.5196115375,0.5783888519,0.9858387898,0.8380873107,0.9996817459,0.6247426724
1456,8.6,computers usually convert infix expressions to post fix expression and evaluate them using a stack.,5,5,5,0.03207343817,0.9679265618,0.9590735843,0.4603450894,0.5263738742,0.9890457138,0.8747537881,0.9999682626,0.9625779926
1457,8.6,they are converted to postfix,5,5,5,0.03969991207,0.9603000879,0.9493420351,0.5860087872,0.6366621512,0.9828722808,0.8041696272,0.99994717,0.9377074798
1458,8.6,Infix expressions are interpreted as postfix expressions by implementing stacks.,5,5,5,0.03386271,0.96613729,0.9567904339,0.5700333118,0.6226413347,0.9908823696,0.895753256,0.9997902361,0.7526648357
1459,8.6,They are first converted into an equivalent postfix expression so it can be read by the computer.,5,5,5,0.01563715935,0.9843628407,0.9800466393,0.6166360378,0.6635420439,0.9896607676,0.8817860267,0.9999679965,0.9622642575
1460,8.6,"The computer translates the infix expression to a postfix expression, then solves.",5,5,5,0.0254805088,0.9745194912,0.9674863078,0.5397139788,0.5960316848,0.9911890983,0.8992602493,0.9999613573,0.9544358814
1461,8.6,in postfix format,3,5,4,0.217113018,0.782886982,0.7229589923,0.3998816609,0.4733083709,0.9825305229,0.8002621266,0.99991846,0.9038551297
1462,8.6,they use parenthisis and a stack to determine which evaluations need to be made first,3,3,3,0.03463697433,0.9653630257,0.9558024556,0.1731152534,0.2742876765,0.9831221208,0.8070261814,0.999971135,0.9659648913
1463,8.6,By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered.,4,5,4.5,0.03107196093,0.9689280391,0.9603514914,0.4001891613,0.4735782475,0.9879612197,0.8623541872,0.999962119,0.955334036
1464,8.6,by being passed to the function by a leading term,0,3,1.5,0.03319513798,0.966804862,0.9576422705,0.1492095143,0.2533068934,0.9876294252,0.8585606033,0.9999718062,0.9667562985
1465,8.6,"i have an hard time explaining this so i'll show how infix is evaluated instead. Start with an infix expression, like,  (((5+2)*5)+(400/(2+3))), and  push items until you get a "")"" and once that happens, perform the operations until you reach an ""(""... with that complete, you will now have  ((7*5)+(400/(2+3))) as now the expression that will be evaluated... perform last step again... (35+(400/(2+3))) is now the stack.... repeat agian... (35+(400/5)) is now the stack after that.... repeat... (35+80) is now the stack, repeat again... 115 is now the stack, and is returned.",1,4,2.5,0.0420421958,0.9579578042,0.9463532293,0.2668031454,0.3565125066,0.9728028128,0.6890400142,0.9999674782,0.9616531895
1466,8.6,The infix expression is converted to postfix form,5,5,5,0.03822559118,0.9617744088,0.9512233011,0.6551920176,0.6973805562,0.9880438559,0.8632990108,0.9999664578,0.9604499346
1467,8.6,by converting them to postfix expressions and putting the operations in a stack,5,5,5,0.02481889725,0.9751811028,0.9683305388,0.4905468524,0.5528803391,0.9878820831,0.8614493755,0.9999602243,0.9531000187
1468,8.6,The computer converts the infix expression to postfix form. Then evaluates the postfix expression.,5,5,5,0.02660822868,0.9733917713,0.9660473123,0.6996084452,0.7363624687,0.9871680268,0.8532851887,0.9999383967,0.927362842
1469,8.6,infix expressions are converted to postfix expressions before they can be evaluated by a computer.  Operands stay in the same order.  Operators always follow the operands.,5,5,5,0.01495730877,0.9850426912,0.9809141435,0.6216974854,0.6679842046,0.9904231727,0.8905030125,0.999941288,0.9307719277
1470,8.6,infix expressions are pointers evaluated by reference to the memory location,0,3,1.5,0.05557817221,0.9444218278,0.9290810244,0.3566097617,0.4353309495,0.9913576356,0.9011872257,0.9999666867,0.9607199323
1471,8.6,computers convert infix expressions to postfix form before evaluation,5,5,5,0.06758314371,0.9324168563,0.9137624155,0.6180838943,0.6648127497,0.9892363833,0.8769338139,0.9998094016,0.7752630952
1472,8.6,convert infix expressions to postfix expression and evaluate the postfix expression,5,5,5,0.05706644058,0.9429335594,0.927181961,0.6110308766,0.658622695,0.9884876553,0.8683732071,0.9999334346,0.9215119225
1473,8.6,"When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",4,4,4,0.03252869844,0.9674713016,0.9584926622,0.1211297512,0.2286627937,0.9930529613,0.9205707915,0.999956545,0.9487616478
1474,8.6,Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.,5,5,5,0.01920849085,0.9807915092,0.9754895414,0.5775811672,0.6292656819,0.9892123166,0.8766586471,0.9999622944,0.9555408637
1475,8.6,"infix expressions are converted to postfix, (i.e. 3+2 is changed to 32+)",5,5,5,0.04396343231,0.9560365677,0.9439016891,0.5498514175,0.6049287702,0.9944340832,0.9363618969,0.9999599976,0.9528326415
1476,8.6,"they are transformed into post-fix expressions, then evaluated with a stack.",5,5,5,0.01970094442,0.9802990556,0.9748611597,0.582361877,0.6334614541,0.9933951844,0.9244836114,0.9999868384,0.9844810045
1477,8.6,"Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in ""a + b"").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written ""+ a b"".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written ""a b +"".  (You may have seen this as ""reverse Polish notation"".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations. ",5,5,5,0.01872640848,0.9812735915,0.976104689,0.4264324903,0.4966106076,0.9824219844,0.7990211479,0.9999602418,0.9531206235
1478,8.7,isEmptry()//determines if the stack is full or not pop()//to remove the top element if it is not the on you are looking for search()//you compare each element of the stack to the data you are looking for.,2,4,3,0.02197015285,0.9780298471,0.9719655995,0.4282748699,0.4982275652,0.9863444355,0.843868629,0.9999422448,0.9319001894
1479,8.7,You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for.,2,4,3,0.02025055885,0.9797494411,0.9741598394,0.4303928614,0.5000864125,0.9929034372,0.9188612029,0.999979366,0.9756701778
1480,8.7,Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack.,2,4,3,0.02085262537,0.9791473746,0.9733915893,0.3622075915,0.440243864,0.9918736226,0.9070867817,0.9999583057,0.9508377035
1481,8.7,"Using linked lists and stacks, you would need a temp stack to retain the values. Then you would use the Pop( ) function to pop off each element and then compare it. If its not the element your looking for, Push ( ) it to the temp stack. Repeat until the element is found. When you find it,  Pop ( ) off the temp stack back onto the regular stack to have a complete stack again.",5,5,5,0.01051837206,0.9894816279,0.9865783248,0.5848101974,0.6356102134,0.9882840148,0.8660448761,0.9999328732,0.920849935
1482,8.7,"Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.",5,5,5,0.01514810324,0.9848518968,0.9806706856,0.448420614,0.5159084026,0.9933167913,0.9235873004,0.9999527901,0.9443342421
1483,8.7,"if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.",4,5,4.5,0.01293873787,0.9870612621,0.9834898846,0.4493562877,0.5167295932,0.994973485,0.9425291661,0.9999481793,0.9388975479
1484,8.7,"You need to pop each item on the stack and compare the item.  Once the item is found, no more items need to be removed.",3,4,3.5,0.01644778252,0.9835522175,0.9790122661,0.3579600453,0.4365160209,0.9950769724,0.9437123922,0.999948901,0.9397485241
1485,8.7,"Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. When finished, pop the items from the second stack and push them back onto the first stack (this will ensure the order of the elements is maintained).",5,5,5,0.007637023926,0.9923629761,0.9902549888,0.6987476349,0.7356069818,0.9892413979,0.8769911489,0.9999531445,0.9447520998
1486,8.7,Basically pop the stack until you find the given element.,3,4,3.5,0.01546961069,0.9845303893,0.980260435,0.6061825156,0.654367549,0.9890626811,0.8749477839,0.999975662,0.971302745
1487,8.7,"Iterate through the stack, checking the number against the current element.",0,3,1.5,0.02223372459,0.9777662754,0.9716292762,0.5224635005,0.5808918667,0.9925966676,0.9153537412,0.9999052901,0.8883264002
1488,8.7,pop and push,2,4,3,0,1,1,1,1,0.993155412,0.9217421646,0.9999638572,0.9573835466
1489,8.7,pop all elements off stack until you find that element and then push the popped elements back on the stack,5,5,5,0.008778512478,0.9912214875,0.9887984241,0.823363781,0.8449758791,0.9931652533,0.9218546858,0.9999869623,0.984627096
1490,8.7,"Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack.",5,5,5,0.007878303528,0.9921216965,0.9899471107,0.6234137416,0.6694904704,0.9933898537,0.9244226621,0.9999734331,0.9686746796
1491,8.7,either traverse the entire list and pop the given part or create a pointer system that automatically points to it.,2,4,3,0.02764123678,0.9723587632,0.9647291712,0.2973506153,0.3833223799,0.9940334386,0.9317811133,0.9999833424,0.9803588317
1492,8.7,"Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed.  With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.",5,5,5,0.009871542454,0.9901284575,0.9874036937,0.5877032876,0.6381493233,0.993041709,0.9204421381,0.9999833464,0.9803635725
1493,8.7,if top item != given element pop the stack. Repeat until item is found or stack is empty,3,4,3.5,0.02522099018,0.9747790098,0.9678174593,0.5149015188,0.5742551216,0.9890847913,0.8752005813,0.9998731573,0.8504382648
1494,8.7,could traverse through the list/array to find the element.,1,3,2,0.0345774889,0.9654225111,0.9558783602,0.4051801264,0.4779585495,0.9878046078,0.8605635587,0.9999698225,0.964417376
1495,8.7,you need the pop opertation to go throught the stack and find the element.,3,4,3.5,0.01733636856,0.9826636314,0.9778784107,0.5128554702,0.5724594146,0.9888598754,0.8726289974,0.9999781588,0.9742468301
1496,8.7,"createStack, push, isEmpty, pop, and a boolean return value.",2,4,3,0.04662275314,0.9533772469,0.940508337,0.1370074451,0.2425977927,0.9780424202,0.7489472482,0.9999162128,0.9012054245
1497,8.7,you would have to traverse the stack popping each element to search it,3,4,3.5,0.02223187685,0.9777681231,0.9716316339,0.3707382381,0.4477307542,0.9893043102,0.8777104585,0.9999780932,0.9741693818
1498,8.7,Pop each element off the stack (and into another stack for storage) until the desired element is found.,4,4,4,0.01237857342,0.9876214266,0.9842046669,0.6926293373,0.7302372807,0.9881803965,0.8648601522,0.999928402,0.9155778855
1499,8.7,pop operation,1,4,2.5,0.1052510142,0.8947489858,0.8656973805,0.05588830262,0.171403879,0.9660261749,0.6115590888,0.9997298361,0.6814464316
1500,8.7,to pop elements then push them back,4,5,4.5,0.02976924181,0.9702307582,0.9620137898,0.5606021881,0.6143641441,0.9853271583,0.8322375541,0.9999758989,0.9715821377
1501,8.7,A function to keep track of the elements popped and a function to put  the popped elements backinto the function.,4,5,4.5,0.02341651917,0.9765834808,0.9701200042,0.3741578162,0.4507319342,0.993372823,0.9242279418,0.9999394158,0.9285644636
1502,8.7,you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost,4,5,4.5,0.01924461126,0.9807553887,0.9754434508,0.4045899808,0.4774406104,0.9930804187,0.9208847265,0.9999772734,0.9732027696
1503,8.7,you would need to perform a search through the list of elements (i dont really understand what this question is asking....its not very clear?),0,3,1.5,0.02534192801,0.974658072,0.96766314,0.2906907499,0.3774773738,0.9907448336,0.8941807336,0.9999750329,0.970561
1504,8.7,StackPush() StackPop() StackIsEmpty(),2,4,3,0.2283191681,0.7716808319,0.7086596972,0.03820687905,0.1558858433,0.9813180004,0.7863987077,0.9996167872,0.54814906
1505,9.1,A data structure in c++ which is a collection of data that is kept in order.  First in first out.,5,5,5,0.02386683226,0.9761331677,0.9695453947,0.4567030072,0.5231774142,0.9933479672,0.9239437522,0.9999769479,0.9728189303
1506,9.1,a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on.,4,4,4,0.02059835196,0.979401648,0.9737160478,0.1671274006,0.2690324597,0.9891642268,0.8761088101,0.9999655768,0.9594112072
1507,9.1,A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior.,5,5,5,0.02225744724,0.9777425528,0.9715990056,0.298904717,0.3846863315,0.9922188815,0.9110343116,0.9999656032,0.9594422792
1508,9.1,"A queue stores a set of elements in a particular order.  Its principle of operation is FIFO(first in first out), which means the first element inserted is the first one to be removed.",5,5,5,0.01612311602,0.983876884,0.9794265478,0.4637780786,0.5293868243,0.9944898551,0.936999567,0.9999759336,0.9716230667
1509,9.1,An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.,5,5,5,0.01942396164,0.9805760384,0.9752145959,0.4193758965,0.4904174143,0.9918587611,0.9069168622,0.9999836749,0.9807509309
1510,9.1,"Last in, last out architecture. It works the same way a line at the bank would work, the person that's been waiting the longest gets served first.",5,5,5,0.01709967852,0.9829003215,0.9781804324,0.3543777764,0.4333720558,0.9925681821,0.9150280518,0.9999778482,0.9738804887
1511,9.1,a queue is a data structure that stores elements in a First in First out order.,5,5,5,0.02205264568,0.9779473543,0.9718603369,0.3516541123,0.4309816422,0.9896498069,0.8816607077,0.9999577065,0.9501311997
1512,9.1,A waiting list of items that operation in a FIFO (first in first out) order.,5,5,5,0.02895283699,0.971047163,0.9630555403,0.3238259256,0.4065583376,0.9935165601,0.925871365,0.9999779155,0.973959943
1513,9.1,"A queue is similar to an array, except that the data can only be accessed sequentially rather than at random. Unlike a stack, a queue follows FIFO. First in, First out.",5,5,5,0.01615715027,0.9838428497,0.9793831193,0.3293196857,0.4113799157,0.9939454236,0.9307747898,0.9999722011,0.9672219352
1514,9.1,is a particular kind of collection in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position. First in First Out (FIFO Method).,5,5,5,0.01876801252,0.9812319875,0.9760516014,0.3501680195,0.4296773784,0.9903801979,0.8900116578,0.9999795479,0.9758847269
1515,9.1,Like a linked list but first in first out,4,5,4.5,0.04926359653,0.9507364035,0.9371385625,0.06711854786,0.1812600619,0.9831399261,0.807229759,0.9999089401,0.8926301244
1516,9.1,A queue is a FIFO data structure.,5,5,5,0.03928381205,0.960716188,0.949872988,0.3146209419,0.3984796178,0.9854565366,0.8337168055,0.9999332683,0.9213157845
1517,9.1,A queue is a first in first out data structure.,5,5,5,0.02969276905,0.9703072309,0.9621113706,0.2971851826,0.3831771885,0.9889853703,0.8740638481,0.9999447313,0.9348319686
1518,9.1,"Its like a stack, but uses the linked list to stack a little differently. It's FIFO so the first thing enqueued is the first thing dequeued",5,5,5,0.02300548553,0.9769945145,0.9706444922,0.2394365221,0.3324942914,0.9930817033,0.9208994144,0.9999637,0.9571982149
1519,9.1,"A first in, first out Abstract Data type that can be used to store values.",5,5,5,0.01528513432,0.9847148657,0.9804958309,0.3881703615,0.4630299925,0.9913449413,0.9010420855,0.9999206184,0.9064001508
1520,9.1,"Stores a set of elements in a particular order with a First In, First Out principle",5,5,5,0.03014725447,0.9698527455,0.9615314372,0.09179467708,0.202916975,0.9887416704,0.8712774969,0.9999629821,0.9563517814
1521,9.1,object that stores elements in order that follows first in first out.  the first element added is the first one to come off.,5,5,5,0.02179002762,0.9782099724,0.9721954434,0.3675522506,0.4449345842,0.9919994719,0.9085256842,0.9999718948,0.966860776
1522,9.1,"A quese is an list that stores a set of elements in a particular order. It has Stack principle, but in this case, its ""First In, First Out"". The first element inserted is the first element to be removed.",5,5,5,0.01680904627,0.9831909537,0.9785512856,0.449498862,0.516854723,0.9905928285,0.8924427778,0.9999773558,0.9732999768
1523,9.1,"a finite ordered list with zero or more elements, based upon First In First Out",5,5,5,0.02770912647,0.9722908735,0.9646425424,0.07900801301,0.1916948068,0.9894350636,0.8792054318,0.9999579691,0.9504407921
1524,9.1,a data structure that performs operations in the order of first in first out FIFO,5,5,5,0.03336036205,0.9666396379,0.9574314409,0.1964687854,0.294783817,0.9924470418,0.9136429895,0.9999754749,0.9710821194
1525,9.1,"A Queue is a ""first in first out"" data structure, such that the first element added is also the first removed.",5,5,5,0.020157516,0.979842484,0.9742785642,0.4635419548,0.5291795911,0.9935771778,0.9265644392,0.9999538162,0.9455440815
1526,9.1,"Queue is a buffer, which store element in a particular order",2,5,3.5,0.02950155735,0.9704984426,0.962355361,0.2049529105,0.3022298779,0.9859925486,0.8398453176,0.9999041963,0.8870367022
1527,9.1,"stores a set of elements where the first element in, is the first element to be removed",5,5,5,0.02337121964,0.9766287804,0.9701778074,0.3959112763,0.4698237776,0.9915168583,0.9030077039,0.9999751851,0.9707404841
1528,9.1,A data structure that removes nodes from the head and adds nodes at the tail.,5,5,5,0.02419948578,0.9758005142,0.9691209215,0.3695226908,0.4466639336,0.9932249639,0.9225373893,0.9999581269,0.9506269368
1529,9.1,a queue is a list of things that follows the first in first out behavior,5,5,5,0.02599787712,0.9740021229,0.9668261344,0.1616809964,0.2642524433,0.9885563878,0.8691590614,0.9999526221,0.944136173
1530,9.1,"a queue is a storage container that holds its objects in a first in, first out priority",5,5,5,0.02510982752,0.9748901725,0.9679593054,0.1478073746,0.2520763107,0.992133989,0.9100636894,0.9999420173,0.9316318915
1531,9.1,"The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear (end) of the line and customers come off of the line (i.e., are serviced) from the front of the line.",5,5,5,0.01579713821,0.9842028618,0.9798425026,0.2907057106,0.3774905041,0.9907229842,0.8939309178,0.9999714673,0.9663567724
1532,9.2,enqueue which adds data to the queue and dequeue which deletes data from the queue,5,5,5,0.1815695763,0.8184304237,0.7683132092,0.624561429,0.670497734,0.9838720982,0.8156010744,0.9999239903,0.9103759986
1533,9.2,"enqueue , which inserts a specified element at the head of the specified queue, and dequeue , which removes the specified element from the queue.",5,5,5,0.2142059803,0.7857940197,0.7266684366,0.4363828301,0.5053434864,0.9743493442,0.7067223345,0.9998763231,0.8541710011
1534,9.2,The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.,5,5,5,0.2154032588,0.7845967412,0.7251406828,0.4439519942,0.511986535,0.9783372113,0.7523177525,0.9999151079,0.899902693
1535,9.2,The two main functions are enqueue and dequeue.,5,5,5,0.1522850394,0.8477149606,0.8056809253,0.6541051865,0.6964267029,0.9865501057,0.8462201661,0.9999779575,0.9740094441
1536,9.2,Enqueue and Dequeue,5,5,5,0,1,1,0.7912851572,0.8168221942,1,1,1,1
1537,9.2,Enqueue and Dequeue,5,5,5,0,1,1,0.7912851572,0.8168221942,1,1,1,1
1538,9.2,enqueue - insert into queue dequeue - remove element,5,5,5,0.1789762378,0.8210237622,0.7716223664,0.6241499782,0.6701366257,0.9785125161,0.7543221058,0.9998575334,0.8320159299
1539,9.2,"Remove the item added first, add items to the back.",5,5,5,0.2525037527,0.7474962473,0.6777996329,-0.03179155663,0.09445197647,0.9832239109,0.8081900022,0.9997311565,0.683003285
1540,9.2,The two main functions of a queue are enqueue and dequeue.,5,5,5,0.1710512042,0.8289487958,0.7817348844,0.6948558092,0.7321913355,0.9868012082,0.8490911549,0.9999514627,0.9427691055
1541,9.2,enqueue and dequeue.,5,5,5,0.05548155308,0.9445184469,0.9292043125,0.8614809513,0.8784292719,0.9986383494,0.9844315203,0.9999848755,0.9821665642
1542,9.2,enqueue and dequeue,5,5,5,0,1,1,1,1,1,1,1,1
1543,9.2,Enqueue and Dequeue,5,5,5,0,1,1,0.7912851572,0.8168221942,1,1,1,1
1544,9.2,enqueue and dequeue,5,5,5,0,1,1,1,1,1,1,1,1
1545,9.2,enqueue and dequeue,5,5,5,0,1,1,1,1,1,1,1,1
1546,9.2,"enque ( Data ),  Deque ( )",5,5,5,0.2201987505,0.7798012495,0.7190215295,0.1946189702,0.2931603335,0.9786260581,0.7556202922,0.9998689698,0.8455007231
1547,9.2,enqueue and dequeue,5,5,5,0,1,1,1,1,1,1,1,1
1548,9.2,enqueue and dequeue,5,5,5,0,1,1,1,1,1,1,1,1
1549,9.2,"The two functions are, Enqueue and Dequeue",5,5,5,0.1272627711,0.8727372289,0.8376098924,0.6356733441,0.680250065,0.9890869035,0.875224732,0.9999597202,0.952505644
1550,9.2,"enqueue, dequeue",5,5,5,0.04620802402,0.953791976,0.9410375405,0.9527216554,0.9585063366,0.9906937724,0.8935969231,0.9999797874,0.9761671298
1551,9.2,"enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue",5,5,5,0.2064068913,0.7935931087,0.7366202465,0.5543140769,0.6088454066,0.9777271839,0.7453429825,0.9999148638,0.8996148033
1552,9.2,"Enqueue and dequeue, which add and remove elements from the queue",5,5,5,0.150485456,0.849514544,0.8079772334,0.7062702775,0.7422092011,0.9858463248,0.8381734618,0.9999082673,0.8918368547
1553,9.2,Enqueue and Dequeue,5,5,5,0,1,1,0.7912851572,0.8168221942,1,1,1,1
1554,9.2,dequeue and enqueue,5,5,5,0,1,1,1,1,1,1,1,1
1555,9.2,enqueue and dequeue,5,5,5,0,1,1,1,1,1,1,1,1
1556,9.2,enqueue and dequeue,5,5,5,0,1,1,1,1,1,1,1,1
1557,9.2,enqueue dequeue,5,5,5,0.07693046331,0.9230695367,0.9018350292,0.9581664801,0.9632849668,0.9945510297,0.9376990087,0.9997731974,0.7325742911
1558,9.2,rear and front,2,3,2.5,0.245510757,0.754489243,0.6867228499,0.0207997784,0.1406085661,0.9856369188,0.835779212,0.9998733496,0.8506650105
1559,9.3,Make use of a front pointer and a tail pointer.  When the tail pointer reaches the end of an array it gets reset to the front of the array.  If the two pointers are equal then the queue is either full or just has one element.,5,4,4.5,0.01063084602,0.989369154,0.9864348056,0.5680767894,0.6209242001,0.9941112689,0.9326709886,0.9999504284,0.9415495448
1560,9.3,you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure.,2,4,3,0.01457697153,0.9854230285,0.9813994623,0.3999202251,0.4733422167,0.9898286412,0.883705416,0.9999228134,0.9089883017
1561,9.3,By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array.,2,4,3,0.01557964087,0.9844203591,0.980120034,0.5166169405,0.575760655,0.9914651814,0.9024168544,0.9999692531,0.9637459674
1562,9.3,"For applications in which a fixed-sized queue does not present a problem, you can use an array to represent a queue. ",1,4,2.5,0.02699434757,0.9730056524,0.9655546161,0.3151071668,0.3989063513,0.9924189587,0.9133219004,0.9999325761,0.9204996211
1563,9.3,Keep track of the front and the back of the array as you increase and decrease the elements inside the array.,4,4,4,0.009597182274,0.9904028177,0.9877537834,0.5876209736,0.6380770807,0.9908672574,0.8955804696,0.9999757312,0.9713843288
1564,9.3,"Declare the size of an array, and have special conditional statements (pointers) to make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there... this process saves resources.",5,4,4.5,0.02086961269,0.9791303873,0.9733699131,0.3554223478,0.43428882,0.9889220081,0.8733393939,0.9999749526,0.9704663219
1565,9.3,you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.,3,5,4,0.01741987467,0.9825801253,0.977771855,0.2487149686,0.3406374854,0.9890087714,0.8743314058,0.9999012229,0.8835306624
1566,9.3,Utilizing indexes for the front and the back.  Front is 0 and as you add items the back index is incremented.,4,4,4,0.0196917057,0.9803082943,0.9748729485,0.4180618227,0.4892641223,0.9931156442,0.9212874785,0.9999583657,0.9509085337
1567,9.3,"Declare two variables, â€œfrontâ€ and â€œrearâ€, to be used to denote which elements in the array can be accessed. Increment â€œrearâ€ whenever data is enqueued to the end and increment â€œfrontâ€ whenever data is dequeued.",5,4,4.5,0.03619134426,0.9638086557,0.9538190451,0.2182775587,0.3139242058,0.9908798288,0.8957242056,0.9999771152,0.973016301
1568,9.3,It is an array of fixed size. A queue of maximum N elements.,1,4,2.5,0.02602791786,0.9739720821,0.9667878017,0.406414777,0.479042136,0.9896692415,0.8818829136,0.9999470251,0.937536681
1569,9.3,"make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from",4,4,4,0.01407337189,0.9859266281,0.9820420665,0.3405134976,0.4212041231,0.9932841058,0.9232135902,0.9998951171,0.8763313013
1570,9.3,By using the beginning of the array as the removal point of the queue (or beginning of the queue) and the ith element as the end of the queue.,3,4,3.5,0.0132163167,0.9867836833,0.9831356879,0.5420448184,0.5980773375,0.9960321004,0.9546328815,0.9999689637,0.9634047034
1571,9.3,"add in data from the first element to the last, take out data from the first element to the last.",2,4,3,0.02790802717,0.9720919728,0.9643887407,0.1920565516,0.2909114364,0.994919668,0.9419138476,0.9998132373,0.7797857578
1572,9.3,you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom,3,4,3.5,0.02313798666,0.9768620133,0.9704754178,0.3016809523,0.3871228841,0.9881274139,0.8642543744,0.9999207565,0.9065630051
1573,9.3,"create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.",4,4,4,0.01259154081,0.9874084592,0.9839329158,0.4186591804,0.4897883911,0.9932296421,0.9225908779,0.9999594687,0.9522090031
1574,9.3,Keep track of the front and rear indexes. Either: 1)Dequeue items by shifting the array left 2)Use wrapped configuration,4,4,4,0.0281458497,0.9718541503,0.964085274,0.5412407517,0.5973716514,0.9960226673,0.9545250279,0.9999737166,0.9690089603
1575,9.3,"add items into a fixed size array, pull the items out by calling on them with the starting index, increase starting index so when it calls again its now the next index element in the array.",3,4,3.5,0.01875847578,0.9812415242,0.9760637704,0.3546461463,0.4336075897,0.9900679462,0.8864415175,0.9999346788,0.9229789669
1576,9.3,"To use and array to implement a Queue, element or item 0, should be the top element in the array. Every time an element is inserted, all the items in the array are pushed back one space. The top element is always removed first.",2,4,3,0.01851570606,0.9814842939,0.9763735499,0.4416176379,0.5099377959,0.9917501222,0.9056747354,0.9999711163,0.9659428213
1577,9.3,fixed size array with max N elements.  Need to keep track of front and rear of array.,4,4,4,0.01324701309,0.9867529869,0.9830965186,0.5725931525,0.6248879694,0.9909085944,0.8960530978,0.9999750868,0.9706245862
1578,9.3,"by keeping track of a front item and a rear item, or with a circular array that uses the modulo function",5,5,5,0.01855057478,0.9814494252,0.9763290567,0.4479153156,0.5154649294,0.9937768012,0.9288468404,0.999966964,0.9610469037
1579,9.3,"Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.",5,5,5,0.007000625134,0.9929993749,0.9910670477,0.620883584,0.6672698871,0.9959629301,0.9538420205,0.9998894633,0.869664863
1580,9.3,"A pointer based implementation of a queue could use a linear linked list with two external pointers, one to the front and one to the back",0,4,2,0.01707130671,0.9829286933,0.9782166355,0.2907514572,0.3775306534,0.9942905589,0.9347209067,0.9999440973,0.9340844926
1581,9.3,remove the element then shift the elements one space back,2,4,3,0.03965723515,0.9603427649,0.9493964919,0.1092362329,0.2182244916,0.9914373477,0.9020986167,0.9999410112,0.9304455992
1582,9.3,By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer doesn't leave the array.,5,5,5,0.02067017555,0.9793298244,0.9736243993,0.3453982174,0.4254911793,0.9928206306,0.9179144302,0.9999760082,0.971710942
1583,9.3,an array is a type of queue with a fixed length,0,3,1.5,0.03141343594,0.9685865641,0.9599157618,0.2899774611,0.3768513586,0.9858813353,0.8385737561,0.9998700581,0.8467839506
1584,9.3,"your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full",5,5,5,0.01316261292,0.9868373871,0.9832042151,0.5032140017,0.5639976156,0.9928516683,0.9182693006,0.9998445205,0.8166722308
1585,9.3,Boolean isFullQ(queue) ::= rear == MAX_QUEUE_SIZE-1,5,5,5,0.1862669587,0.8137330413,0.7623192455,0.1875062883,0.2869179147,0.9829599692,0.8051722157,0.9999006061,0.8828033893
1586,9.4,A list can have unlimited elements in it.  You can push a node onto the end of the list and pop the one in the front.,5,5,5,0.01193004847,0.9880699515,0.9847769945,0.4751303494,0.5393501026,0.9814953984,0.7884269939,0.9998072355,0.7727089582
1587,9.4,theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory. The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required. The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods. that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array. the downside to this method is after you use element one it is still in memory. or im crazy who knows,0,4,2,0.01986932755,0.9801306725,0.9746462991,0.2029417902,0.3004648256,0.987292383,0.8547070196,0.9998584252,0.833067408
1588,9.4,"By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list. Also, items can only be removed from the front of the list and can only be added to the back of the list.",5,5,5,0.01049518585,0.9895048141,0.9866079109,0.4954865277,0.5572156268,0.9916723982,0.9047860757,0.9999360617,0.9246096116
1589,9.4,You can use list to represent the items in a queue.,0,3,1.5,0.02458679676,0.9754132032,0.9686267041,0.4233355224,0.4938925653,0.9785338683,0.7545662369,0.9997806622,0.7413761169
1590,9.4,Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.,3,4,3.5,0.0183390379,0.9816609621,0.9765989825,0.4939919412,0.5559039085,0.987057746,0.8520242886,0.9998243139,0.7928463862
1591,9.4,Enqueue to the end of the linked list... dequeue items from the beginning (head) of the list.,5,5,5,0.01590907574,0.9840909243,0.9796996679,0.665550828,0.7064719276,0.9911429806,0.8987329606,0.9998406415,0.8120983917
1592,9.4,you use the first element in the list as the remove point for the queue and insert items at the end of the list.,5,5,5,0.01245421171,0.9875457883,0.9841081507,0.6078385711,0.6558209799,0.9854354011,0.833475152,0.9998727582,0.8499676303
1593,9.4,"Utilizing a front pointer and a back pointer.  The front poiner and back pointer points to the first item into the queue.  As you add items, the front remains the same but the back poiner 'next' points to the new item and the new item is assigned to become the 'new' back pointer.",5,4,4.5,0.0169402957,0.9830597043,0.9783838084,0.2983294129,0.384181418,0.9874091546,0.8560421308,0.9999085096,0.8921226039
1594,9.4,Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head.,5,4,4.5,0.02381205559,0.9761879444,0.969615291,0.4309562743,0.5005808898,0.9842084837,0.8194471491,0.9998198293,0.7875585392
1595,9.4,Check if list is empty and add elements to the list.,1,4,2.5,0.02851217985,0.9714878201,0.9636178285,0.4003723264,0.4737390016,0.9824836786,0.7997265303,0.9997380805,0.6911675192
1596,9.4,"make a linked list and add on to the front and delete from the back, keep track of both to do so.",5,4,4.5,0.01620107889,0.9837989211,0.9793270654,0.5031476021,0.5639393402,0.9884395668,0.8678233851,0.9998419273,0.8136145062
1597,9.4,by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue,5,4,4.5,0.01042985916,0.9895701408,0.9866912692,0.7381907701,0.7702241028,0.9872692545,0.8544425788,0.9998998896,0.8819585716
1598,9.4,throw in data at the head and take it out at the tail,4,5,4.5,0.02423661947,0.9757633805,0.9690735381,0.3285317123,0.4106883538,0.9794802879,0.7653871579,0.9998147977,0.7816256562
1599,9.4,"You create a list of nodes that had a head and a top pointer, and the functions are basically the same substituting pop and push with enqueue and dequeue",2,4,3,0.02014046907,0.9798595309,0.9743003165,0.3328741193,0.4144994511,0.9902651495,0.888696248,0.9997983668,0.762251806
1600,9.4,"fairly easy... singly linked list with a pointer to the head and tail of hte list.  deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer.  enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.",5,4,4.5,0.01444292068,0.9855570793,0.9815705141,0.436837703,0.5057427038,0.9911215117,0.8984874951,0.9998982752,0.8800550086
1601,9.4,"Use a linked list with 2 pointers, one to the front and one to the back. As long as back != front, the queue is not empty.",5,4,4.5,0.0208389163,0.9791610837,0.9734090824,0.4515397847,0.5186459312,0.988763182,0.8715234501,0.9998172305,0.7844942627
1602,9.4,"create a node with the input data, continue to add to the list.  when dequeueing - get the first elements data and set the next element in the list as the new first element",4,4,4,0.02068597078,0.9793140292,0.9736042442,0.3950503469,0.4690681861,0.9886277124,0.8699745545,0.9998298013,0.7993166005
1603,9.4,"A linked list with Stack principles. The Queue's top element is the element that is always being removed first. Must use nodes to contain each element, with a pointer to the top element, which also could  be called the head pointer.",2,4,3,0.02073848248,0.9792615175,0.9735372382,0.3640426099,0.4418543611,0.9886753907,0.8705196857,0.9997498017,0.7049881225
1604,9.4,linked list checking for front and rear.  Keep enqueueing elements until front equal to rear -1.,3,4,3.5,0.03506505489,0.9649349451,0.9552562152,0.3233554661,0.4061454406,0.9822392451,0.7969317907,0.9998298882,0.7994190946
1605,9.4,"a queue can be implemented in a list by keeping track of two pointers, a head and a tail",5,4,4.5,0.02317106724,0.9768289328,0.9704332063,0.47115466,0.5358608536,0.9813711103,0.7870059415,0.9997821927,0.743180761
1606,9.4,"each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.",5,5,5,0.01501268148,0.9849873185,0.9808434867,0.561345458,0.6150164721,0.9874037399,0.8559802224,0.9998244609,0.7930196485
1607,9.4,"Implement the operation dequeue() as the list operation remove(1) and the operation getFront(queueFront) as the list operation retrieve(1, queueFront)",3,5,4,0.0348610878,0.9651389122,0.9555164818,0.2525846958,0.3440337371,0.9801867213,0.7734641893,0.9998730614,0.8503251456
1608,9.4,remove the first element and reference the second element as the new head of the list.,3,4,3.5,0.02311229706,0.9768877029,0.9705081983,0.3624542952,0.4404603825,0.9867479882,0.8484826622,0.9997689752,0.7275958653
1609,9.4,By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.,5,5,5,0.011523664,0.988476336,0.9852955501,0.5278870463,0.5856518215,0.9855822562,0.8351542245,0.9998551033,0.8291505716
1610,9.4,you would have your list and add a back pointer so that your program knows where the end is,4,4,4,0.03370815516,0.9662918448,0.9569876492,0.2981158793,0.383994011,0.9843008178,0.8205028545,0.9997680268,0.7264775059
1611,9.4,"your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list",4,5,4.5,0.01368957758,0.9863104224,0.9825317965,0.5521594286,0.6069543876,0.9909400411,0.8964126444,0.9998292934,0.7987177328
1612,9.4,temp-&gt;next= NULL;       if (front)  { (rear) -&gt; next= temp;}       else front = temp;       rear = temp;   },3,4,3.5,0.1140574217,0.8859425783,0.85446021,0.08520125598,0.1971302835,0.9586392265,0.5271001583,0.9997292699,0.6807787754
1640,9.6,Push.,5,5,5,0.1254807711,0.8745192289,0.8398837638,0.4388239384,0.5074859159,0.9493104081,0.4204387885,0.9997346332,0.6871026947
1641,9.6,"push, which inserts something at the top of the stack.",5,5,5,0.1658914089,0.8341085911,0.7883188972,0.3376537561,0.4186942816,0.9460803264,0.3835075366,0.9997471467,0.7018575767
1642,9.6,The stack operation corresponding to enqueue in queues is the push operation.,5,5,5,0.1532241106,0.8467758894,0.8044826497,0.2912090719,0.3779322772,0.9413693592,0.3296445297,0.9997493748,0.7044847708
1643,9.6,"Push in a stack operation corresponds to the enqueue operation in queues.  These operations insert a new item into one end(the top and back, respectively) of the ADT.",5,5,5,0.1858137846,0.8141862154,0.7628975056,0.1222545132,0.2296499369,0.9313469706,0.2150532008,0.9997621393,0.7195355624
1644,9.6,The stack operation is almost the opposite of the enqueue operation.,0,5,2.5,0.1889740825,0.8110259175,0.7588648957,0.03396575153,0.1521636335,0.9345323881,0.2514737822,0.9997085001,0.6562888548
1645,9.6,push = enqueue pop = dequeue,5,4,4.5,0.18592453,0.81407547,0.7627561921,0.342970252,0.4233602845,0.9486556835,0.4129529719,0.999513002,0.4257747168
1646,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1647,9.6,Not sure what this question means.  You can use the stack 'push' operation and the enqueue operation to detect palindromes.,5,5,5,0.1595107317,0.8404892683,0.7964607822,0.07371543348,0.1870497941,0.9249829523,0.1422899766,0.9996967599,0.6424458601
1648,9.6,"Enqueue is the queue equivalent of push, and dequeue is the queue equivalent to pop.",5,5,5,0.1702214479,0.8297785521,0.7827936717,0.1677981764,0.2696211636,0.9352701463,0.259908967,0.9997533815,0.7092091354
1649,9.6,Push operation.,5,5,5,0.1187735796,0.8812264204,0.8484422883,0.414637953,0.4862591758,0.9452373286,0.3738690917,0.9997457886,0.7002562433
1650,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1651,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1652,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1653,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1654,9.6,"that would be the push operation, if it put the item at the end of the list.",5,5,5,0.1689873934,0.8310126066,0.7843683525,0.3041877747,0.3893229874,0.9387492073,0.2996869316,0.9997319036,0.6838842831
1655,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1656,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1657,9.6,the Push method in the stack operations.,5,5,5,0.1447220445,0.8552779555,0.8153314738,0.3048943579,0.3899431176,0.9433334121,0.3521005962,0.9996715885,0.6127659318
1658,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1659,9.6,enqueue corresponds with push dequeue corresponds with pop,5,4,4.5,0.1590905786,0.8409094214,0.7969969069,0.3599963784,0.438303201,0.9482155437,0.4079206181,0.9995596655,0.480796182
1660,9.6,"Push corresponds with enqueue, both very similarly place new elements into their stack or queue",5,5,5,0.1610534191,0.8389465809,0.794492279,0.1923978627,0.2912109868,0.9358028913,0.266000125,0.9997494618,0.7045873719
1661,9.6,FIFO: First in First out,0,3,1.5,0.2567353845,0.7432646155,0.6723999773,0.01373690739,0.1344098636,0.9404047379,0.3186154987,0.9995817641,0.5068528791
1662,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1663,9.6,Push,5,5,5,0,1,1,0.654492259,0.6967664157,0.964322203,0.5920766679,0.9999488294,0.9396641168
1664,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1665,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1666,9.6,push,5,5,5,0,1,1,1,1,1,1,1,1
1694,10.1,A hierarchy of nodes that are sorted in a particular order.  Each node has a ancestor (except for the root) and children (except for the leaves).,3,5,4,0.01710289717,0.9828971028,0.9781763253,0.451646328,0.5187394385,0.9932750643,0.9231102138,0.9999842509,0.9814300653
1695,10.1,A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.,5,5,5,0.004675805569,0.9953241944,0.9940335688,0.8381553292,0.8579576264,0.9808856254,0.7814551328,0.9999792067,0.9754823868
1696,10.1,A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.,4,5,4.5,0.01040875912,0.9895912409,0.9867181934,0.7012603283,0.7378122378,0.9790843289,0.7608599477,0.9999853234,0.982694617
1697,10.1,"A connected, undirected graph without cycles.",4,5,4.5,0.02751743793,0.9724825621,0.9648871413,0.2024048716,0.299993601,0.9873392239,0.8552425763,0.9999582233,0.9507405501
1698,10.1,"A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the ""base"" of the tree, it has no parents. A ""leaf"" is a node at the end of the tree which points to NULL.",5,5,5,0.01291453838,0.9870854616,0.9835207637,0.5856603384,0.6363563365,0.9929299954,0.9191648563,0.9999739147,0.9692424853
1699,10.1,a tree is a series of nodes where each node has links to other nodes.,1,5,3,0.01260656118,0.9873934388,0.9839137494,0.6295513511,0.6748771206,0.9816375928,0.7900527792,0.9999831678,0.9801529148
1700,10.1,"an infinite set of nodes that have a root and descendants, and each addition is a leaf.",2,5,3.5,0.01033759117,0.9896624088,0.9868090052,0.5800346136,0.63141894,0.9881382556,0.8643783329,0.9999852037,0.9825535404
1701,10.1,"A set of one or more nodes that are hierarchically organized, with one special â€œrootâ€ node.",3,5,4,0.009452700615,0.9905472994,0.9879381452,0.6682114601,0.7088070215,0.9861947344,0.842157016,0.999987366,0.9851031085
1702,10.1,A tree is a finite set of one or more nodes such that there is a specially designated node called the root.,2,5,3.5,0.01186519861,0.9881348014,0.9848597444,0.7011398673,0.7377065157,0.9791795491,0.7619486509,0.9999812883,0.9779368372
1703,10.1,one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees,5,5,5,0.01536118984,0.9846388102,0.9803987824,0.4284501672,0.4983814142,0.9792136249,0.7623382569,0.9999707207,0.9654764606
1704,10.1,A tree is a data structure where nodes are linked to each other in a hierarchical manner.,2,5,3.5,0.01659530401,0.983404696,0.9788240255,0.4671683013,0.5323622407,0.9816333457,0.7900042197,0.9999750031,0.9705259002
1705,10.1,a grouping of data in a parent to child structure,2,4,3,0.03045493364,0.9695450664,0.9611388319,0.06031704322,0.1752907467,0.9809759784,0.7824881869,0.9999763016,0.9720568761
1706,10.1,It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.,1,5,3,0.01102268696,0.988977313,0.9859348079,0.3775256872,0.4536877337,0.9813991776,0.7873268502,0.999953692,0.9453976789
1707,10.1,"A tree is a branched data structure with nodes, and leaves... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.",4,5,4.5,0.008680462837,0.9913195372,0.9889235377,0.6550796032,0.6972818961,0.9927534241,0.9171460221,0.9999868549,0.9845004261
1708,10.1,"It organizes data in a nonlinear, hierarchical form, where items can have more than one successor.  Partitioned into a root node and subsets are general subtrees of the root. ",5,5,5,0.01065772772,0.9893422723,0.986400504,0.4963872433,0.5580061365,0.9945451898,0.9376322382,0.9999853347,0.9827080075
1709,10.1,"A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n&gt;=0 disjoint sets T the n plus 1, where each element set is a tree.",5,5,5,0.008366584778,0.9916334152,0.989324053,0.7527198792,0.7829755213,0.9869512627,0.8508068084,0.9999798242,0.9762104102
1710,10.1,A finite set of nodes that starts with the root and terminates with leaves.,3,5,4,0.01553624868,0.9844637513,0.9801754034,0.4801385105,0.5437454965,0.9835429319,0.8118375397,0.9999150107,0.8997881108
1711,10.1,"a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element",1,4,2.5,0.03460925817,0.9653907418,0.9558378219,0.2771542668,0.3655971298,0.9875585127,0.8577498221,0.9999609791,0.95398992
1712,10.1,"A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.",4,5,4.5,0.008322060108,0.9916779399,0.9893808675,0.5702841282,0.6228614628,0.9942871799,0.9346822723,0.9999781731,0.9742636535
1713,10.1,"a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children",4,5,4.5,0.01107883453,0.9889211655,0.9858631624,0.3654284179,0.4430706103,0.9966887327,0.9621405099,0.9999872865,0.9850093574
1714,10.1,"A nonlinear, two-dimensional data structure.",0,4,2,0.07503050566,0.9249694943,0.9042594171,0.2373713404,0.3306817923,0.9867618012,0.8486405936,0.999885596,0.8651048753
1715,10.1,a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root,3,5,4,0.01065272093,0.9893472791,0.9864068928,0.607205689,0.6552655333,0.9830180747,0.8058365668,0.9999809129,0.9774941473
1716,10.1,"A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree",5,5,5,0.01232618093,0.9876738191,0.9842715208,0.601706624,0.6504392994,0.9951901005,0.9450058465,0.9999564781,0.9486827634
1717,10.1,A type of data structure in which each element is attached to one or more elements directly beneath it.,3,5,4,0.01456433535,0.9854356647,0.9814155864,0.2999070883,0.3855660589,0.9797086148,0.7679977413,0.9999794449,0.9757632539
1718,10.2,"Each level of a generation in the tree, some people do not count the root as a generation",4,4,4,0.02438181639,0.9756181836,0.9688882636,0.1968154907,0.2950881016,0.9944974703,0.9370866355,0.999943281,0.9331218777
1719,10.2,"The height of a tree is in terms of the levels of its nodes such that, if  the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes.",4,5,4.5,0.02441853285,0.9755814672,0.9688414127,0.3241554499,0.4068475433,0.990726813,0.8939746935,0.9999606482,0.9535998346
1720,10.2,The height of a tree is the number of nodes on the longest path from the root to a leaf.,5,5,5,0.008114516735,0.9918854833,0.9896456974,0.6876497865,0.7258669964,0.9972948153,0.9690701768,0.9999878645,0.9856909118
1721,10.2,The number of nodes on the longest path from the root of the tree to a leaf.,5,5,5,0.007454574108,0.9925454259,0.9904877988,0.6969624758,0.7340402435,0.9989947131,0.9885060173,0.9999896849,0.9878373583
1722,10.2,Height = the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.,5,5,5,0.01261979342,0.9873802066,0.9838968648,0.5150615573,0.5743955787,0.9940603742,0.9320890814,0.9999601038,0.9529579191
1723,10.2,the height of a tree is the length from the root to the furthest leaf,5,5,5,0.01311516762,0.9868848324,0.9832647564,0.6112704873,0.6588329885,0.9952614169,0.9458212455,0.9999194517,0.9050245233
1724,10.2,The height is the number of generations (levels) from the root.,4,5,4.5,0.02018541098,0.979814589,0.9742429696,0.4041039348,0.4770140339,0.9944774614,0.9368578628,0.9999538617,0.945597813
1725,10.2,The height of a tree is the number of levels between the root and the leaf farthest away from it.,5,5,5,0.01464784145,0.9853521585,0.9813090306,0.5550869703,0.6095237337,0.9974467905,0.9708077899,0.9999604893,0.9534124539
1726,10.2,is the depth of its furthest leaf,4,5,4.5,0.02820408344,0.9717959166,0.9640109665,0.4086357653,0.4809913781,0.9945416363,0.9375916092,0.9999708369,0.9656133837
1727,10.2,the number of nodes from root to leaf,3,4,3.5,0.01717054844,0.9828294516,0.9780900009,0.3785077929,0.4545496752,0.9948004588,0.940550865,0.9999395726,0.928749351
1728,10.2,the distance from the deepest leaf to the root,5,5,5,0.0207785964,0.9792214036,0.9734860519,0.5227939487,0.5811818833,0.9960106858,0.9543880369,0.9999709275,0.9657202681
1729,10.2,the number of generations or levels of a tree,4,5,4.5,0.02698737383,0.9730126262,0.9655635148,0.1507388651,0.2546491225,0.9925188091,0.9144635431,0.999960196,0.9530666571
1730,10.2,"The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.",2,4,3,0.03762471676,0.9623752832,0.9519900301,0.2053467184,0.3025755019,0.9902904186,0.8889851637,0.999964192,0.9577783663
1731,10.2,"the number of levels of a tree, like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes.",3,4,3.5,0.02548420429,0.9745157957,0.9674815923,0.2911699414,0.3778979345,0.9902505911,0.8885297947,0.9998875367,0.8673931936
1732,10.2,The number of nodes on the longest path from the root to the leaf.,5,5,5,0.007931947708,0.9920680523,0.9898786595,0.7320831418,0.7648637655,0.9989369588,0.9878456816,0.9999900407,0.988256894
1733,10.2,The height of a tree is the number of nodes on the longes path from the root to a leaf.,5,5,5,0.00921869278,0.9907813072,0.9882367443,0.6382375956,0.6825005708,0.9972948153,0.9690701768,0.9999878645,0.9856909118
1734,10.2,is equal to the number of levels.  levels between the root node and the terminal nodes.,4,5,4.5,0.02284753323,0.9771524668,0.9708460429,0.3133117557,0.3973306154,0.9968594391,0.964092288,0.9999281365,0.9152648384
1735,10.2,the number of generations or levels the tree has,4,5,4.5,0.02936816216,0.9706318378,0.9625255762,0.1356439292,0.2414011081,0.9935712752,0.9264969518,0.9999613417,0.9544175269
1736,10.2,"The height of a tree is the depth of its subtrees, that is, how many layers deep it is.",4,5,4.5,0.02441906929,0.9755809307,0.9688407281,0.3293172717,0.4113777971,0.9938576773,0.9297715397,0.9999710493,0.9658638861
1737,10.2,is the number of generations in the tree,4,5,4.5,0.025647223,0.974352777,0.9672735768,0.1494183838,0.253490207,0.9943411542,0.9352993899,0.9999689226,0.9633562321
1738,10.2,The number of nodes on the longest path from the root to a leaf.,5,5,5,0.007534205914,0.9924657941,0.9903861868,0.7241359949,0.7578889816,0.9987913944,0.9861813653,0.9999876851,0.985479388
1739,10.2,the number of distinct levels of separation,3,5,4,0.03454303741,0.9654569626,0.9559223211,0.2184986472,0.3141182433,0.9940660005,0.9321534109,0.9999552067,0.9471837069
1740,10.2,the height of a tree is how many levels of nodes that it has,4,5,4.5,0.0338922739,0.9661077261,0.9567527097,0.2314894795,0.325519599,0.9935273647,0.9259948991,0.9999512563,0.9425257622
1741,10.2,The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.,0,3,1.5,0.03013843298,0.969861567,0.9615426936,0.2601638436,0.350685548,0.9947413226,0.9398747286,0.9999488203,0.9396534133
1742,10.3,A leaf is a child of a parent node that has no children nodes of its own.,5,5,5,0.0218001008,0.9781998992,0.9721825897,0.7175360322,0.7520965488,0.9927947922,0.917619006,0.9999530185,0.944603505
1743,10.3,A leaf is a node with no children.,5,5,5,0.02163922787,0.9783607721,0.9723878671,0.7717177272,0.799648912,0.9923642584,0.9126964833,0.9999466525,0.937097267
1744,10.3,A node with no children.,5,5,5,0.01722037792,0.9827796221,0.9780264173,0.8950270414,0.9078708732,0.9960684531,0.9550485214,0.9999827863,0.9797030701
1745,10.3,A tree node with no children.,5,5,5,0.02101522684,0.9789847732,0.9731841063,0.8006540537,0.8250447714,0.9939869832,0.9312499631,0.9999829349,0.9798783705
1746,10.3,And end point of the tree... a node that does not have any children.,5,5,5,0.03520292044,0.9647970796,0.9550802958,0.6740638614,0.7139433597,0.9940443821,0.9319062353,0.9999604515,0.9533679033
1747,10.3,a node with no children.,5,5,5,0.01722037792,0.9827796221,0.9780264173,0.853474021,0.8714020193,0.9942145328,0.9338516597,0.999975429,0.9710280664
1748,10.3,A new item to the tree--a child,2,4,3,0.06487613916,0.9351238608,0.9172166131,0.2381315529,0.33134899,0.9918037265,0.906287622,0.999952773,0.9443141121
1749,10.3,"A leaf is a node with children, it is a terminating node.",0,4,2,0.03710740805,0.962892592,0.9526501276,0.663677454,0.7048277679,0.9925366276,0.9146672725,0.9999705955,0.9653288273
1750,10.3,The node with degree 0.,3,5,4,0.06063580513,0.9393641949,0.9226273731,0.5378063321,0.5943574458,0.9953418687,0.9467410941,0.9999658575,0.9597421688
1751,10.3,the node with degree 0,3,5,4,0.08552753925,0.9144724607,0.8908649703,0.3249483109,0.4075433948,0.9932865807,0.9232418867,0.9999437199,0.9336393944
1752,10.3,a leaf is a node with no children,5,5,5,0.03433412313,0.9656658769,0.9561889004,0.562754035,0.6162527045,0.9920366004,0.9089501932,0.999914059,0.8986658596
1753,10.3,the last child on any branch,4,5,4.5,0.09840649366,0.9015935063,0.8744311399,0.1504647881,0.2544085798,0.9932501507,0.9228253638,0.9999332223,0.9212616049
1754,10.3,The last value in the tree. A value with no children attatched.,5,5,5,0.03163892031,0.9683610797,0.9596280387,0.4706600308,0.5354267441,0.9953903684,0.9472956173,0.9999505472,0.9416896111
1755,10.3,a node with no children.,5,5,5,0.01722037792,0.9827796221,0.9780264173,0.853474021,0.8714020193,0.9942145328,0.9338516597,0.999975429,0.9710280664
1756,10.3,A node with no children.,5,5,5,0.01722037792,0.9827796221,0.9780264173,0.8950270414,0.9078708732,0.9960684531,0.9550485214,0.9999827863,0.9797030701
1757,10.3,A leaf is a node with no children,5,5,5,0.03433412313,0.9656658769,0.9561889004,0.6219941974,0.6682446127,0.9914434657,0.9021685671,0.9999328595,0.9208338453
1758,10.3,a node with degree 0.  last node in the tree and furtherest away from the root.,3,5,4,0.05605018139,0.9439498186,0.9284787302,0.4158239067,0.4873000236,0.9936247116,0.9271079187,0.999940122,0.9293970739
1759,10.3,an endpoint on a tree that contains no pointers or pointers that are set to null,4,5,4.5,0.04588103294,0.9541189671,0.9414547884,0.2174324393,0.3131824899,0.9953779209,0.947153298,0.9999376151,0.9264412494
1760,10.3,A leaf is a node with no children.,5,5,5,0.02163922787,0.9783607721,0.9723878671,0.7717177272,0.799648912,0.9923642584,0.9126964833,0.9999466525,0.937097267
1761,10.3,an element in a tree that has no children,5,5,5,0.02948272228,0.9705172777,0.962379395,0.4722745121,0.5368436876,0.9952242951,0.9453968115,0.9999326073,0.9205364405
1762,10.3,A node with no children.,5,5,5,0.01722037792,0.9827796221,0.9780264173,0.8950270414,0.9078708732,0.9960684531,0.9550485214,0.9999827863,0.9797030701
1763,10.3,a leaf is a node that has no children nodes,5,5,5,0.02042990923,0.9795700908,0.9739309845,0.6866337657,0.7249752895,0.996115009,0.95558082,0.9999510988,0.942339952
1764,10.3,a leaf is a node with no children,5,5,5,0.03433412313,0.9656658769,0.9561889004,0.562754035,0.6162527045,0.9920366004,0.9089501932,0.999914059,0.8986658596
1765,10.3,"The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.",5,5,5,0.03658080101,0.963419199,0.9533220897,0.3412020206,0.4218084028,0.9890124145,0.874373059,0.9999155054,0.9003713525
1766,10.4,"A tree data structure in which each done has at most two children, typical called left and right nodes.  The right node is usually greater than the left node and the parent node.",4,5,4.5,0.02770227194,0.9722977281,0.964651289,0.4951145053,0.5568891227,0.9854062774,0.8331421648,0.9999571966,0.9495299897
1767,10.4,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.",5,5,5,0.02362805605,0.976371944,0.9698500785,0.4858192801,0.5487312029,0.9889867253,0.8740793413,0.9999646209,0.958284085
1768,10.4,"A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",5,5,5,0.02457666397,0.975423336,0.9686396338,0.4605077505,0.526516633,0.9878911288,0.8615528001,0.9999651342,0.9588892764
1769,10.4,"A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.",5,5,5,0.02152425051,0.9784757495,0.9725345808,0.4674319029,0.5325935896,0.9767663843,0.7343576474,0.999954391,0.9462218525
1770,10.4,A tree in which each parent has a maximum of 2 children.,5,5,5,0.01370739937,0.9862926006,0.9825090555,0.6997044086,0.7364466907,0.9973212864,0.9693728345,0.9999491459,0.9400372575
1771,10.4,a tree where each node has at most 2 children.,5,5,5,0.02555972338,0.9744402766,0.9673852282,0.6146059632,0.6617603565,0.994132187,0.9329101557,0.9999374842,0.9262868214
1772,10.4,a tree with up to two children or a right subtree and/or a left subtree,5,5,5,0.04332262278,0.9566773772,0.9447193762,0.2930881083,0.3795814065,0.9957346917,0.9512324494,0.9999584116,0.9509625741
1773,10.4,"A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.",5,5,5,0.01445776224,0.9855422378,0.981551576,0.6865431666,0.7248957756,0.9930881919,0.9209736021,0.9999669114,0.9609848606
1774,10.4,a binary tree is a tree data structure in which each node has at most two children.,5,5,5,0.0211430788,0.9788569212,0.9730209643,0.6220733523,0.6683140828,0.9939203357,0.9304879469,0.9999488488,0.9396869898
1775,10.4,"a tree with only 2 joints, left and right",4,5,4.5,0.04696375132,0.9530362487,0.9400732158,0.1602864861,0.2630285566,0.9927512309,0.9171209466,0.9999487392,0.9395578196
1776,10.4,A binary search tree is a tree that also has the condition that each node may have at maximum 2 children,4,5,4.5,0.02353101969,0.9764689803,0.969973899,0.532673955,0.5898530341,0.9906346664,0.8929211326,0.9999507222,0.9418958965
1777,10.4,a tree where each parent can have at max two children.,5,5,5,0.02704173326,0.9729582667,0.9654941509,0.5007562637,0.561840591,0.9963353435,0.9581000226,0.9999433604,0.9332155364
1778,10.4,a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree,1,3,2,0.03304821253,0.9669517875,0.9578297507,0.2057651281,0.3029427176,0.995086738,0.9438240486,0.9999409321,0.9303523016
1779,10.4,a tree where each node can have at most 2 children.,5,5,5,0.02476072311,0.9752392769,0.9684047703,0.5863059163,0.6369229255,0.9938545416,0.9297356881,0.9999458899,0.9361981012
1780,10.4,"Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",5,5,5,0.02512276173,0.9748772383,0.967942801,0.4433924258,0.5114954319,0.9827736002,0.8030413587,0.9999699874,0.9646118191
1781,10.4,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",5,5,5,0.02313876152,0.9768612385,0.9704744291,0.4933679104,0.5553562302,0.9882654186,0.8658322553,0.9999664771,0.9604727383
1782,10.4,a tree that has a maximum of 2 children per node,5,5,5,0.0165733695,0.9834266305,0.9788520144,0.7724872828,0.8003243096,0.9960755696,0.9551298883,0.9999734427,0.9686859105
1783,10.4,a tree with elements that can contain at most two pointers,5,5,5,0.03740531206,0.9625946879,0.9522699954,0.2179208249,0.3136111197,0.9961639172,0.9561400143,0.999951325,0.9426066954
1784,10.4,A binary tree can have only two children for each node.,5,5,5,0.01994979382,0.9800502062,0.9745436224,0.6070555449,0.6551337599,0.9930441155,0.9204696524,0.9999647636,0.9584522831
1785,10.4,a tree where every parent has only two children,4,5,4.5,0.04460132122,0.9553986788,0.9430877288,0.3657312691,0.4433364065,0.9953552304,0.9468938656,0.9999581355,0.9506370266
1786,10.4,A tree where every node has no more than two children,5,5,5,0.04192823172,0.9580717683,0.94649865,0.5176067352,0.5766293447,0.9948213631,0.9407898749,0.99997556,0.9711824982
1787,10.4,"a binary tree is a special search tree where each node has either 2, 1, or 0 children",4,5,4.5,0.02868062258,0.9713193774,0.9634028919,0.4366961122,0.5056184372,0.9904253691,0.8905281247,0.9999153924,0.9002381174
1788,10.4,a binary tree is a special type of tree where each node can only have at maximum 2 children,5,5,5,0.02027708292,0.9797229171,0.9741259942,0.5919229388,0.6418526845,0.9930337216,0.9203508141,0.9999311902,0.9188654913
1789,10.4,A binary tree is a special type of inverted tree in which each element has only two branches below it.,4,5,4.5,0.02077066898,0.979229331,0.9734961675,0.493172735,0.5551849352,0.9930106863,0.9200874392,0.999968639,0.9630218067
1790,10.5,"A tree data structure where each node has a value, where the total order is defined on these values.  the left subtree contains only values less than the parent node, and vice versa for the right subtree.",5,5,5,0.01560437679,0.9843956232,0.9800884705,0.3792034984,0.4551602584,0.9906997712,0.8936655106,0.9999627916,0.9561271363
1791,10.5,A binary search tree is a binary tree where the value in any node 'n' is greater than the value in every node in n's left subtree but less than every node in n's right subtree.,5,5,5,0.01866567135,0.9813343287,0.976182191,0.4766438901,0.540678456,0.9959678206,0.9538979366,0.9999811414,0.977763618
1792,10.5,"A binary tree where the value in any node n is greater than the value in every node in n's left subtree, but less than the value of every node in n's right subtree.",5,5,5,0.01781725883,0.9821827412,0.9772647841,0.4299522638,0.4996997238,0.9950062283,0.9429035379,0.9999822861,0.9791132939
1793,10.5,"A binary tree where the search key in any node n is greater than the search key in any node in n's left subtree, but less than the search key in any node in n's right subtree.",5,5,5,0.02558785677,0.9744121432,0.9673493294,0.4550887346,0.5217606539,0.9943997026,0.9359688045,0.9999688959,0.963324778
1794,10.5,"A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively. ",5,5,5,0.01561170816,0.9843882918,0.9800791154,0.3940775394,0.4682144053,0.9912635477,0.9001114687,0.9999794542,0.975774158
1795,10.5,a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.,4,5,4.5,0.01346606016,0.9865339398,0.9828170097,0.5115264058,0.5712929662,0.9949363304,0.9421043578,0.9999809207,0.9775033459
1796,10.5,a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value,5,3,4,0.009687900543,0.9903120995,0.9876380249,0.5584515333,0.6124766299,0.9959239982,0.9533968915,0.9999848105,0.9820898553
1797,10.5,"Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.",3,4,3.5,0.0229370594,0.9770629406,0.9707318055,0.2373796105,0.3306890506,0.9848586805,0.8268811972,0.9999258438,0.9125615496
1798,10.5,"it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node's value, and the right subtree of a node contains only values greater than or equal to the node's value.",5,5,5,0.01692354679,0.9830764532,0.9784051804,0.3197992146,0.4030243096,0.9828847267,0.8043119272,0.9999691179,0.9635865099
1799,10.5,A binary tree with the data organized in a specific arangment,2,3,2.5,0.03315985203,0.966840148,0.9576872962,0.2522752583,0.3437621604,0.9918229127,0.9065069878,0.9999487292,0.9395459463
1800,10.5,"A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.",4,5,4.5,0.009622633457,0.9903773665,0.9877213071,0.5518000126,0.6066389474,0.9950665032,0.943592693,0.9999899429,0.9881415431
1801,10.5,a binary tree in which the data is in order from left to right.,4,4,4,0.02001708746,0.9799829125,0.9744577541,0.425709337,0.4959759348,0.991242529,0.8998711511,0.9999481029,0.9388074457
1802,10.5,a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.,3,4,3.5,0.01653188467,0.9834681153,0.9789049499,0.269955039,0.3592787543,0.9941859966,0.9335253905,0.9999677436,0.9619661336
1803,10.5,"a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.",5,5,5,0.009318947792,0.9906810522,0.9881088167,0.6014956236,0.6502541157,0.9949595118,0.9423694031,0.9999754965,0.9711075862
1804,10.5,"A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.",5,5,5,0.01878380775,0.9812161922,0.9760314463,0.432608813,0.5020312343,0.995458977,0.9480800551,0.9999835397,0.9805914723
1805,10.5,A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.,1,4,2.5,0.01883345842,0.9811665416,0.975968091,0.3943920135,0.4684904023,0.9927014738,0.9165520467,0.9999619317,0.9551131959
1806,10.5,it is similar to a binary tree.  The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree.  the values in all nodes in the left subtree of a node are less than             the node value  the values in all nodes in the right subtree of a node are greater    than the node values,5,5,5,0.01712232828,0.9828776717,0.9781515308,0.5093199015,0.5693564358,0.9836494051,0.8130549045,0.9999728574,0.9679957942
1807,10.5,"a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted",5,4,4.5,0.01741325855,0.9825867414,0.9777802973,0.3814530671,0.457134584,0.9925097771,0.9143602761,0.999963042,0.9564223877
1808,10.5,"A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.",5,5,5,0.01311570406,0.9868842959,0.9832640718,0.5743173361,0.6264011927,0.9939824723,0.9311983881,0.9999771014,0.9729999443
1809,10.5,"a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.",5,5,5,0.008967876434,0.9910321236,0.9885567916,0.6369169354,0.6813414983,0.9951889707,0.9449929291,0.9999868369,0.9844792135
1810,10.5,A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.,5,5,5,0.01696318388,0.9830368161,0.9783546026,0.5202827454,0.578977935,0.9941779491,0.933433379,0.9999545575,0.9464182245
1811,10.5,"a binary search tree is a special tree in which each node has at most two children, labeled left child and right child",1,4,2.5,0.01459443569,0.9854055643,0.9813771776,0.566244185,0.6193158216,0.9921646779,0.9104145725,0.9999626572,0.9559686659
1812,10.5,"it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.",5,5,5,0.01055037975,0.9894496202,0.9865374823,0.5732750893,0.6254864686,0.9897825608,0.8831785539,0.9999067071,0.889997212
1813,10.5,"Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.",2,3,2.5,0.0425183773,0.9574816227,0.9457456112,0.08453196287,0.1965428809,0.9846354372,0.8243287366,0.999927515,0.9145320341
1814,10.6,"For every node in the binary tree we first visit its left sub-tree (if its there) and then visit the parent node itself, and then the right sub-tree (if its there).",5,5,5,0.02865117788,0.9713488221,0.963440464,0.4498743713,0.5171842873,0.988185238,0.8649155075,0.9999799611,0.9763718504
1815,10.6,The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.,2,3,2.5,0.03799170256,0.9620082974,0.9515217481,0.1517774314,0.2555606163,0.9889161512,0.8732724298,0.9999476343,0.9382549361
1816,10.6,Traverses the binary tree in inorder.  It lets you visit the nodes in order according to their data values.,2,4,3,0.0355232954,0.9644767046,0.9546714902,0.2466986626,0.338867882,0.9859247616,0.8390702725,0.9999679562,0.9622167755
1817,10.6,Its used to visit nodes of a binary search tree in a search key order.,3,4,3.5,0.04480338097,0.955196619,0.942829896,0.08275519311,0.1949835055,0.9866316511,0.8471525185,0.999918883,0.9043539062
1818,10.6,(Left side of tree) (Root) (Right side of tree),5,5,5,0.09472751617,0.9052724838,0.8791255965,0.2415058315,0.334310413,0.9853115755,0.8320593882,0.9997437341,0.6978337278
1819,10.6,printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.,5,5,5,0.02288711071,0.9771128893,0.9707955411,0.4683680534,0.5334151987,0.9843705121,0.8212997062,0.9999682354,0.962545978
1820,10.6,"The in order is to go from left,root,right",5,5,5,0.03121238947,0.9687876105,0.9601723014,0.3804121614,0.456221037,0.9883759717,0.8670962684,0.999894685,0.8758217395
1821,10.6,"Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, itâ€™s parent, and itâ€™s right side sibling, then it goes up a level and repeats until it gets to the root.",4,5,4.5,0.02255392075,0.9774460793,0.9712206989,0.3682671487,0.4455620118,0.9891589191,0.8760481246,0.9999716246,0.9665422126
1822,10.6,traverse the left subtree. visit the root. traverse the right subtree.,5,5,5,0.02037322521,0.9796267748,0.9740033145,0.735080421,0.7674943164,0.9875595524,0.8577617098,0.999944135,0.9341289054
1823,10.6,postorder,0,3,1.5,0.4666769505,0.5333230495,0.4045099008,0.08874807507,0.2002431361,0.9586595191,0.5273321734,0.9996219819,0.5542742367
1824,10.6,in order starts with the root then does right child then left child recursively,0,3,1.5,0.04069012403,0.959309876,0.9480785028,0.4643444717,0.5298839171,0.9820393155,0.7946458888,0.9999600697,0.9529177311
1825,10.6,Left Child -&gt; Parent -&gt; Right Child,5,5,5,0.1241310239,0.8758689761,0.8416060711,0.2161758989,0.3120796919,0.9885762757,0.8693864514,0.9997293802,0.6809088599
1826,10.6,it goes from lowest to highest inside of the tree,1,3,2,0.04856318235,0.9514368176,0.9380323063,0.05541334301,0.1709870324,0.9876567485,0.8588730049,0.9999684247,0.9627691689
1827,10.6,"starting by displaying the node furthest to the right, then  the node, then the node on the right, in recursive order.",3,5,4,0.01619249582,0.9838075042,0.9793380176,0.483276993,0.5464999741,0.9964031214,0.9588749634,0.9999806276,0.9771577552
1828,10.6,It travels left to right,3,4,3.5,0.05703401566,0.9429659843,0.9272233359,0.2049622387,0.3022380647,0.9856753235,0.8362183133,0.9999336934,0.9218171065
1829,10.6,void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } },5,5,5,0.1325492859,0.8674507141,0.8308641828,0.1713630855,0.2727498928,0.9818862315,0.7928955975,0.9998959453,0.8773078504
1830,10.6,"the root is in the middle.  The left subtree is traversed first, then the root, and finally the right subtree.",5,5,5,0.00976151228,0.9902384877,0.9875440946,0.7952581048,0.8203090369,0.9881834687,0.864895278,0.9999754467,0.9710488971
1831,10.6,"a traversal that visits the left branch first, then the parent node, then the right branch, recursively.",5,5,5,0.01411813498,0.985881865,0.9819849478,0.5598034263,0.6136631137,0.9932057958,0.9223182302,0.9999811701,0.9777974266
1832,10.6,"Inorder traversal visits the left branch of a node (all the way to it's deepest left-most leaf) before visiting the node itself. After visiting the entire left branch and the node, it visits the node's right branch following the same pattern of left child, node, right child.",5,5,5,0.02137982845,0.9786201715,0.9727188665,0.2975172997,0.3834686698,0.9897086721,0.8823337441,0.9999807185,0.9772650048
1833,10.6,left middle right,5,5,5,0.1331210732,0.8668789268,0.8301345695,0.2912643552,0.3779807964,0.965305771,0.6033223263,0.9997819974,0.7429504759
1834,10.6,"You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.",5,5,5,0.0144957304,0.9855042696,0.9815031278,0.6404821277,0.684470476,0.9939287997,0.9305847201,0.9999794894,0.9758157505
1835,10.6,"you would go to the furthest down left most node, then to the root then to the right (if left and right exist) then you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process",5,5,5,0.02076357603,0.979236424,0.9735052183,0.4671735466,0.5323668442,0.9867064515,0.8480077509,0.9999446265,0.9347084292
1836,10.6,"it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node",4,4,4,0.02273654938,0.9772634506,0.9709876606,0.3614657521,0.4395927914,0.9895924203,0.8810045751,0.9999667781,0.9608276041
1837,10.6,"Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods. ",0,4,2,0.03249228001,0.96750772,0.9585391329,0.1800694019,0.280390959,0.9903212872,0.8893381009,0.9999587319,0.9513402748
1838,10.7,This is on the runtime order of log(n) where n is the number of nodes in the binary tree.,5,5,5,0.01546615362,0.9845338464,0.9802648463,0.6247013211,0.6706205098,0.9927824834,0.9174782732,0.9999514944,0.942806443
1839,10.7,In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.,5,5,5,0.02684372663,0.9731562734,0.9657468118,0.4854177237,0.5483787784,0.9899409643,0.8849896655,0.9999395083,0.9286734725
1840,10.7,n-1/2 is the algorithm to compare and find an element.,0,4,2,0.05772316456,0.9422768354,0.9263439667,0.249893263,0.3416716111,0.9865025928,0.8456769254,0.9999383862,0.9273504169
1841,10.7,At most its equivalent to the height of the tree.,5,5,5,0.02705991268,0.9729400873,0.9654709536,0.5081512928,0.5683308108,0.9872250265,0.8539368957,0.9999597573,0.9525493642
1842,10.7,Log(n),5,5,5,0.1170979142,0.8829020858,0.8505804744,0.3916634619,0.4660956991,0.9817251541,0.7910539136,0.9998124325,0.778836818
1843,10.7,O(log n),5,5,5,0.1532562375,0.8467437625,0.804441655,0.1015593857,0.2114869352,0.9835749515,0.812203637,0.9998689648,0.8454947877
1844,10.7,Depends on what half of the tree and the levels you have.,3,4,3.5,0.02305495739,0.9769450426,0.970581365,0.449853152,0.5171656643,0.9851439476,0.830142808,0.9999279576,0.9150538793
1845,10.7,O(log n) in balanced trees,5,5,5,0.0507978797,0.9492021203,0.9351807832,0.4576035142,0.5239677408,0.9838604628,0.8154680401,0.9999196813,0.9052952786
1846,10.7,n-1,2,3,2.5,0.6583672166,0.3416327834,0.1599088862,-0.05836266279,0.07113194393,0.9584800896,0.5252806601,0.9995353932,0.4521764693
1847,10.7,log(n),5,5,5,0.1817073226,0.8182926774,0.7681374419,0.09704979509,0.2075291098,0.9743966247,0.7072629183,0.9998137991,0.7804482872
1848,10.7,O(nlog(n)),0,5,2.5,0.1142217517,0.8857782483,0.8542505213,0.298514843,0.38434416,0.9819704347,0.7938583384,0.9998032311,0.7679874036
1849,10.7,nLog(n),0,4,2,0.1318912506,0.8681087494,0.8317038503,0.2716436684,0.3607607736,0.9817251541,0.7910539136,0.9997677759,0.7261817147
1850,10.7,logn,5,5,5,0.3445316553,0.6554683447,0.560369996,0.1776259392,0.2782464631,0.9584800896,0.5252806601,0.9995353932,0.4521764693
1851,10.7,"at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.",4,5,4.5,0.028198421,0.971801579,0.9640181918,0.4634828568,0.529127724,0.990596079,0.8924799427,0.9999533142,0.944952162
1852,10.7,O(n),2,4,3,0.1197960973,0.8802039027,0.8471375332,0.271219492,0.3603884967,0.9817251541,0.7910539136,0.9998827541,0.8617539013
1853,10.7,It takes at most 3 comparisons to find and element in a binary search tree,0,3,1.5,0.04195934534,0.9580406547,0.9464589484,0.1827496588,0.2827432766,0.9845316438,0.8231420117,0.9999274453,0.9144498906
1854,10.7,log (n)   where n equals the number of nodes.,5,5,5,0.03227484226,0.9677251577,0.9588165882,0.4945946634,0.5564328854,0.9849413265,0.8278261334,0.9999548449,0.9467570812
1855,10.7,it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level,5,5,5,0.02381432056,0.9761856794,0.9696124008,0.3039050996,0.3890748987,0.9874070863,0.8560184829,0.9999626001,0.955901306
1856,10.7,At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.,5,5,5,0.02302616835,0.9769738317,0.9706181005,0.4946247339,0.5564592767,0.9909995876,0.8970934716,0.9999524243,0.9439029178
1857,10.7,O(log n),5,5,5,0.1532562375,0.8467437625,0.804441655,0.1015593857,0.2114869352,0.9835749515,0.812203637,0.9998689648,0.8454947877
1858,10.7,log n comparisons,5,5,5,0.1334882379,0.8665117621,0.8296660593,0.1948622465,0.2933738441,0.970171875,0.6589590955,0.9998882138,0.8681914654
1859,10.7,(n^k)-1   where k is the height of the tree,0,3,1.5,0.03219753504,0.967802465,0.958915234,0.5439417958,0.5997422127,0.9887204291,0.8710346337,0.9999571149,0.9494336443
1860,10.7,"it takes h comparisons, where h is the height of the tree",5,5,5,0.03207457066,0.9679254293,0.9590721392,0.3584406376,0.4369378109,0.9882638746,0.8658146025,0.9999542977,0.9461118586
1861,10.7,2 way key comparison,0,2,1,0.18827492,0.81172508,0.7597570425,-0.06763586402,0.06299335335,0.9767493823,0.7341632544,0.9999178298,0.9031120633
1862,11.1,"The name of the class file, the parameters it must take to perform its function.  Also a brief description of what the class does.",1.5,3.75,2.625,0.08230865002,0.91769135,0.8949723441,0.3129346669,0.3969996649,0.9855147507,0.8343823987,0.999857984,0.832547168
1863,11.1,"access specifiers and functions, oftentimes a constructor.",3,3,3,0.06724959612,0.9327504039,0.9141880296,0.3803429306,0.4561602769,0.9930078021,0.9200544625,0.9997756568,0.7354742295
1864,11.1,"The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.",5,5,5,0.0669606328,0.9330393672,0.9145567532,0.4356227815,0.5046764325,0.9878959622,0.8616080633,0.9999135985,0.8981229108
1865,11.1,"Class is user defined.  It contains members, data and functions.  The keyword class is used and includes brackets ({})",2.5,5,3.75,0.0493530035,0.9506469965,0.9370244772,0.5423942208,0.5983839893,0.9921729931,0.9105096447,0.9998948593,0.8760272658
1866,11.1,Member functions and data members.,5,5,5,0.009306311607,0.9906936884,0.9881249408,0.9472655058,0.9537177672,1,1,0.9999129336,0.897338979
1867,11.1,the functions and variables used when the object is defined for the class.,5,3,4,0.07392030954,0.9260796905,0.9056760519,0.3690985739,0.4462917091,0.9938251484,0.9293996195,0.9998964677,0.8779237373
1868,11.1,"Data members, functions and function definitions, variables.",5,5,5,0.03909814358,0.9609018564,0.950109905,0.7441151738,0.7754236337,0.9917371041,0.9055258919,0.99988224,0.8611477397
1869,11.1,return type and input parameters,1.5,2.5,2,0.09273374081,0.9072662592,0.881669698,0.186681971,0.2861944557,0.9874754114,0.8567996805,0.9999228328,0.9090111779
1870,11.1,Constructor Data members Methods,5,4,4.5,0.1062005758,0.8937994242,0.864485719,0.5443158746,0.6000705215,0.9976073536,0.9726435938,0.9998984038,0.8802066597
1871,11.1,"Function members and member attributes, or in other words, the class variables and functions.",5,5,5,0.04207408428,0.9579259157,0.9463125389,0.7314831018,0.7643371427,0.9921927066,0.9107350397,0.9999233926,0.9096713128
1872,11.1,"The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.",4,4,4,0.06482881308,0.9351711869,0.9172770022,0.517000556,0.5760973337,0.9882836591,0.866040809,0.9998766272,0.8545296109
1873,11.1,The variables and function prototypes.,5,3,4,0.06274741888,0.9372525811,0.9199329072,0.5692280531,0.6219346024,1,1,0.9998465108,0.81901903
1874,11.1,public and private variables and initiations of functions included in the class.,4.5,2.5,3.5,0.0552060008,0.9447939992,0.9295559233,0.3989805579,0.4725175212,0.9942242569,0.9339628408,0.9998196125,0.7873028469
1875,11.1,The return value and the accepted value.,1.5,1.25,1.375,0.08906579018,0.9109342098,0.886350084,0.1560801566,0.2593368871,0.9989753796,0.9882849671,0.9999184727,0.9038701665
1876,11.1,"A class definition typically includes the class name, the classes constructor(s), and any extra functions and class variables.",5,2.5,3.75,0.06317251921,0.9368274808,0.9193904698,0.3340668678,0.4155462625,0.9849258655,0.8276493594,0.9999085805,0.8922061278
1877,11.1,"Parameters and their type, Class name, and return type, and the code to be executed in the class.",2,3.75,2.875,0.07761389017,0.9223861098,0.9009629614,0.2572424412,0.34812159,0.9812102691,0.7851669585,0.9999364766,0.92509881
1878,11.1,"data members, class variables, and functions",5,5,5,0.0401057601,0.9598942399,0.948824164,0.6880886555,0.7262521681,0.992521451,0.9144937496,0.9999205561,0.9063267241
1879,11.1,"Constructor, functions, and variables native to the class.",5,3,4,0.0686609745,0.9313390255,0.9123870796,0.4541734755,0.5209573801,0.9876010244,0.8582358811,0.9998623446,0.8376888539
1880,11.1,functions and data members,5,5,5,0.04547643661,0.9545235634,0.9419710622,0.8277928233,0.8488630116,0.9971142334,0.967005487,0.9999205601,0.9063314018
1881,11.1,data members and function definitions,5,5,5,0.03288936615,0.9671106339,0.9580324422,0.7399555445,0.7717729504,0.9996644236,0.9961631761,0.999914768,0.8995018617
1882,11.1,member functions and data members,5,5,5,0.03643769026,0.9635623097,0.9535047022,0.8774701357,0.8924621201,0.9996644236,0.9961631761,0.9999076513,0.8911105212
1883,11.1,"constructor, and function definitions.",3.5,2.5,3,0.07723748684,0.9227625132,0.9014432604,0.5137832761,0.5732737,0.9909381415,0.8963909257,0.999889907,0.8701880475
1884,11.1,class name data of class definition of functions and methods,5,3.75,4.375,0.07031148672,0.9296885133,0.9102809896,0.3023711145,0.3877286024,0.9855586932,0.8348848169,0.9999142348,0.8988732121
1885,11.1,"A class definition includes the definitions of the class' constructor(s) and any public or private functions. Of course, it also #includes the class header and any necessary C libraries",3,2.5,2.75,0.0684543848,0.9315456152,0.9126506926,0.2685474753,0.3580434112,0.9799352196,0.7705886352,0.9998916471,0.8722397181
1886,11.1,"Class name, {}, semicoln at the end of the defination, private and bublic followed by "": """,2.5,2.5,2.5,0.09106898308,0.9089310169,0.8837939656,0.1165724248,0.2246630731,0.978054869,0.7490895811,0.9998462713,0.8187365873
1887,11.1,"a constructor, private and public variables, and function prototypes",5,2.5,3.75,0.06810921431,0.9318907857,0.9130911378,0.3748490214,0.4513385679,0.9853630557,0.8326479878,0.9998586181,0.8332949168
1888,11.1,"Data variables and Functions, Data members",5,5,5,0.04974293709,0.9502570629,0.9365269133,0.6929107904,0.730484297,0.9980255306,0.977424836,0.9998725516,0.8497240762
1889,11.1,class definitions include the name of the class and type of parameters,1.5,3.75,2.625,0.08422237635,0.9157776237,0.8925303871,0.1603978276,0.263126275,0.9879937541,0.8627261695,0.9998582157,0.8328203325
1890,11.1,"class variables, class function prototypes",5,3.75,4.375,0.09330606461,0.9066939354,0.8809394001,0.3152658641,0.3990456315,0.9872189896,0.8538678731,0.9998746494,0.8521975641
1891,11.1,input  & return type elements,1.5,3,2.25,0.1290214658,0.8709785342,0.8353657591,0.1736927778,0.2747945386,0.9909375575,0.8963842487,0.9998603552,0.8353430635
1892,11.2,Public and private specifiers.,5,5,5,0.0139555335,0.9860444665,0.9821924309,0.8406403661,0.8601386098,0.991221798,0.8996341225,0.9999370158,0.9257345521
1893,11.2,"Public, Private, Restricted",4.5,4.75,4.625,0.06094533205,0.9390546679,0.9222324098,0.685988009,0.7244085436,0.9788153926,0.757785055,0.9999008554,0.88309735
1894,11.2,The access specifiers are public and private.,5,5,5,0.03357189894,0.9664281011,0.9571615153,0.7390930653,0.7710159988,0.9896643388,0.8818268583,0.9999312757,0.9189663876
1895,11.2,public private protected,5,4.75,4.875,0.1032663584,0.8967336416,0.8682298452,0.630900085,0.6760608319,0.9857390907,0.8369473977,0.9998106176,0.7766968319
1896,11.2,Public or Private.,5,5,5,0.02396506071,0.9760349393,0.9694200531,0.9326405525,0.9408822314,0.991371324,0.9013437333,0.999918441,0.9038327623
1897,11.2,public: the function or variable can be used outside the class private: the function or variable can only be used with the class,5,5,5,0.1035807729,0.8964192271,0.8678286453,0.2263763249,0.3210320578,0.9771871518,0.739168507,0.9996314227,0.5654060002
1898,11.2,Public and Private,5,5,5,0.04480147362,0.9551985264,0.9428323299,0.8223763704,0.8441092819,0.9919989772,0.9085200273,0.9999412089,0.9306786905
1899,11.2,public private and protected,5,4.75,4.875,0.05364519358,0.9463548064,0.9315475478,0.6868867278,0.7251973008,0.9907225506,0.8939259599,0.9998819213,0.8607719442
1900,11.2,Public Private,5,5,5,0.1199055314,0.8800944686,0.8469978928,0.7731271386,0.8008858767,0.9866676226,0.8475637989,0.9998272092,0.7962601864
1901,11.2,"Private, public, protected",5,4.75,4.875,0.05958080292,0.9404191971,0.9239735792,0.7444369197,0.7757060127,0.9890142457,0.8743939959,0.9998479899,0.8207629905
1902,11.2,The access-specifiers that can be used in a C++ class definition is private and public.,5,5,5,0.07663917542,0.9233608246,0.902206719,0.5361920595,0.5929406854,0.9843786141,0.8213923414,0.9998992609,0.8812173316
1903,11.2,public and private.,5,5,5,1.79E-07,1.00E+00,1.00E+00,0.9376598597,0.9452874076,0.9899964144,0.8856236562,0.9999542243,0.9460253085
1904,11.2,"static, long, unsigned",0,1.25,0.625,0.1216657162,0.8783342838,0.8447518581,0.06581582874,0.1801167353,0.9851114994,0.829771811,0.9997277536,0.6789909705
1905,11.2,"Private, Public, Protected, or Friend.",5,4.75,4.875,0.04985773563,0.9501422644,0.9363804279,0.7227051854,0.7566332369,0.9760952365,0.7266840552,0.9999198085,0.9054451951
1906,11.2,"A C++ class definition may include access-specifiers public, private, and static.",4,5,4.5,0.06424087286,0.9357591271,0.9180272269,0.5599274635,0.6137719745,0.9829027756,0.8045182898,0.9998717559,0.84878579
1907,11.2,"local, global, local-variable, function specific",1.5,2.5,2,0.1295146942,0.8704853058,0.8347363888,0.2127615809,0.3090831284,0.9774197539,0.7418279704,0.9998772793,0.8552984809
1908,11.2,"public, private",5,5,5,0.05151379108,0.9484862089,0.9342672645,0.7639323473,0.7928161023,0.9847333545,0.8254482774,0.9998035409,0.7683526868
1909,11.2,"Public, protected, and private.",5,4.75,4.875,0.02891933918,0.9710806608,0.9630982843,0.8059033155,0.8296517665,0.9775682868,0.7435262272,0.9998915558,0.8721321222
1910,11.2,"private, public",5,5,5,0.05151379108,0.9484862089,0.9342672645,0.7639324069,0.7928161546,0.9922712069,0.9116325749,0.9997333061,0.6855379798
1911,11.2,public - can be accessed by any of the program  private - can only be accessed by the class functions themselves and no outside functions or calls,5,5,5,0.08455312252,0.9154468775,0.8921083476,0.2224162221,0.3175564883,0.9721474149,0.6815464994,0.9998271841,0.796230601
1912,11.2,"public , private, protected",5,5,5,0.05958080292,0.9404191971,0.9239735792,0.6698649526,0.710258203,0.9813998719,0.7873347881,0.9998200033,0.7877637027
1913,11.2,public and private,5,5,5,0.04480147362,0.9551985264,0.9428323299,0.7828812599,0.809446545,0.9886446031,0.8701676748,0.9999214956,0.9074344952
1914,11.2,"public, private, protected",5,4.75,4.875,0.05958080292,0.9404191971,0.9239735792,0.6698649526,0.710258203,0.9813998719,0.7873347881,0.9998200033,0.7877637027
1915,11.2,"functions and data members can be given access-specifications of public, private, and friend. public access is given to any functions or members not given specific access rights.",5,4.75,4.875,0.0624974966,0.9375025034,0.9202518136,0.4286955297,0.4985967557,0.9741431921,0.7043652881,0.9999262839,0.913080399
1916,11.2,data member or data functions are access specifiers,0,1.25,0.625,0.1798709631,0.8201290369,0.7704806772,0.02304236963,0.142576768,0.9852568273,0.8314334222,0.9998928801,0.8736935917
1917,11.2,public or private,5,5,5,0.08660262823,0.9133973718,0.8894931331,0.7310602069,0.7639659905,0.9868398321,0.8495327628,0.9998936742,0.8746299063
1918,11.2,public and private,5,5,5,0.04480147362,0.9551985264,0.9428323299,0.7828812599,0.809446545,0.9886446031,0.8701676748,0.9999214956,0.9074344952
1919,11.2,public and private,5,5,5,0.04480147362,0.9551985264,0.9428323299,0.7828812599,0.809446545,0.9886446031,0.8701676748,0.9999214956,0.9074344952
1920,11.2,"public - can be accessed from outside the class private - accessible only from inside the class, not inherited protected - accessible only from inside the class, inherited",5,4.75,4.875,0.08935624361,0.9106437564,0.885979459,0.2610851526,0.3514941314,0.9645566271,0.5947569639,0.9998563999,0.8306793773
1921,11.2,public private protected,5,5,5,0.1032663584,0.8967336416,0.8682298452,0.630900085,0.6760608319,0.9857390907,0.8369473977,0.9998106176,0.7766968319
1922,11.3,ie. GradeBook myGradeBook();  call upon the class and then give it a name like shown,0,2.5,1.25,0.1190670133,0.8809329867,0.8480678605,0.2462500185,0.3384741311,0.9798616713,0.7697477191,0.9999148248,0.8995689065
1923,11.3,They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.,3,3.75,3.375,0.09777134657,0.9022286534,0.8752416017,0.2484610826,0.3404146633,0.9897286727,0.8825624227,0.9997671225,0.7254112894
1924,11.3,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
1925,11.3,Objects are initialized by a value given.  When an object is defined for a certain task.,2,2.5,2.25,0.07612413168,0.9238758683,0.9028639261,0.3386467993,0.4195658223,0.9929370954,0.9192460346,0.9998660873,0.8421019425
1926,11.3,"They are initialized with a "" . "" (dot) between the constructor and the object being created.",0,4.5,2.25,0.08335399628,0.9166460037,0.8936384592,0.3878481388,0.462747195,0.9874997816,0.8570783184,0.999903987,0.8867898865
1927,11.3,objectname classname();  to call a function from the class:  objectname.funciton();,0,2.5,1.25,0.1164613962,0.8835386038,0.8513926854,0.1643774956,0.2666190159,0.9834580016,0.8108664859,0.9999519295,0.943319512
1928,11.3,"If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.",5,5,5,0.08875393867,0.9112460613,0.8867480134,0.4406993091,0.5091318281,0.9724604579,0.6851256877,0.9999342023,0.9224170894
1929,11.3,classname objectname(input parameters);,3,2.5,2.75,0.1475532055,0.8524467945,0.8117188499,0.1776884496,0.2783013251,0.9951806878,0.9448982263,0.9999324591,0.9203617066
1930,11.3,When the class is called by the Constructor,2,5,3.5,0.09525501728,0.9047449827,0.8784524934,0.4087852538,0.4811225761,0.984658223,0.8245892589,0.999899558,0.8815676193
1931,11.3,"Constructors; default when not provided by user, or programmer specified constructors.",5,5,5,0.06854432821,0.9314556718,0.9125359229,0.6472611427,0.6904200534,0.9860469106,0.8404668666,0.9999108297,0.894858216
1932,11.3,Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.,1,3.75,2.375,0.1026594043,0.8973405957,0.869004332,0.2290096283,0.3233431668,0.989544466,0.8804562888,0.9998764397,0.8543085345
1933,11.3,"&lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;",1,3.75,2.375,0.1632243991,0.8367756009,0.7917220606,0.11310599,0.2216207695,0.9656316717,0.6070485235,0.9997702897,0.7291457405
1934,11.3,"variables are set to a given value, or 0 if none is given.",1,1.25,1.125,0.09323996305,0.9067600369,0.8810237471,0.212754488,0.3090769033,0.987410531,0.8560578684,0.9998671204,0.843320051
1935,11.3,"When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).",5,5,5,0.07666772604,0.923332274,0.9021702878,0.4430886805,0.511228851,0.9814232493,0.787602075,0.9999410771,0.9305232601
1936,11.3,"Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.",2,3,2.5,0.1001793742,0.8998206258,0.8721689052,0.2307529449,0.3248731822,0.9918342828,0.9066369881,0.9999442756,0.9342946783
1937,11.3,"If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class.  If no constructor is specified or found, c++ will use a default one with no parameters.  Gradebook myGradebook;  In this bit of code, the class Gradebook has been initialized as object myGradebook.",5,5,5,0.08924198151,0.9107580185,0.88612526,0.4366862774,0.5056098057,0.9717081938,0.6765246494,0.9999356609,0.9241369436
1938,11.3,objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.,3,3.75,3.375,0.09207415581,0.9079258442,0.882511343,0.2861488461,0.3734911889,0.985263634,0.8315112472,0.9999193562,0.9049118931
1939,11.3,They are initialized with a constructor.,5,5,5,0.06461781263,0.9353821874,0.9175462435,0.5693018436,0.6219993644,0.9937427352,0.9284573451,0.9999277331,0.9147891601
1940,11.3,"The value is specified after declaration,  It can initialized anywhere between the declaration and the corresponding }.",1,3.75,2.375,0.1062021852,0.8937978148,0.8644836653,0.2229276299,0.3180053235,0.9906101673,0.8926410214,0.9999565165,0.9487280353
1941,11.3,"with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.",4,5,4.5,0.07455641031,0.9254435897,0.9048643733,0.5551167727,0.6095498896,0.9866014682,0.846807421,0.9999135087,0.898017064
1942,11.3,initialized using the same name as the class,1,4,2.5,0.1380623579,0.8619376421,0.8238293811,0.185462594,0.2851242741,0.9934981296,0.9256606392,0.9997864724,0.7482270356
1943,11.3,they are initialized to a value dependent on the compiler,1,1.25,1.125,0.1072235107,0.8927764893,0.8631804314,0.0566809848,0.1720995735,0.9894723734,0.8796320155,0.9998752518,0.8529078699
1944,11.3,memory is allocated in accordance with their type and initialization input.,1,2.5,1.75,0.09073752165,0.9092624784,0.8842169178,0.2479753643,0.3399883745,0.9907432168,0.8941622476,0.9999409412,0.9303630527
1945,11.3,Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.,1,1.25,1.125,0.1096060872,0.8903939128,0.8601402112,0.2233410478,0.3183681581,0.9880468748,0.8633335271,0.9998754827,0.8531801514
1946,11.3,using constructor,5,5,5,0.1381981969,0.8618018031,0.8236560475,0.6919627786,0.7296522779,0.9968992844,0.9645478602,0.9998757095,0.8534475349
1947,11.3,by giving them a value,2,1.25,1.625,0.1123118401,0.8876881599,0.8566876107,0.1307289898,0.2370875298,0.9902640825,0.8886840492,0.9998141995,0.7809202959
1948,11.3,"By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.  Ex. Class myClass(x, y)",5,5,5,0.08503389359,0.9149661064,0.8914948731,0.4592206478,0.5253870121,0.9805438042,0.7775469092,0.9999188786,0.9043488006
1949,11.3,"objects are initialized by giving the object a type, name, and initial value",1,3.75,2.375,0.09608870745,0.9039112926,0.8773886865,0.08396694809,0.1960469978,0.9899432431,0.8850157202,0.9998026598,0.7673137081
1950,11.3,they are initialized to 0,1,1.25,1.125,0.1376191974,0.8623808026,0.8243948637,-0.02249542251,0.102610694,0.9877753973,0.8602295804,0.9998222095,0.7903650332
1951,11.3,"obj. are initialized by the variables that call them, when they are created within a class.   e.i. classname objectname etc. ",1,3.75,2.375,0.06858998537,0.9314100146,0.9124776633,0.4504796267,0.5177154874,0.9847494877,0.8256327378,0.9999290536,0.9163461773
1952,11.4,"Name of the function, parameters it must receive in order to perform and a return type.",5,5,5,0.01981788874,0.9801821113,0.9747119362,0.5606908798,0.614441984,0.9949791251,0.942593652,0.9999748379,0.9703310972
1953,11.4,a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in.,3.5,4,3.75,0.02540510893,0.9745948911,0.9675825198,0.3729481399,0.4496702663,0.9901012747,0.8868225805,0.999960433,0.9533460903
1954,11.4,"A function signature is the return type of a function, its name, and the number and type of its parameters.",5,5,5,0.01357525587,0.9864247441,0.9826776736,0.720500052,0.7546979098,0.9903114901,0.8892260856,0.9999526492,0.9441680991
1955,11.4,function prototype that contains functions and data members.,1,5,3,0.06574594975,0.9342540503,0.9161067156,0.4524278045,0.5194252984,0.9894508196,0.8793855791,0.9999710997,0.9659233022
1956,11.4,A function signature is a declaration of the function that includes the parameter types and the number of parameters.,5,5,5,0.01150268316,0.9884973168,0.9853223221,0.7080051303,0.7437317882,0.990338453,0.889534366,0.9999756651,0.9713064049
1957,11.4,the declaration of the function.,2,3,2.5,0.01913762093,0.9808623791,0.9755799729,0.5138276219,0.57331262,0.9944233389,0.9362390518,0.9999744096,0.9698259956
1958,11.4,"Includes the name, accepted parameters, and return type.",5,5,5,0.01656585932,0.9834341407,0.9788615975,0.6180440187,0.6647777531,0.9955399316,0.949005653,0.9999734941,0.9687465541
1959,11.4,its return type and its input parameters,5,5,5,0.06313115358,0.9368688464,0.9194432532,0.385563463,0.4607420577,0.987604617,0.858276957,0.9999399226,0.9291620007
1960,11.4,Contains the function name and its paramaters.  The return type is not included,5,5,5,0.02427858114,0.9757214189,0.9690199941,0.6350317597,0.6796869809,0.9951063141,0.9440478719,0.9999709425,0.9657379962
1961,11.4,"Return type, function name, and the parameter types",5,5,5,0.02472805977,0.9752719402,0.9684464494,0.6231060028,0.6692203846,0.9875567089,0.8577291987,0.9999311718,0.9188438791
1962,11.4,The function signature tells what the function parameters and includes all the function calls,2.5,5,3.75,0.02919077873,0.9708092213,0.9627519215,0.5019466281,0.5628853099,0.9904689546,0.8910264609,0.9999645468,0.9581967214
1963,11.4,"The function's name, as well as what it returns and what it accepts.",5,5,5,0.03408914804,0.965910852,0.956501494,0.3699271977,0.4470189476,0.9925982902,0.9153722939,0.9999733201,0.9685414239
1964,11.4,the body of the function that holds all the actual code,1,2.5,1.75,0.02724254131,0.9727574587,0.9652379154,0.3202338517,0.4034057673,0.9913226511,0.9007872298,0.9999650445,0.9587835698
1965,11.4,A function signature is the return type and accepted pass value type it takes,3,4,3.5,0.03619891405,0.9638010859,0.9538093859,0.3085285127,0.39313262,0.988529802,0.8688550917,0.9999713971,0.9662739731
1966,11.4,A function signature specifies the name and input variables of a function.,5,5,5,0.02297997475,0.9770200253,0.9706770446,0.5287001729,0.586365459,0.9922238052,0.9110906069,0.9999674949,0.9616728782
1967,11.4,A function signature is the function's parameters and their type and the name of the function.  The return type is not a part of the function signature.,5,5,5,0.0129288435,0.9870711565,0.9835025101,0.6741823554,0.7140473556,0.9919196538,0.9076130804,0.9999734782,0.9687278144
1968,11.4,the name of the function and what it accepts/ returns,5,5,5,0.03130632639,0.9686936736,0.9600524359,0.4173190594,0.4886122388,0.9936375796,0.9272550452,0.9999486966,0.9395075756
1969,11.4,"the unique identifier of a function, which includes input variables along with the function name, but excludes the output type.",5,4,4.5,0.01692485809,0.9830751419,0.9784035071,0.6217129827,0.6679978057,0.9930211428,0.9202069935,0.9999717156,0.9666495305
1970,11.4,"The order, number, and type of data items included inside the function parameters.",4.5,5,4.75,0.01307410002,0.9869259,0.9833171596,0.7008169293,0.7374230904,0.9791604744,0.7617305599,0.9999747562,0.9702347779
1971,11.4,"its the scope, type, and parameters of that function that give it it's properties and defines it against other functions.",5,5,5,0.02336454391,0.9766354561,0.9701863258,0.5714277029,0.6238651169,0.9895968882,0.8810556592,0.9999749574,0.9704720023
1972,11.4,"is the name of the fuction, return type, and parameters that are being used",5,5,5,0.01916247606,0.9808375239,0.9755482571,0.5329173803,0.5900666754,0.9965944154,0.9610621299,0.9999773944,0.9733454311
1973,11.4,"a function signature should include the name of the function, parameters, and a body.",2.5,5,3.75,0.01233202219,0.9876679778,0.9842640672,0.667473793,0.7081596108,0.9933451361,0.923911382,0.9999665796,0.9605936065
1974,11.4,the name of the function and the arguments passed to that function,5,5,5,0.01866728067,0.9813327193,0.9761801374,0.4668973684,0.5321244574,0.9943732862,0.9356667717,0.9999793089,0.9756028266
1975,11.4,"A function signature, used in a function's prototype, is the set of object types it take in as parameters, with or without names given for the objects.",5,5,5,0.01737940311,0.9826205969,0.9778234977,0.5385396481,0.5950010378,0.9768296325,0.7350807976,0.9999554443,0.9474638365
1976,11.4,function name and parameter are called function signature.,5,5,5,0.04811602831,0.9518839717,0.9386028849,0.5534035563,0.6080462916,0.9954677577,0.9481804502,0.9999726185,0.9677141911
1977,11.4,fuction name and parameters,5,5,5,0.07399910688,0.9260008931,0.9055755047,0.4687407613,0.5337423043,0.9898461929,0.883906093,0.9999075773,0.8910232313
1978,11.4,"The parameters needed, the return type, and name of the function.",5,5,5,0.008916735649,0.9910832644,0.9886220484,0.7684904337,0.7968164899,0.9863522623,0.8439581165,0.9999358824,0.924398174
1979,11.4,"the signature of a function includes the name of the function, the number and types of parameters, and the return type",5,5,5,0.005891382694,0.9941086173,0.9924824655,0.7532768846,0.783464375,0.9976477491,0.973105458,0.9999736177,0.9688923511
1980,11.4,"It is what uniquely separates overloaded functions. It includes the return type, and the parameter list of the function.",4.5,5,4.75,0.0159817338,0.9840182662,0.9796069546,0.6782287359,0.7175986464,0.9898053567,0.8834391914,0.9999724167,0.9674761972
1981,11.4,"function sig is, is what is the class recognizes as the main function, or rather its specification ",0,3.75,1.875,0.02781486511,0.9721851349,0.9645076176,0.3585513234,0.4370349539,0.9865799339,0.8465612079,0.999967284,0.9614241735
1982,11.5,A function that calls upon it self to solve a problem.  Each time it calls upon it self it splits up a problem into a simplier form until it reaches a 'base case' which is the most simplest form of the problem.,5,5,5,0.04271292686,0.9572870731,0.9454973616,0.4849736094,0.5479890032,0.9911668096,0.8990054102,0.9999136576,0.8981926438
1983,11.5,A function that calls itself to perform an opperation such as a factorial recursive function.,5,5,5,0.027792871,0.972207129,0.9645356826,0.7396900654,0.7715399537,0.9975421009,0.9718975255,0.9999705501,0.9652752571
1984,11.5,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
1985,11.5,A base case that calls upon itself until the problem becomes smaller and terminates.,2.5,5,3.75,0.03707993031,0.9629200697,0.9526851897,0.5555150509,0.609899437,0.9956252823,0.9499815135,0.9999684299,0.9627752936
1986,11.5,It's a function that calls itself. It runs multiple times until the base case is reached.,5,5,5,0.02631759644,0.9736824036,0.9664181656,0.680060029,0.719205874,0.9966257697,0.9614206208,0.9999004149,0.8825779456
1987,11.5,a function that calls itself untill it reaches a base case.,5,5,5,0.02011555433,0.9798844457,0.9743321083,0.7183020115,0.7527688077,0.9974055861,0.970336678,0.9999753421,0.9709256048
1988,11.5,"A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.",5,5,5,0.0349920392,0.9650079608,0.9553493849,0.4862856269,0.5491404904,0.9876022472,0.8582498628,0.9999329275,0.9209139538
1989,11.5,a function that calls itself until a base case is met,5,5,5,0.0327565074,0.9672434926,0.9582019729,0.6084547639,0.6563617793,0.9971219874,0.9670941429,0.9999120519,0.8962993214
1990,11.5,A function that calls itself. With each function call the problem is diminished.,5,5,5,0.01694589853,0.9830541015,0.9783766591,0.8562896252,0.8738731238,0.998326939,0.9808709989,0.9999566122,0.948840931
1991,11.5,A function that calls itself to perform a certain task,5,5,5,0.03359240294,0.9664075971,0.9571353517,0.6662818193,0.7071134795,0.99795552,0.9766243665,0.9999564665,0.9486691595
1992,11.5,A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.,5,5,5,0.02832651138,0.9716734886,0.9638547456,0.6645905972,0.7056291846,0.9948375865,0.9409753661,0.9999559035,0.9480052956
1993,11.5,"A function that calls itself, in order to solve a problem.",5,5,5,0.02554959059,0.9744504094,0.9673981579,0.7707303762,0.7987823671,0.9948344464,0.9409394628,0.9999454171,0.935640586
1994,11.5,"a function that calls itself over and over until it finds the simplest form of solution, or the base case.",5,5,5,0.03587263823,0.9641273618,0.9542257211,0.5713559985,0.6238021858,0.9928926305,0.9187376437,0.999927177,0.9141335484
1995,11.5,"A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.",5,5,5,0.03728562593,0.9627143741,0.9524227176,0.5823552012,0.6334555952,0.9941030732,0.932577282,0.999968553,0.9629204635
1996,11.5,"A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.",5,5,5,0.0467774272,0.9532225728,0.9403109694,0.5403615832,0.5966000524,0.9913366116,0.9009468474,0.999956088,0.9482228713
1997,11.5,"A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached.  At the base case, a definite answer is called and the function no longer recurses, but unwinds itself back through function calls to determine the answer to the original large problem.",5,4,4.5,0.03863191605,0.961368084,0.9507048217,0.549375236,0.6045108513,0.9878674319,0.8612818606,0.9999492632,0.9401756384
1998,11.5,a function that calls itself into a loop with a base case for a loop exit.,2.5,5,3.75,0.03881305456,0.9611869454,0.9504736848,0.4762208164,0.5403071469,0.996049657,0.9548336158,0.9999153159,0.9001479202
1999,11.5,a function that calls itself until the base cases are met.,5,5,5,0.02275925875,0.9772407413,0.9709586831,0.7142053246,0.7491733657,0.9974266594,0.9705776203,0.9999245273,0.9110092526
2000,11.5,A recursive function only knows how to solve base cases  A recursive function calls itself directly or indirectly until a base case is reached.,5,5,5,0.04498976469,0.9550102353,0.9425920663,0.527030766,0.5849003103,0.9931539826,0.9217258215,0.9999760127,0.971716324
2001,11.5,a function that calls on itself and uses a base case to stop the recursion,5,5,5,0.03732931614,0.9626706839,0.9523669679,0.5248916745,0.5830229446,0.9954706699,0.9482137463,0.9999236735,0.9100025414
2002,11.5,"a function that calls itself, and which eaach calls get closer and close to the base case.",5,5,5,0.03577333689,0.9642266631,0.9543524318,0.5835003257,0.6344606094,0.9926538245,0.9160072475,0.999956936,0.949222715
2003,11.5,A function that divides and conquers a problem.  There is a base case that will eventually be reached.  The function calls itself over and over until the base case is satisfied.,5,5,5,0.02743130922,0.9725686908,0.9649970434,0.632832706,0.6777569895,0.9945147456,0.9372841535,0.9999285542,0.9157573514
2004,11.5,a function that calls itself in the definition code,5,5,5,0.03448176384,0.9655182362,0.9560005076,0.614169836,0.6613775911,0.9972449421,0.9684999496,0.9999506334,0.9417912657
2005,11.5,A recursive function solves a problem by repeatedly calling itself. the initial problem is broken into successively smaller parts until a much simpler base case is reached. the solutions to each piece of the problem are then returned a step at a time.,5,5,5,0.04623878002,0.95376122,0.9409982952,0.4681305289,0.5332067362,0.9931632552,0.9218318407,0.9999386186,0.9276244939
2006,11.5,"It invoke by itself again ana again, unless it reach bas case",4,5,4.5,0.06733959913,0.9326604009,0.9140731838,0.3293735981,0.4114272317,0.9923799306,0.912875672,0.9998323341,0.8023030634
2007,11.5,"a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.",5,5,5,0.04302096367,0.9569790363,0.9451042998,0.4199287891,0.4909026585,0.9891664631,0.8761343794,0.9999285447,0.9157461305
2008,11.5,"A function that calls itself over and over again till a base case is reached, then it returns back to the original function.",5,5,5,0.03518646955,0.9648135304,0.9551012874,0.6177606583,0.6645290629,0.9917849005,0.9060723745,0.9999249622,0.911522039
2009,11.5,"a recursive function is a function that during execution, calls itself over and over until a base case is reached",5,5,5,0.0397669673,0.9602330327,0.9492564711,0.56058532,0.6143493398,0.9924918274,0.9141550474,0.9999507017,0.941871807
2010,11.5,A function that calls itself. Usually used to split a problem into several smaller problems of the same type.,5,5,5,0.03437894583,0.9656210542,0.9561317056,0.6379787326,0.6822733806,0.9972014525,0.9680027102,0.9999524782,0.9439665129
2011,11.5,function that calls it self till the base case is met,5,5,5,0.04397696257,0.9560230374,0.9438844241,0.474147141,0.5384871934,0.9954416799,0.947882289,0.9998940194,0.8750369516
2012,11.6,"Iteration, performers  a series of checks and loops.",5,5,5,0.07363367081,0.9263663292,0.9060418093,0.4635163844,0.5291571494,0.9874063976,0.8560106087,0.9999373504,0.9261290462
2013,11.6,The alternative method is to use loops in the program instead of a function which calls itself.,5,2.5,3.75,0.09192711115,0.9080728889,0.8826989753,0.292691946,0.3792337162,0.9922560276,0.9114590219,0.9999198238,0.9054632132
2014,11.6,An alternative to solving a problem using recursive functions is to solve the problem using iteration.,5,5,5,0.09103500843,0.9089649916,0.883837318,0.3652698696,0.4429314609,0.9927483352,0.9170878381,0.9999468213,0.9372963958
2015,11.6,"Iteration, this would be more efficient and has repetition structure.",5,5,5,0.06492203474,0.9350779653,0.9171580494,0.3709863424,0.4479485021,0.9865039262,0.8456921712,0.9999179992,0.9033118509
2016,11.6,One can use iteration or by using a simple while/for loop.,5,5,5,0.08430117369,0.9156988263,0.8924298399,0.4728594422,0.5373570494,0.9936085486,0.9269231181,0.9998857323,0.8652655241
2017,11.6,iteration,5,5,5,0.1247145534,0.8752854466,0.8408614745,0.5991028547,0.648154111,0.980687516,0.7791900424,0.9997649044,0.7227959412
2018,11.6,"Iteration. A while loop or a for loop will be able to accomplish the same desired outcome... It may be faster than recursion, but could also be harder to understand.",5,5,5,0.0655631423,0.9344368577,0.9163399819,0.3105818331,0.3949347091,0.9887706571,0.8716089176,0.9999168377,0.9019423662
2019,11.6,you can also solve the problem iteratively,5,5,5,0.1498432159,0.8501567841,0.808796746,-0.02590240352,0.0996205698,0.9906417882,0.8930025597,0.9998987707,0.8806392746
2020,11.6,iterative,5,5,5,0.3433564305,0.6566435695,0.5618696088,0.1859802604,0.285578602,0.980687516,0.7791900424,0.9997649044,0.7227959412
2021,11.6,Using iteration loops.,5,5,5,0.05866020918,0.9413397908,0.9251482771,0.709436357,0.744987899,0.9989684846,0.9882061325,0.9999790223,0.975264889
2022,11.6,Another alternative way to solve a problem instead of using recursive functions is by using iteration.,5,5,5,0.09073662758,0.9092633724,0.8842180585,0.4223080575,0.4929908145,0.9923856327,0.912940867,0.9999454581,0.9356890019
2023,11.6,"A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.",5,5,5,0.0943402648,0.9056597352,0.8796197378,0.1886519939,0.287923439,0.9897701951,0.8830371704,0.9999043408,0.8872070552
2024,11.6,iteration,5,5,5,0.1247145534,0.8752854466,0.8408614745,0.5991028547,0.648154111,0.980687516,0.7791900424,0.9997649044,0.7227959412
2025,11.6,Any recursive function can be solved using an iterative method.,5,5,5,0.124804616,0.875195384,0.8407465527,0.2808757424,0.368863269,0.995719518,0.9510589598,0.999926943,0.9138575479
2026,11.6,"Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.",5,3,4,0.07921785116,0.9207821488,0.8989162717,0.3246845901,0.4073119413,0.9892410457,0.8769871223,0.9999149624,0.8997311053
2027,11.6,"Using an iterative function, which repeats a specified operation or set of operations until a terminating point or base case is reached.  ",5,5,5,0.08345508575,0.9165449142,0.8935094667,0.3062088192,0.3910967496,0.9872057008,0.8537159357,0.9998972361,0.8788297875
2028,11.6,iteratively,5,5,5,0.491513133,0.508486867,0.3728183832,0.05430257693,0.1700121727,0.980687516,0.7791900424,0.9997649044,0.7227959412
2029,11.6,using an Iterative calls,5,5,5,0.1561972499,0.8438027501,0.8006888582,0.1527546197,0.256418242,0.9941884775,0.9335537558,0.9999677036,0.9619189486
2030,11.6,Iteration.,5,5,5,0.03487497568,0.9651250243,0.9554987605,0.7351933122,0.767593395,0.9930104673,0.9200849348,0.9999670438,0.9611409972
2031,11.6,iteration is the alternative way to solve a problem,5,5,5,0.09458702803,0.905412972,0.8793048625,0.2497843355,0.3415760113,0.9918922741,0.9073000336,0.9999100744,0.8939675785
2032,11.6,using an iterative solution instead,5,5,5,0.1836574078,0.8163425922,0.7656490901,0.2429885566,0.3356117212,0.9955803441,0.9494677111,0.9999163791,0.9014016249
2033,11.6,"Using an iterative solution.  For, while, or do while loop.",5,5,5,0.06607562304,0.933924377,0.9156860452,0.5433363318,0.5992108295,0.9923567541,0.9126106824,0.9998672787,0.8435067062
2034,11.6,the alternative way to solve a problem that could be solved using recursion is iteration.,5,5,5,0.08714109659,0.9128589034,0.8888060355,0.3408620954,0.4215100686,0.9920873649,0.909530611,0.9999317153,0.9194847029
2035,11.6,"Any problem solved recursively could be solved with an iterative function. Iterative replacements for recursive functions may be more difficult to program, but often lead to more efficient solutions to a problem. ",5,5,5,0.08584392071,0.9141560793,0.8904612606,0.2344344407,0.3281042332,0.987878317,0.8614063159,0.9999169959,0.9021288197
2036,11.6,by iteration,5,5,5,0.1169018149,0.8830981851,0.8508307015,0.5864728093,0.6370693986,0.9872516307,0.8542410764,0.9999579981,0.9504750002
2037,11.6,"itteration, like a for loop, a while loop, or a do while loop",5,5,5,0.09537184238,0.9046281576,0.878303422,0.14176552,0.2467736995,0.9789830303,0.7597017459,0.999797885,0.7616836985
2038,11.6,Iteration by using loops,5,5,5,0.1263235807,0.8736764193,0.8388083201,0.3826876879,0.4582181444,0.9938732216,0.9299492661,0.9999619796,0.955169702
2039,11.6,iterative functions,5,5,5,0.350726366,0.649273634,0.5524654083,0.1344993711,0.2403965909,0.9979799792,0.9769040225,0.9997813547,0.7421926629
2040,11.6,iteration,5,5,5,0.1247145534,0.8752854466,0.8408614745,0.5991028547,0.648154111,0.980687516,0.7791900424,0.9997649044,0.7227959412
2041,11.6,"the alt, way is to use a functions parameter in a call ""to"" function. ",2.5,2.5,2.5,0.08131289482,0.9186871052,0.8962429498,0.1923359931,0.2911566872,0.9847320564,0.8254334357,0.9998503113,0.8235002182
2042,11.7,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again.  An array that is not declared static will keep its original elements.,5,4.5,4.75,0.01748287678,0.9825171232,0.977691463,0.5706531405,0.6231853251,0.9959953308,0.9542124752,0.9999805949,0.9771191524
2043,11.7,A static array only has a specific size and it cannot grow. Also static arrays cannot be accessed outside the program which created it.,2,3.75,2.875,0.02123612165,0.9787638783,0.9729022395,0.5337650776,0.5908106538,0.9956435778,0.9501906952,0.9999480953,0.9387985519
2044,11.7,Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.,5,5,5,0.01323968172,0.9867603183,0.9831058736,0.7136316895,0.748669917,0.9967842153,0.9632322136,0.9999659169,0.9598121407
2045,11.7,Static can be initialized and non-static cannot in C++.,1,4,2.5,0.05440884829,0.9455911517,0.9305731075,0.3186263144,0.4019949181,0.991972461,0.9082168541,0.9999505545,0.9416982532
2046,11.7,An array declared static remains the same throughout the execution of the program.,0.5,4,2.25,0.03155738115,0.9684426188,0.9597320844,0.4157827795,0.4872639285,0.9968235118,0.9636815117,0.9999605931,0.9535348532
2047,11.7,a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.,3.5,5,4.25,0.02161037922,0.9783896208,0.9724246787,0.6718770266,0.7120240923,0.9963381294,0.9581318755,0.9999604203,0.9533310564
2048,11.7,"The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared.   //pass-by-reference???",3.5,3.75,3.625,0.02028679848,0.9797132015,0.9741135969,0.5332784057,0.590383528,0.9918671085,0.9070123025,0.9999648117,0.9585090839
2049,11.7,a static array has a predetermined size and that size cannot be altered,2,3.75,2.875,0.02865302563,0.9713469744,0.9634381063,0.3109520972,0.3952596699,0.9961192909,0.9556297773,0.999955205,0.9471816347
2050,11.7,Arrays declared static can not be changed.  One not declared static can be altered.,0.5,3.75,2.125,0.0318056941,0.9681943059,0.9594152316,0.5008358359,0.5619104273,0.995757804,0.9514967049,0.9999154688,0.9003282633
2051,11.7,"an array that is declared as static will retain the values stored in it's elements between function calls, and will not reinitialize them to default values.",5,4,4.5,0.01873725653,0.9812627435,0.9760908467,0.5002621412,0.5614069262,0.9917863833,0.9060893273,0.9999870813,0.9847674096
2052,11.7,An array that is declared static causes anything that is not initialized to be set to 0.,1,3.75,2.375,0.03324747086,0.9667525291,0.9575754926,0.4874748588,0.5501842153,0.9969741103,0.965403385,0.9999777641,0.9737813827
2053,11.7,A static array will have a null character at the end of the array.,2.5,2.5,2.5,0.0279840827,0.9720159173,0.9642916922,0.3741965294,0.4507659107,0.9969541533,0.9651752056,0.999915754,0.9006645347
2054,11.7,static arrays cannot be changed while normal arrays can be changed,0.5,3.75,2.125,0.03683286905,0.9631671309,0.9530004453,0.4045777321,0.4774298603,0.9953631572,0.9469844965,0.9998948051,0.875963385
2055,11.7,An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.,3,3,3,0.01925998926,0.9807400107,0.9754238281,0.4547557831,0.5214684402,0.9947123561,0.9395435399,0.9999696579,0.9642232359
2056,11.7,"A static array has class scope, allowing it to remain where other arrays might be recycled.",5,3.25,4.125,0.02250635624,0.9774936438,0.9712813923,0.4784080386,0.5422267543,0.9928609513,0.9183754382,0.9999713714,0.9662436321
2057,11.7,An array that is static does not change or uninitialize if called later unless explicitly acted upon.  It does not terminate or change across objects.  An automatic local array will be cleared and uninitialized if called later outside of it's specific scope.,5,4.5,4.75,0.02255576849,0.9774442315,0.9712183411,0.5677782893,0.6206622226,0.9931385933,0.9215498682,0.9999666114,0.9606310447
2058,11.7,"one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.",2,3.75,2.875,0.01970458031,0.9802954197,0.9748565202,0.6110323071,0.6586239505,0.9941365556,0.9329601044,0.9999737564,0.9690558601
2059,11.7,"a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced.",5,5,5,0.02031302452,0.9796869755,0.974080132,0.6181845665,0.6649011044,0.9925294446,0.9145851456,0.9999759701,0.971666061
2060,11.7,A static array retains any modified values after a function call. Automatic arrays reset to their initial values when the function ends.,5,3.75,4.375,0.02362215519,0.9763778448,0.9698576081,0.5916289687,0.6415946827,0.9957716036,0.951654483,0.999966777,0.9608263425
2061,11.7,"a static array is one that keeps its values and is not initialized every time a class function is called, it's data is not lost at function end.",5,4,4.5,0.0191860199,0.9808139801,0.9755182147,0.5558198094,0.6101669072,0.9928465107,0.9182103313,0.9999438223,0.9337601695
2062,11.7,an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.,0.5,4,2.25,0.01940274239,0.9805972576,0.975241672,0.6487236619,0.6917036279,0.9944413047,0.9364444637,0.9999606918,0.9536511747
2063,11.7,Values in an array that is not delcared as static will remain constant.  When an array is declared const values within the array can be manipulated.,0.5,3.75,2.125,0.01664018631,0.9833598137,0.9787667546,0.5491645932,0.6043259814,0.9938258025,0.9294070976,0.9999738445,0.9691597714
2064,11.7,the data of a static array cannot be changed,0.5,3.75,2.125,0.02713251114,0.9728674889,0.9653783164,0.270232439,0.3595222134,0.9933521109,0.9239911282,0.9999016992,0.8840922862
2065,11.7,"Standard arrays terminate when the functions that call them finish. A static array is not removed from memory when it's parent function terminates, leaving it available for other functions (or new instances of the original function).",5,2.5,3.75,0.0165631175,0.9834368825,0.9788650961,0.5761003494,0.6279660477,0.9941476478,0.9330869271,0.999983357,0.9803760025
2066,11.7,by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function.,4,4.5,4.25,0.02979725599,0.970202744,0.961978043,0.4683454037,0.5333953202,0.9941774626,0.9334278159,0.9999259023,0.9126304586
2067,11.7,static arrays can be called from anywhere,3,1.25,2.125,0.03457939625,0.9654206038,0.9558759265,0.4261569381,0.4963687702,0.9937084298,0.9280651128,0.9999384528,0.9274289882
2068,11.7,A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.,0.5,3.75,2.125,0.02037245035,0.9796275496,0.9740043032,0.5290589333,0.5866803237,0.9970125266,0.9658426188,0.9999128852,0.8972819074
2069,11.7,"a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function",3,3.75,3.375,0.02881628275,0.9711837173,0.9632297866,0.4374308884,0.5062633108,0.9911513374,0.8988285088,0.9999497807,0.9407857664
2070,11.7,"An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. A non-static array is allocated and freed every time that it comes in and out of scope.",5,3.75,4.375,0.02156877518,0.9784312248,0.9724777663,0.5251873136,0.5832824111,0.9857621133,0.8372106278,0.9999909624,0.9893436109
2071,11.7,static has a predetermined size that cannot be passed while vis versa.,2,3.75,2.875,0.02954727411,0.9704527259,0.9622970255,0.3554020822,0.434271034,0.9954639717,0.9481371629,0.9999604532,0.9533699394
2072,11.8,the type char[] has a  null ('\n' ) element at the very end.,5,5,5,0.01947635412,0.9805236459,0.9751477419,0.6469700933,0.6901646149,0.9926447767,0.9159037982,0.9999684954,0.9628525255
2073,11.8,a variable char is basically any non command key on the keyboard that you can press. A string is a collection of letters or numbers that is stored together to be used later. Comonly strings are used for words. Chars can be used for less but can have opperations performed on them in a useful way.,0,3.75,1.875,0.02689939737,0.9731006026,0.9656757746,0.2423283905,0.3350323289,0.9863844577,0.8443262239,0.9999733737,0.9686045669
2074,11.8,The programmer must provide the null terminating character in a string of characters using type char[] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.,5,5,5,0.0185636282,0.9814363718,0.9763124003,0.5989840031,0.6480498012,0.9870691293,0.8521544404,0.9999772591,0.9731858886
2075,11.8,String of characters are followed by a null statement.  type string is for example   string s;,5,5,5,0.03835833073,0.9616416693,0.9510539226,0.4430570602,0.5112010996,0.9900572217,0.886318898,0.9999583408,0.9508791793
2076,11.8,String contains a word where as char can contain phrases or a string of characters.,0,3.75,1.875,0.02430856228,0.9756914377,0.9689817375,0.2975408435,0.383489333,0.9898715892,0.8841964626,0.9999738415,0.9691562375
2077,11.8,a string is a variable with a single entinty of letters combined into one while in a char[] each letter is assigned a memory value and each has its own variable assigned i.e. char[0] char[1].,0,4,2,0.01834088564,0.9816591144,0.9765966248,0.5139608979,0.5734295891,0.9877699878,0.8601677308,0.9999762498,0.9719958281
2078,11.8,"A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared/limited.",5,2.5,3.75,0.0192758441,0.9807241559,0.9754035971,0.4868811965,0.5496631899,0.9889523559,0.8736863775,0.9999798548,0.976246533
2079,11.8,an array of characters stores a null character at the end,5,5,5,0.03008562326,0.9699143767,0.96161008,0.4152169228,0.4867673065,0.9910642681,0.8978329989,0.999979993,0.976409504
2080,11.8,"When you read a string of characters, you also read in the white space.  When you read characters declared char you only read the characters, no white space.",1.5,4,2.75,0.03574895859,0.9642510414,0.954383539,0.3522524238,0.431506748,0.9814381966,0.7877729753,0.9999727211,0.9678350703
2081,11.8,"Character arrays will terminate at any whitespace, including spaces. Strings terminate when they encounter the new line character.",1.5,5,3.25,0.03277665377,0.9672233462,0.9581762656,0.3647265136,0.4424545866,0.9906806752,0.8934471758,0.9999629927,0.9563642624
2082,11.8,The difference is that a string that is declared a variable of type char[] is each char is included in the array versus the string of characters that is read into a variable.,0,3.75,1.875,0.02308601141,0.9769139886,0.9705417394,0.4945530891,0.5563963979,0.9856057034,0.8354223091,0.9999709508,0.9657477062
2083,11.8,"An array of strings reads the string literals, meaning anything within ""quotes"". A char array reads a string as each individual character.",0,3.75,1.875,0.02404415607,0.9759558439,0.9693191256,0.4274279475,0.4974842669,0.9862058695,0.8422843293,0.9999517513,0.9431093282
2084,11.8,character arrays can call on individual letters were a string array can only call words.,0,3.75,1.875,0.03906285763,0.9609371424,0.9501549307,0.2421879619,0.3349090823,0.9880080149,0.8628892213,0.9999712346,0.9660823157
2085,11.8,The character array has an end of line character at the end of it.,4.5,5,4.75,0.02186542749,0.9781345725,0.9720992314,0.4506396949,0.5178559707,0.9900199926,0.8858932387,0.9999204319,0.9061802302
2086,11.8,"Type char[] may contain a null value as the last element, whereas type string will not.",5,5,5,0.01898771524,0.9810122848,0.9757712559,0.5142711997,0.5737019243,0.9977139598,0.9738624799,0.9999673991,0.96155986
2087,11.8,The variable of type string has a terminating character \0 at the end of it.,2.5,5,3.75,0.01339262724,0.9866073728,0.9829107118,0.5307906866,0.5882001906,0.9903309947,0.8894490919,0.9999826698,0.9795657153
2088,11.8,the one that is type string has an extra string member. The /0 at the end.,2.5,5,3.75,0.02294415236,0.9770558476,0.9707227546,0.4823480546,0.5456846948,0.9853203817,0.8321600732,0.9999728085,0.9679381196
2089,11.8,"a string has variable size and function calls available, while an character array usually has a static size.",2.5,4,3.25,0.0333661437,0.9666338563,0.9574240635,0.2739011645,0.3627420566,0.9899131391,0.8846715252,0.9999319832,0.9198005439
2090,11.8,a string char[] adds a null value to the end of the string.,5,5,5,0.01492208242,0.9850779176,0.9809590932,0.7489881516,0.7797003845,0.9962173472,0.9567509073,0.9999634211,0.9568693487
2091,11.8,"char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.",5,5,5,0.02121216059,0.9787878394,0.9729328144,0.2985163033,0.3843454417,0.9901013391,0.8868233167,0.9999725395,0.9676210336
2092,11.8,"the variable of type char[], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.",0,4,2,0.01931869984,0.9806813002,0.9753489122,0.4401787519,0.508674963,0.9880778446,0.8636876215,0.9999657222,0.9595826687
2093,11.8,"When the string is passed into the array char, individual characters are stored and can be manipulated.  Although when a word is stored into a string variable, it is stored as one word and not as individual characters.",0,4,2,0.02527576685,0.9747242332,0.9677475631,0.3263673484,0.4087888079,0.9892939411,0.8775919032,0.9999711265,0.9659548628
2094,11.8,"a string variable can change in size and is passed to functions by value, whereas a type char[] cannot change in size and is passed to functions by reference only",0,3.75,1.875,0.02923166752,0.9707683325,0.9626997464,0.2100278884,0.3066839133,0.9879291127,0.8619870906,0.9999748379,0.970331041
2095,11.8,"A string type string acts as a single object, with individual char entities accessible only through specific string class functions. A char array is less robust, but allows direct access to specific char entities.",1.5,3.75,2.625,0.03468495607,0.9653150439,0.9557412297,0.2778365016,0.3661958906,0.9875285458,0.8574071943,0.999969185,0.963665611
2096,11.8,"In arrays strings are stored as a characters (char[]), each character of string will be stored in each memory location of the array, while string of characters is only one memory location.",0,3.75,1.875,0.02454441786,0.9754555821,0.9686807805,0.4746716022,0.5389474849,0.9863398863,0.8438166153,0.9999669421,0.9610209781
2097,11.8,"an array of characters has one more element, its last element,the terminating element, or null, which doesnt exist in a variable of type string",5,5,5,0.02840614319,0.9715938568,0.9637531337,0.2587852478,0.3494756285,0.9889561147,0.8737293539,0.9999739945,0.9693365716
2098,11.8,A string of characters is a specific variable type that has no extra data at the end. A string of type char[] is all the characters and a null ('\0'),5,5,5,0.01492881775,0.9850711823,0.9809504988,0.6528992653,0.6953683307,0.987265676,0.8544016635,0.9999461461,0.9365001852
2099,11.8,a string of characters will have a null character or value at the end of the string,5,5,5,0.01661407948,0.9833859205,0.9788000675,0.4826983511,0.5459921312,0.9913734658,0.9013682213,0.9999790808,0.9753339259
2100,11.8,"when the characters are put in a char array, there is also a null terminating character added to the end, '\0'",5,5,5,0.02001869678,0.9799813032,0.9744557006,0.5171617866,0.5762388371,0.9921759416,0.9105433562,0.9999843392,0.9815341428
2101,11.8,"string of characters that is read into a variable of type string includes, ",0,3,1.5,0.03435873985,0.9656412601,0.9561574888,0.2891535759,0.3761282788,0.9894712905,0.8796196343,0.99997196,0.9669377103
2102,11.9,"For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself",3,4.5,3.75,0.02018374205,0.979816258,0.9742450993,0.2940998375,0.3804693469,0.9940453966,0.9319178344,0.9999828441,0.979771237
2103,11.9,Divide and coquer means dividing a problem into 2+ problems which are solved and then merged  back together for a final solution to the whole problem.,5,5,5,0.01210600138,0.9878939986,0.9845524748,0.7266955376,0.7601353547,0.9900320084,0.8860306214,0.999992044,0.9906189478
2104,11.9,The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.,4,4.5,4.25,0.01371347904,0.986286521,0.9825012978,0.5870763063,0.6375990555,0.9891291224,0.875707443,0.9999791545,0.9754207586
2105,11.9,"Divide elements,recur then conquer, which works in merge sort and quicksort.",3,4.5,3.75,0.02371633053,0.9762836695,0.9697374383,0.3602845371,0.4385561024,0.9949813611,0.9426192172,0.9999890695,0.9871116737
2106,11.9,"To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem.",4,4.5,4.25,0.01608908176,0.9839109182,0.9794699762,0.4729014635,0.5373939292,0.987889572,0.8615350002,0.9999849998,0.9823130349
2107,11.9,to divide one larger string/line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.,2,5,3.5,0.02222913504,0.977770865,0.9716351326,0.4358509481,0.5048766821,0.9855649011,0.8349557948,0.9999748524,0.9703481002
2108,11.9,"Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.",4,4.5,4.25,0.01316136122,0.9868386388,0.9832058123,0.5391448736,0.5955322118,0.9955551432,0.949179575,0.999986514,0.9840984917
2109,11.9,dived and conquer is the breaking up of a large complex program into small easy to solve components.,4,4.5,4.25,0.01755952835,0.9824404716,0.9775936538,0.4137353599,0.4854670183,0.981280486,0.7859697862,0.9999732012,0.9684012068
2110,11.9,Dividing a larger problem into the smallest incident of the problem and solving the smallest incident.,4,4.5,4.25,0.01957416534,0.9804258347,0.9750229326,0.5196585655,0.5784301259,0.990702516,0.8936968928,0.9999416188,0.931161969
2111,11.9,"Break up very large data structures into smaller sub-units, that are easier to manipulate.",4,4.5,4.25,0.03075265884,0.9692473412,0.9607589279,0.3452972472,0.4254025631,0.9931761355,0.9219791074,0.999983819,0.9809207542
2112,11.9,The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.,4,4.25,4.125,0.01508975029,0.9849102497,0.9807451452,0.3618312776,0.4399135935,0.9859358162,0.8391966656,0.999980893,0.977470659
2113,11.9,"The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. ",4,4.5,4.25,0.01504170895,0.9849582911,0.9808064471,0.4858030379,0.548716948,0.9935255374,0.9259740071,0.9999858202,0.9832804797
2114,11.9,"Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process.",4.5,4.5,4.5,0.009614765644,0.9903852344,0.9877313467,0.7369680405,0.7691509787,0.9947214399,0.9396473995,0.9999830687,0.9800360733
2115,11.9,The idea is to split the problem into half and solve for the smaller split-problems.,4,4.5,4.25,0.01364213228,0.9863578677,0.9825923378,0.6350345612,0.6796894395,0.9851362126,0.8300543699,0.9999886688,0.9866392716
2116,11.9,"The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.",5,5,5,0.008508503437,0.9914914966,0.9891429617,0.7018594742,0.738338076,0.9954965588,0.9485097479,0.9999960218,0.9953092354
2117,11.9,"Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm.",4,4.5,4.25,0.01499760151,0.9850023985,0.9808627291,0.518776536,0.577656016,0.9929456405,0.9193437357,0.9999909344,0.9893106232
2118,11.9,"It takes a large problem and splits it into two or more easier or faster solutions, and  makes for better readability. ",4,4.5,4.25,0.02035987377,0.9796401262,0.9740203512,0.4689072967,0.5338884635,0.9946042954,0.9383080239,0.9999935152,0.992353704
2119,11.9,it is the taking of a larger problem and splitting it into simpler smaller problems.,4,4.5,4.25,0.01588451862,0.9841154814,0.9797310033,0.5310778022,0.5884521765,0.9859757906,0.8396537137,0.9999641633,0.9577445476
2120,11.9,It divides the problem into singular units and works on the problem piece by piece until the problem is solved.,4,4.5,4.25,0.01670640707,0.9832935929,0.9786822554,0.5724006295,0.6247190023,0.9893569382,0.8783121824,0.9999711101,0.9659355562
2121,11.9,"smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.",5,5,5,0.01979935169,0.9802006483,0.9747355898,0.4510358572,0.5182036611,0.98744749,0.8564804408,0.9999933713,0.9921839673
2122,11.9,"a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.",4,4.5,4.25,0.02375137806,0.9762486219,0.9696927168,0.3256807327,0.4081862022,0.9951951954,0.9450640997,0.9999846913,0.9819493769
2123,11.9,"The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.",4,4.5,4.25,0.01298612356,0.9870138764,0.9834294194,0.5387064219,0.5951474062,0.9929999231,0.9199643772,0.9999932687,0.9920630612
2124,11.9,the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.,4,4.5,4.25,0.01312631369,0.9868736863,0.9832505337,0.5674101114,0.6203390926,0.9843677341,0.8212679439,0.9999948144,0.9938856524
2125,11.9,"dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together.",5,5,5,0.01397746801,0.986022532,0.982164442,0.6317560673,0.6768120816,0.9953514872,0.9468510673,0.9999918118,0.990345199
2126,11.9,"Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. If array have n element, first half have n/2 elements",5,5,5,0.01195579767,0.9880442023,0.984744138,0.5116835833,0.5714309124,0.9798292009,0.7693764671,0.9999794796,0.9758042032
2127,11.9,"divide the array in half, sort each half, then sort them back in one array",3,3,3,0.02834272385,0.9716572762,0.9638340582,0.1638215482,0.2661310907,0.9832904529,0.8089508122,0.9998191754,0.7867874582
2128,11.9,You take a class and break down everything it is supposed to do into easily managed functions.,1,4.5,2.75,0.02846693993,0.9715330601,0.9636755558,0.1892057508,0.2884094417,0.9806241336,0.7784653581,0.9999779663,0.9740198146
2129,11.9,"this is shown by the use of .cpp and header files.  by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file",1,4.5,2.75,0.02127760649,0.9787223935,0.972849304,0.2854455709,0.372873962,0.9833911454,0.8101020839,0.9999717122,0.9666454572
2130,11.9,"When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem.",5,4.5,4.75,0.009555101395,0.9904448986,0.9878074795,0.7515571713,0.7819550751,0.9849901536,0.8283843996,0.9999851976,0.9825463148
2131,11.9,it is the separating of large program into smaller classes then until target is reached.,1.5,5,3.25,0.02355647087,0.9764435291,0.9699414227,0.3551576138,0.4340564772,0.9867719239,0.8487563318,0.999979346,0.9756466527
2132,11.11,"It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list, this is done by reversing the divide and conquer technique",5,5,5,0.01804435253,0.9819556475,0.9769750076,0.3601514101,0.438439264,0.993257305,0.9229071621,0.9999904672,0.9887597061
2133,11.11,A merge sort works by removing all items to sepperate memory locations and merging them back together in order.,2,5,3.5,0.02321499586,0.9767850041,0.9703771523,0.3342788517,0.4157323094,0.9886921195,0.870710955,0.9999831803,0.9801676636
2134,11.11,"It divides the array into two halves, sorts each half, then merges the two halves together.",5,5,5,0.005875170231,0.9941248298,0.992503153,0.8175580502,0.839880501,0.9988851542,0.9872533716,0.99999678,0.9962032627
2135,11.11,"Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted. ",5,5,5,0.0191270113,0.9808729887,0.975593511,0.5163049102,0.5754868028,0.9942174254,0.9338847317,0.9999873725,0.9851107337
2136,11.11,"Merge sort uses the ""divide and conquer"" idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array. This is one of the best sorting algorithms besides Quicksort.",5,5,5,0.008765935898,0.9912340641,0.9888144721,0.662057519,0.703406038,0.9899827701,0.8854676537,0.9999879427,0.9857830868
2137,11.11,divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.,5,5,5,0.02317154408,0.9768284559,0.9704325978,0.3992624283,0.4727649037,0.9816691923,0.7904140729,0.9999751309,0.9706765424
2138,11.11,"Continually split array in half, sort each side of the halves, then put them back together once organized.",5,5,5,0.01274347305,0.9872565269,0.9837390468,0.5667085052,0.6197233305,0.9926890246,0.9164097083,0.9999217504,0.9077349076
2139,11.11,merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays.,5,5,5,0.01178264618,0.9882173538,0.9849650831,0.7275096178,0.7608498292,0.9915241441,0.9030910064,0.9999780683,0.9741400657
2140,11.11,By divide and conquer.,1.5,5,3.25,0.05384606123,0.9461539388,0.9312912363,0.2420887053,0.3348219701,0.9777750382,0.7458901269,0.9999698393,0.9644370911
2141,11.11,"Break a single array down into many arrays with individual elements, then sort the elements as you reconstruct them back into a single array.",5,5,5,0.02059882879,0.9794011712,0.9737154394,0.600428462,0.6493175253,0.992004051,0.908578039,0.9999735365,0.9687965719
2142,11.11,"Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it ""merges"" back as it keeps on sorting the algorithm as it does so.",5,5,5,0.01687246561,0.9831275344,0.9784703611,0.4835443497,0.5467346186,0.9931938893,0.9221820961,0.9999728361,0.9679706614
2143,11.11,"Merge sort divides the problem in half, organizes each half, then brings the two halves together again.",5,5,5,0.01132619381,0.9886738062,0.9855475265,0.5639215112,0.6172773356,0.9959568287,0.9537722599,0.9999851588,0.9825005089
2144,11.11,"Take an array and split it into two, then solve these simpler problems and merge the two answers in correct order.",5,5,5,0.01114815474,0.9888518453,0.9857747083,0.5414236188,0.597532144,0.9935711092,0.9264950531,0.9999858205,0.9832808219
2145,11.11,"A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.",5,5,5,0.01242524385,0.9875747561,0.9841451143,0.5850400925,0.63581198,0.9954110868,0.9475325017,0.999988816,0.9868128045
2146,11.11,"Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.",5,5,5,0.01411247253,0.9858875275,0.9819921733,0.7307077646,0.7636566708,0.9959799177,0.954036249,0.9999925515,0.9912173551
2147,11.11,Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array.,5,5,5,0.01139497757,0.9886050224,0.9854597568,0.7255132794,0.7590977502,0.9892115781,0.8766502034,0.9999828548,0.9797838331
2148,11.11,"It takes an array, splits itself in half, sorts the two halves (either by recursion or iteration) and compares them together giving a third array a full sorted list with both halves rejoined. ",5,5,5,0.01148176193,0.9885182381,0.9853490181,0.6896193027,0.727595535,0.9921676285,0.9104483076,0.9999891318,0.9871851484
2149,11.11,"it splits a large array into small arrays and recurs until the array is a size of 1, and then merges all of the arrays back together until the source array is completely sourted.",5,5,5,0.01304125786,0.9869587421,0.9833590668,0.6693584919,0.7098137097,0.9920261614,0.9088308386,0.9999862638,0.9838035214
2150,11.11,Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array.,5,5,5,0.01629704237,0.9837029576,0.9792046138,0.7653964758,0.7941010892,0.9921746011,0.9105280292,0.9999713056,0.9661661192
2151,11.11,"merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.",5,5,5,0.01191532612,0.9880846739,0.9847957806,0.6827969551,0.721607927,0.9936079927,0.9269167627,0.9999795387,0.9758738537
2152,11.11,"Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively. ",5,5,5,0.01620185375,0.9837981462,0.9793260766,0.6432675123,0.6869150585,0.9967115189,0.9624010366,0.999984455,0.9816706575
2153,11.11,"Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.",5,5,5,0.008216977119,0.9917830229,0.9895149557,0.7300311327,0.7630628273,0.9977279767,0.9740227429,0.9999878302,0.9856503944
2154,11.11,merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data,5,5,5,0.01821160316,0.9817883968,0.976761592,0.4100420177,0.4822255703,0.9913228278,0.9007892504,0.9999855035,0.9829070449
2155,11.11,"merge sort uses the divide and conquer strategy, sorting an array in parts, then merging the sorted parts back together.",5,5,5,0.01255083084,0.9874491692,0.9839848626,0.6243653893,0.6703256805,0.9942992504,0.9348202807,0.9999856167,0.9830404642
2156,11.11,"Divide recursuivly big array into two arrays, sort two array and merge them togather recuruivly.",5,5,5,0.02147477865,0.9785252213,0.9725977079,0.665235877,0.7061955121,0.994668929,0.9390470138,0.9999828202,0.9797430492
2157,11.11,"divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.",5,5,5,0.01208716631,0.9879128337,0.9845765088,0.6914900541,0.729237393,0.9890257339,0.8745253474,0.9999780492,0.9741175342
2158,11.11,Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.,5,5,5,0.01455235481,0.9854476452,0.9814308738,0.6376321316,0.6819691875,0.9883044492,0.866278513,0.9999886442,0.9866102749
2159,11.11,"merge sort splits an array into two halves and then sorts the two smaller arrays, and then merges them back together to form a sorted array",5,5,5,0.009032845497,0.9909671545,0.9884738896,0.8182148337,0.8404569247,0.9961060628,0.955478534,0.9999918738,0.9904183347
2160,11.11,"the merge sort continually divides the array (or set of containers) into halves, until it reaches the point where there is just one element left, then merges each of the sets of two sorted arrays (containers).",5,5,5,0.008898437023,0.991101563,0.9886453978,0.7189946175,0.7533766708,0.9943546371,0.9354535468,0.9999933626,0.9921737108
2161,11.11,merge sort splits an array of elements into smaller and smaller array's till the value of 1 is reached.,2.5,5,3.75,0.0149897933,0.9850102067,0.9808726926,0.6062543988,0.6544306371,0.988849556,0.8725110112,0.9999844649,0.9816823557
2162,12.1,A variable in memory that hold the address of another memory location to which it points too,5,5,5,0.02658963203,0.973410368,0.9660710421,0.6147068739,0.6618489204,0.9952692842,0.9459111964,0.9999377265,0.9265725475
2163,12.1,A pointer is a variable that contains the memory address of a given value.,4.5,5,4.75,0.02807843685,0.9719215631,0.9641712942,0.5350720286,0.5919576945,0.9956790872,0.9505966937,0.9999620687,0.9552747486
2164,12.1,A pointer is a variable that stores the address of another variable.,5,5,5,0.03165686131,0.9683431387,0.9596051456,0.3783296943,0.4543933675,0.9960484865,0.9548202325,0.9999329603,0.9209526796
2165,12.1,A pointer is a variable that holds a memory address or location of another variable.,5,5,5,0.02551436424,0.9744856358,0.9674431076,0.5648257136,0.6180709055,0.9960078618,0.9543557486,0.9999598885,0.9527040959
2166,12.1,A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.,5,5,5,0.03670853376,0.9632914662,0.9531590999,0.5949988365,0.6445522346,0.9923402714,0.9124222262,0.9999549469,0.9468773782
2167,12.1,a pointer points to a location in memory of a certain data type,4.5,5,4.75,0.02773946524,0.9722605348,0.9646038296,0.3894370198,0.4641416705,0.9969339429,0.9649441296,0.9999219571,0.9079786257
2168,12.1,A pointer is a variable that points to the address location of another variable.  Represented by (*).,5,5,5,0.02882820368,0.9711717963,0.9632145752,0.5135455132,0.5730650282,0.9947538112,0.9400175184,0.9999515118,0.9428269613
2169,12.1,A pointer is a variable that holds the address of a given variable (and of a given data type),5,5,5,0.03579038382,0.9642096162,0.9543306795,0.2323883921,0.3263085263,0.9938908012,0.9301502633,0.9999521649,0.9435970305
2170,12.1,pointer is a programming data type whose value points to another value stored in computer memory by its address.,5,5,5,0.0382707119,0.9617292881,0.9511657261,0.4400947392,0.5086012296,0.9923951216,0.9130493586,0.9999374071,0.9261959691
2171,12.1,A data type that points to a specific memory address.,5,5,5,0.03530967236,0.9646903276,0.9549440779,0.5947466493,0.6443309034,0.9938721117,0.9299365756,0.9999430389,0.9328364733
2172,12.1,Its like a variable except it only holds the address in memory of the variable not the physical information.,5,5,5,0.02492183447,0.9750781655,0.9681991886,0.4528467655,0.519792998,0.9932017243,0.9222716783,0.9999595341,0.9522861642
2173,12.1,a pointer is a reference to a memory location.,5,5,5,0.02566444874,0.9743355513,0.9672515964,0.5845445395,0.6353770597,0.9950641335,0.9435655985,0.9999052245,0.8882490233
2174,12.1,A pointer is an alias to an object in memory.,3.5,4.25,3.875,0.0289607048,0.9710392952,0.9630455008,0.4280537069,0.4980334623,0.9968055369,0.9634759947,0.9999241039,0.9105099533
2175,12.1,"A pointer is a variable that contains a memory address for something that you can use, such as a value, array, or even a function.",5,5,5,0.03214412928,0.9678558707,0.9589833808,0.3822447062,0.4578293631,0.9931413209,0.9215810535,0.9999404707,0.9298082723
2176,12.1,its a data type with a memory address and a value,1.5,5,3.25,0.03069996834,0.9693000317,0.9608261622,0.4789707065,0.5427205777,0.9947866746,0.9403932628,0.9999265046,0.9133406325
2177,12.1,a form of storing data that keeps the location in memory of an data type or object.,5,5,5,0.01928669214,0.9807133079,0.9753897548,0.5394519567,0.5958017221,0.9943625032,0.9355434845,0.9999523172,0.9437766006
2178,12.1,it contains a object's memory address,5,5,5,0.0469815731,0.9530184269,0.9400504748,0.4869201779,0.5496974018,0.9958635854,0.9527061598,0.9999077962,0.8912813217
2179,12.1,variable that contains the memory address of a data object.,5,5,5,0.02690589428,0.9730941057,0.9656674844,0.5983787179,0.647518575,0.9946442275,0.9387645886,0.9999699841,0.964607912
2180,12.1,A pointer is an element that references a memory location.,5,5,5,0.03306365013,0.9669363499,0.957810052,0.5411266685,0.5972715266,0.9964853559,0.9598151944,0.9999383739,0.9273359204
2181,12.1,"an object that points to a specific place in memory, where a variable or value is stored.",5,5,5,0.0294123888,0.9705876112,0.9624691421,0.3884062767,0.4632370426,0.9909248281,0.8962387062,0.9999407802,0.9301732641
2182,12.1,a variable that stores the address of a memory location,5,5,5,0.02542072535,0.9745792747,0.9675625929,0.6704664826,0.7107861337,0.9954856532,0.9483850593,0.9999434635,0.9333371261
2183,12.1,"A pointer is a variable that points to an address in memory, which contains some data. The pointer does not contain or point to any data, only a memory address.",5,5,5,0.02605766058,0.9739423394,0.9667498494,0.540381074,0.5966171584,0.9900378078,0.8860969296,0.9999464659,0.9368772319
2184,12.1,Pointer is a variable which have a memory address of a variable.,5,5,5,0.0288965106,0.9711034894,0.9631274141,0.4901082516,0.5524954027,0.9956661849,0.9504491748,0.9999338501,0.9220018177
2185,12.1,a pointer points to a location in memory where data is stored,5,5,5,0.04072415829,0.9592758417,0.9480350743,0.4174870849,0.4887597058,0.9969130609,0.9647053744,0.9999337813,0.9219206914
2186,12.1,a variable that holds the address of another variable and can access the contents of the variable.,5,5,5,0.02737933397,0.972620666,0.9650633649,0.3245992661,0.407237057,0.992364043,0.9126940203,0.9999517014,0.9430505408
2187,12.1,a pointer is a memory address that points to a data member,5,5,5,0.04350334406,0.9564966559,0.9444887718,0.4373951256,0.5062319237,0.9955208786,0.9487878097,0.999912545,0.8968807231
2188,12.1,A data type that stores the memory address of another variable.,5,5,5,0.02607280016,0.9739271998,0.9667305309,0.623821795,0.669848597,0.9897490146,0.8827950023,0.9999372333,0.9259910309
2189,12.1,its like a variable but only holds an address in meomrry not the physical address.,1,5,3,0.02852314711,0.9714768529,0.9636038341,0.4797831476,0.5434336136,0.991081683,0.8980321125,0.9999371054,0.9258402617
2190,12.2,"Try several sets of data on an algorithm that includes worst case, best case, and random cases.  Also try and run the same program on a different computer with the same specs",5,3.75,4.375,0.03120541573,0.9687945843,0.9601812001,0.2572013438,0.348085521,0.9858389904,0.8380896048,0.999952399,0.9438730952
2191,12.2,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
2192,12.2,time complexity using big O  logarthmic O(log n) linear O(n) exponential O(n^2) quadratic O(n^k) k&gt;=1 Polynomial O(a^n) n&gt;1,1.5,3,2.25,0.1076096892,0.8923903108,0.8626876591,0.05932701007,0.1744218478,0.9743204299,0.706391742,0.9999408192,0.9302192289
2193,12.2,Using some sort of counting principle of the number of operations performed in an algorithm.,5,3.75,4.375,0.03397399187,0.9660260081,0.9566484357,0.3603336215,0.4385991812,0.9942794706,0.9345941278,0.9999595031,0.9522496258
2194,12.2,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.,5,5,5,0.02118295431,0.9788170457,0.9729700823,0.4923083484,0.5544263096,0.9949750343,0.9425468798,0.9999792916,0.9755824543
2195,12.2,measuring the relationship of running an algorithm with different input sizes.,5,3.75,4.375,0.02321565151,0.9767843485,0.9703763158,0.5135409236,0.5730610002,0.997259457,0.9686659062,0.999985696,0.9831339933
2196,12.2,"Oposite of a theoretical assessment of the algorithm to determine runtime, but to run the code first to determine the the runtime.  This is not recommended because it is a limited test.  It does not include all possibilities of the data, nor the hardware used to process the data.",5,4.25,4.625,0.02828335762,0.9717166424,0.9639098108,0.4096572995,0.4818879238,0.9886634325,0.870382961,0.9999811694,0.9777965958
2197,12.2,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
2198,12.2,The experimental approach for measuring the running time is by using the Big O equation which tells you the running time.,1.5,3.75,2.625,0.02259510756,0.9774048924,0.9711681435,0.4786891043,0.5424734306,0.9958570385,0.9526313058,0.9999777946,0.9738173483
2199,12.2,"You create and run  the algorithm multiple times, while measuring the amount of time it takes, you then average the results.",5,5,5,0.02448922396,0.975510776,0.9687512091,0.4473120868,0.5149355079,0.9909887296,0.8969693264,0.9999759319,0.9716210549
2200,12.2,keep a value of how many operations it takes and add to this value each time a function is called.,3,3.75,3.375,0.03910827637,0.9608917236,0.9500969753,0.1691610664,0.270817299,0.994785882,0.9403842001,0.9999527543,0.9442919609
2201,12.2,BIG-OH,1.5,3,2.25,0.6687599719,0.3312400281,0.1466475008,0.03998039663,0.1574423644,0.9679302924,0.6333298829,0.9995399749,0.4575787449
2202,12.2,Running the program with various input data and measuring the running time with system time.,5,5,5,0.02270776033,0.9772922397,0.9710243962,0.5486868024,0.6039066501,0.9969122205,0.9646957658,0.999968967,0.9634086151
2203,12.2,"You run a program with different data sizes, like 10^x.  As you increase x and measure the completion speeds for the program, you can find patterns and attempt the measure the running time.  It's very important to keep the same software and hardware however, which makes experimental testing inferior to theoretical in the eyes of most.",5,3,4,0.019739151,0.980260849,0.9748124072,0.5091715455,0.5692262318,0.9882037473,0.865127135,0.9999854062,0.9827922912
2204,12.2,to run the program through and see how many times each thing is called and the runtime of each function is based on that.,5,3.5,4.25,0.03450864553,0.9654913545,0.9559662059,0.2233271152,0.3183559303,0.9928156541,0.9178575309,0.9998952698,0.8765113863
2205,12.2,the number of times a specific segments get called per unit work.,3,3,3,0.04321068525,0.9567893147,0.9448622109,0.1714918166,0.2728628732,0.9941319479,0.9329074223,0.9999496704,0.9406557709
2206,12.2,"For every call into memory, add/ multiply it into an equation of type O(n)",1.5,3,2.25,0.05037152767,0.9496284723,0.9357248178,0.006916228682,0.1284237203,0.9889091927,0.8731928687,0.9999686597,0.9630462918
2207,12.2,"adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time, then you can calculate the efficiency by the speed of the computers cpu.",3,4.25,3.625,0.02633166313,0.9736683369,0.9664002161,0.3503217995,0.4298123428,0.9940549336,0.9320268767,0.9999752807,0.970853156
2208,12.2,Big O(h) notation,1.5,3,2.25,0.1230948567,0.8769051433,0.8429282433,0.03116686828,0.149707204,0.9891846118,0.8763418835,0.9998878318,0.8677411163
2209,12.2,the experimental approach measures actual running time in t.  t= seconds.,5,5,5,0.03783404827,0.9621659517,0.9517229185,0.4621204734,0.5279320333,0.9938349877,0.929512118,0.999963993,0.9575437165
2210,12.2,running an algorithm on a specific set of data,5,3,4,0.04285389185,0.9571461082,0.9453174873,0.312813133,0.3968930011,0.9911220053,0.8984931393,0.999941645,0.9311928699
2211,12.2,"In experimental terms, the running time of an algorithm is measured by the number of operations required to complete the function. This number can usually be expressed in big-O notation.",2.5,3.75,3.125,0.02952367067,0.9704763293,0.9623271439,0.4921441674,0.5542822167,0.988917708,0.8732902295,0.9999794235,0.9757380308
2212,12.2,"run the code for n-times and get average values, drop the constant and lowest number. for example if             f(x) = 3n +1 the running time will bef  f(x) = O(n)",2.5,4.5,3.5,0.06024181843,0.9397581816,0.9231301088,0.1733513176,0.2744948574,0.9855085282,0.8343112531,0.999971888,0.9668528298
2213,12.2,to measure the actual time of the program to run. and calculate the running time using the input and operations done,5,5,5,0.01785993576,0.9821400642,0.9772103273,0.5662986636,0.6193636346,0.9927920544,0.9175877038,0.9999412812,0.9307639924
2214,12.2,adding up the number of operations performed based on the worst case possible.,2,3,2.5,0.04461503029,0.9553849697,0.9430702356,0.1799980551,0.2803283418,0.9951273243,0.9442880927,0.9999652698,0.959049182
2215,12.2,the experimental approach would be to run through the algorithm and see how long it takes,5,5,5,0.02917248011,0.9708275199,0.9627752709,0.3002029061,0.3858256824,0.9934977457,0.9256562497,0.9999737043,0.9689944741
2216,12.2,"trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.",5,5,5,0.02794837952,0.9720516205,0.9643372503,0.4311556816,0.5007558989,0.9916689322,0.9047464465,0.9999745797,0.9700265779
2217,12.2,running the input with various inputs measuring the running time with  system time,5,3.75,4.375,0.03534853458,0.9646514654,0.9548944889,0.4082786739,0.4806779781,0.9968961384,0.9645118901,0.9999567359,0.9489868247
2246,12.4,"it scans the list and selects the smallest(largest) element and places it in the front, increment the curPtr by one, scan the list again for the next smallest(largest) element and place it in with respect with the other sorted elements.",5,5,5,0.01034384966,0.9896561503,0.9868010193,0.4625871778,0.5283416346,0.9913563213,0.901172199,0.9998924351,0.8731688809
2247,12.4,"Selection sort searches the array for the lowest value and swaps it with the first value in the array. Then searches for the next lowest value and swaps it with the second item in the array, and so on.",5,5,5,0.01206159592,0.9879384041,0.9846091372,0.51639539,0.5755662121,0.996052859,0.9548702261,0.999923094,0.9093191469
2248,12.4,Compare the largest element to the front element and swap data according to value if needed.,4,3.75,3.875,0.02728903294,0.9727109671,0.9651785911,0.193455562,0.2921392727,0.9914369967,0.9020946035,0.9998623184,0.8376579893
2249,12.4,"Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.",1,3,2,0.01496338844,0.9850366116,0.9809063858,0.3889879584,0.4637475534,0.9940667735,0.9321622484,0.9998457624,0.8181365559
2250,12.4,"Iterate through the list (assume list of integers), find the smallest one, and put it in a separate ""sorted"" list... then traverse again and find the next smallest, and move it to the sorted section... and repeat until you run out of elements to sort.",5,4.5,4.75,0.01534414291,0.9846558571,0.9804205347,0.38470456,0.4599882448,0.9848913137,0.8272543098,0.9998092034,0.7750294337
2251,12.4,selection sort selects the smallest element out of the list then the second smallest ....and sorts them acordingly.,5,5,5,0.01801675558,0.9819832444,0.9770102218,0.4819815159,0.5453630034,0.9932706224,0.9230594274,0.9998474476,0.8201235557
2252,12.4,You select the smallest element and place it on the left.  You select the smallest element and sort it with respect the the item already on the left.  You continue this till the end of the collection of items.,5,5,5,0.01216262579,0.9878373742,0.9844802208,0.5081603527,0.5683387622,0.9950954373,0.9439235117,0.9999349699,0.9233221791
2253,12.4,"A selection sort scrolls through the data structure looking for the lowest (or highest) unsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.",5,5,5,0.01275163889,0.9872483611,0.983728627,0.3833554685,0.4588042196,0.9923101956,0.9120783544,0.9998173891,0.7846812623
2254,12.4,Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements.,0,3.75,1.875,0.01270347834,0.9872965217,0.983790081,0.3857050538,0.4608663244,0.9936280992,0.9271466507,0.9998741684,0.8516303653
2255,12.4,"Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly. You then sort the smallest case, then work your way up, sorting each until they are all sorted.",1,4,2.5,0.01947832108,0.9805216789,0.9751452319,0.2929652333,0.3794735657,0.9953393351,0.9467121262,0.9998160049,0.7830490836
2256,12.4,"goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.",0,3.75,1.875,0.01382708549,0.9861729145,0.9823563334,0.3650319576,0.4427226584,0.9855401644,0.8346729668,0.9998858069,0.8653535212
2257,12.4,selection sort finds the lowest element in the data set and places it behind the pivot point.,5,3.75,4.375,0.02011758089,0.9798824191,0.9743295223,0.4644349217,0.5299633003,0.9939258187,0.9305506371,0.9998329577,0.8030384088
2258,12.4,"Selection sort iterates through the array one element at a time, seeking the least value from the right and replacing the current value with it.",5,3.75,4.375,0.01344174147,0.9865582585,0.9828480409,0.4355431795,0.5046065701,0.9952353763,0.9455235091,0.9998677742,0.8440908993
2259,12.4,"Selection sort traverses an unsorted array looking for the smallest value, when it's found it is put at the beginning of the unsorted array.  Performed several times, this will output a sorted array.",5,5,5,0.01682591438,0.9831740856,0.9785297615,0.403867662,0.4768066699,0.9971216128,0.9670898598,0.9998260607,0.7949060211
2260,12.4,it runs through the list and finds the smallest (or largest) value and puts it at the appropriate position,5,3.75,4.375,0.01307868958,0.9869213104,0.9833113031,0.4425967336,0.5107970956,0.9918823027,0.9071860259,0.9998312292,0.8010003227
2261,12.4,"pick a number, and set all values less than that number to the left, while all numbers on the right of that number is larger.",1,5,3,0.02109920979,0.9789007902,0.9730769421,0.309540838,0.3940210836,0.9898496956,0.8839461418,0.9998336091,0.8038064011
2262,12.4,It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.,5,3.75,4.375,0.02326416969,0.9767358303,0.9703144055,0.3690414131,0.446241542,0.9947567797,0.9400514589,0.9998544354,0.8283629481
2263,12.4,"by selecting the first object and comparing it with the next objects to find one that is smaller, if it does it switches the two.  then it comes back the other way and sees if the objects previous to the last one is greater, if it does it switches them.  it does this while decreasing the range it looks at until it finishes in the middle.",1,3.75,2.375,0.01410728693,0.9858927131,0.9819987902,0.4471713901,0.5148120259,0.9929689304,0.9196100207,0.9998935643,0.8745003789
2264,12.4,"Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.",5,3.75,4.375,0.01748323441,0.9825167656,0.9776910066,0.4064856172,0.4791043086,0.9932817348,0.9231864813,0.9998301705,0.7997519423
2265,12.4,"selection sort works by pulling all of the values off to the side, leaving one value in the list.  It will then insert a value into the list.  if the value is bigger it will go to the right, if smaller if will go to the left.",1,3.75,2.375,0.0170045495,0.9829954505,0.9783018192,0.3377707303,0.4187969435,0.9929983262,0.9199461192,0.9999110862,0.8951606064
2266,12.4,selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization,5,3.75,4.375,0.02290737629,0.9770926237,0.9707696817,0.3298176825,0.4118169808,0.9938852842,0.9300871842,0.9998788091,0.8571022829
2267,12.4,"Selection sort sorts an array one element at at time. It first finds the element with the smallest key and puts it into the first location within its array or list, then finds the next smallest and puts it in the second location, and so on.",5,5,5,0.006176114082,0.9938238859,0.992119142,0.595202148,0.6447306702,0.9960469258,0.9548023891,0.9998880872,0.8680422681
2268,12.4,"select an element compare it with 2nd element if it is greater, swap it ",1,4.5,2.75,0.029743433,0.970256567,0.9620467224,0.3218639493,0.4048364164,0.992315476,0.9121387273,0.9998301942,0.7997798941
2269,12.4,"it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same...",5,4.25,4.625,0.01115530729,0.9888446927,0.9857655814,0.5623146892,0.6158671142,0.9968841399,0.964374705,0.9998500488,0.8231907257
2270,12.4,It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.,5,4.25,4.625,0.01159763336,0.9884023666,0.9852011636,0.4323071837,0.5017665105,0.9942312908,0.9340432631,0.9999027514,0.8853329757
2271,12.4,"selection sort is when you pick a data member and put it in a new array, then you pick another data member and put it in order with the new array, then pick another and insert it in the correct place in the new array, etc etc",1,5,3,0.016956985,0.983043015,0.9783625125,0.4501926005,0.51746358,0.9938752809,0.9299728112,0.9999078197,0.8913090473
2272,12.4,"it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.",5,3,4,0.01398777962,0.9860122204,0.9821512842,0.4523997009,0.5194006334,0.987241021,0.8541197703,0.9999361315,0.9246918313
2273,12.4,selection sort  iterates through the array one element @ a time searching for the right and replacing current value with it.,5,3,4,0.01880013943,0.9811998606,0.9760106068,0.3937253654,0.467905321,0.9912739262,0.9002301315,0.9998311769,0.8009386023
2274,12.5,A link list can grow to a infinite size as a array has a fixes size.,5,5,5,0.02055317163,0.9794468284,0.973773699,0.3585918546,0.4370705259,0.9929659419,0.9195758525,0.9999523529,0.9438186883
2275,12.5,The advantage of linked lists is that they are not limited in size like arrays.,5,5,5,0.02372574806,0.9762742519,0.9697254212,0.4111537337,0.4832012637,0.9929270248,0.9191308922,0.9999786694,0.9748488233
2276,12.5,link lists dont have a fixed size,5,5,5,0.03890573978,0.9610942602,0.9503554165,0.3291803896,0.411257663,0.9916765108,0.9048330973,0.9999515664,0.9428913113
2277,12.5,"Linked Lists can be of variable size, where arrays have fixed size.",5,5,5,0.01252943277,0.9874705672,0.9840121669,0.5426043868,0.5985684407,0.9940768382,0.9322773233,0.9999836664,0.980740909
2278,12.5,"Linked lists do not have a definite size. They can be as big or as small as needed, and they don't have to allocate extra memory for elements you don't need. Arrays size must be defined.",5,5,5,0.02169215679,0.9783078432,0.9723203287,0.3970970809,0.4708644947,0.993161265,0.9218090853,0.9999712095,0.9660527349
2279,12.5,"a linked list has a dynamic size , but an array only has a fixed size and takes allot of extra operations to increase its size.",5,5,5,0.01860994101,0.981390059,0.9762533041,0.4314779341,0.5010387226,0.9906056704,0.8925896059,0.9999790604,0.9753099189
2280,12.5,You do not have to predetermine your list size as you do with arrays. Linked list have the ability to be as large as you want them adding memory as needed.,5,5,5,0.02498579025,0.9750142097,0.9681175796,0.318367362,0.4017676496,0.9902693218,0.8887439528,0.9999584733,0.9510353027
2281,12.5,The main advantage to a linked list is that it can have it's size adjusted during runtime.,5,5,5,0.02449160814,0.9755083919,0.968748167,0.3547195196,0.4336719855,0.9923711698,0.912775505,0.9999605416,0.9534741185
2282,12.5,Linked lists are able to grow in size. So elements can be added to the list.,5,5,5,0.01606351137,0.9839364886,0.9795026046,0.5424973965,0.598474541,0.9949149504,0.9418599089,0.999970777,0.9655427987
2283,12.5,"Linked lists are not confined to a specific size, and can have elements added and removed far easier. They are also easier to traverse.",4.5,5,4.75,0.01529598236,0.9847040176,0.9804819885,0.4376287162,0.5064369337,0.9948620021,0.9412545224,0.9999906297,0.9889513559
2284,12.5,There is no predetermined length,5,5,5,0.1190149784,0.8809850216,0.8481342581,0.05775360391,0.1730409537,0.9854691327,0.8338608234,0.9999395026,0.9286667458
2285,12.5,"Inserts into a linked list are far cheaper than an insert into an array. With an array, all items after the one being inserted must me shifted, with a linked list, only the pointers are replaced.",4,5,4.5,0.01632088423,0.9836791158,0.9791741912,0.4302630126,0.4999724513,0.9922785322,0.9117163298,0.9999732746,0.9684877135
2286,12.5,Linked lists may be dynamically grown.,5,5,5,0.03098654747,0.9690134525,0.9604604808,0.4544341862,0.5211861919,0.9918471714,0.9067843503,0.9999715548,0.9664599228
2287,12.5,"Linked lists are very dynamic in that they can change and be added/subtracted to very easily because they are not linear in memory.   Arrays are pre-specified in size to be cast over a certain amount of disk space.  This makes insertion into Arrays difficult because all elements must be shifted, and if you reach the end of the array, you are done even if you have more data to input.  Linked Lists do not run into these problems.",5,5,5,0.01838260889,0.9816173911,0.9765433849,0.5317697525,0.5890594641,0.990447207,0.8907778092,0.9999758792,0.9715588586
2288,12.5,"linked lists have an indefinite size, whereas arrays are a specific size.",5,5,5,0.01553964615,0.9844603539,0.9801710683,0.3847154081,0.4599977655,0.9953712929,0.9470775162,0.9999766409,0.9724570487
2289,12.5,"Linked lists have no predefined length, and thus you can have virtually unlimited items in that list.",5,5,5,0.02781355381,0.9721864462,0.9645092909,0.4183082581,0.4894804054,0.9967286373,0.9625967609,0.9999770916,0.9729884647
2290,12.5,"They grow dynamically, unlike the fixed size array",5,5,5,0.03441143036,0.9655885696,0.9560902546,0.2216742039,0.3169052588,0.993555023,0.9263111312,0.9999792842,0.9755737929
2291,12.5,"you can add as many nodes as you like without having to specify a list size, if an array gets too big you have to copy its entire contents to another larger array to get more room",5,5,5,0.020011127,0.979988873,0.9744653598,0.227247417,0.3217965686,0.9909029213,0.8959882342,0.9999649941,0.9587241047
2292,12.5,Linkded list does not have a fixed size. Arrays have a fixed size.,5,5,5,0.02178966999,0.97821033,0.9721958997,0.3587297499,0.4371915492,0.9917981295,0.9062236286,0.9999355929,0.9240568417
2293,12.5,"Linked lists have a dynamic size, where as arrays have a static size.",5,5,5,0.01522511244,0.9847748876,0.9805724202,0.5057398677,0.5662144325,0.9963210558,0.9579366637,0.999967533,0.9617177898
2294,12.5,linked lists do not have a memory constraint other than total memory,5,5,5,0.04470080137,0.9552991986,0.9429607898,0.2511619925,0.3427851069,0.9944501449,0.9365455389,0.9999078022,0.8912883873
2295,12.5,"The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list, whereas arrays may waste memory for small data sets, and run out of space for large data sets.",5,5,5,0.02037012577,0.9796298742,0.9740072694,0.3616080582,0.4397176858,0.9908299719,0.8951541652,0.9999869534,0.9846166007
2296,12.5,"Array have fixed size, in Link List are flexible for adding or deleting an element. ",5,5,5,0.01689708233,0.9831029177,0.9784389497,0.4557584524,0.5223484292,0.9958496272,0.9525465687,0.9999662013,0.9601474828
2297,12.5,they are resizeable,5,5,5,0.09303027391,0.9069697261,0.8812913152,0.1168671474,0.2249217353,0.9799806039,0.7711075388,0.9999566298,0.9488616411
2298,12.5,Linked lists can be dynamically allocated and their size can change as needed.,5,5,5,0.02085316181,0.9791468382,0.9733909048,0.47741732,0.5413572538,0.9930860576,0.9209491993,0.9999777171,0.9737259076
2299,12.5,"linked lists do not have to have a specified size, they are easier to add to and remove from",5,5,5,0.01920127869,0.9807987213,0.9754987442,0.3140674531,0.3979938505,0.9962423485,0.9570367608,0.9999166125,0.9016767442
2300,12.5,"they dont have a fixed size, no shiftnig needs to be done for insertion/deletion.",5,5,5,0.03773641586,0.9622635841,0.9518474996,0.2144757658,0.3105875764,0.995844468,0.9524875807,0.9999806688,0.9772062952
2301,12.5,linked list many be dynamically grown. It has not limit,5,5,5,0.03148263693,0.9685173631,0.9598274598,0.4560885727,0.5226381581,0.9933530444,0.9240018018,0.9999548622,0.9467774409
2302,12.6,A data structure in C++ where the the first element in the queue is the first element taken out of the queue.,5,5,5,0.01429671049,0.9857032895,0.9817570815,0.6718076468,0.7119632014,0.9972560415,0.9686268546,0.9999736852,0.9689719472
2303,12.6,A queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior.,5,5,5,0.03374278545,0.9662572145,0.9569434602,0.5339965224,0.5910137805,0.9953935919,0.9473324728,0.9999867952,0.9844301151
2304,12.6,First in first out.,4,5,4.5,0.06100291014,0.9389970899,0.922158939,0.3605840504,0.4388189692,0.9837051366,0.8136921132,0.9998495888,0.8226482589
2305,12.6,"A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.",5,5,5,0.01224774122,0.9877522588,0.9843716116,0.6067345738,0.6548520609,0.9947183109,0.9396116238,0.9999775275,0.9735023899
2306,12.6,"A data structure that implements first in, first out. The element that has been there the longest is the first to get served.",5,5,5,0.01812529564,0.9818747044,0.9768717224,0.5395611525,0.5958975573,0.9960439242,0.9547680698,0.9999593434,0.9520613004
2307,12.6,a data structure that inserts elements at the end of it and removes elements from the front.,5,5,5,0.01872849464,0.9812715054,0.9761020271,0.4709525704,0.5356834904,0.9963552729,0.9583278857,0.999991,0.9893880447
2308,12.6,A queue is a collection of elements with the characteristics of first in first out (FIFO).  The first item in is the first item out.  All additional items are added to the end of the list.,5,5,5,0.01485025883,0.9851497412,0.9810507417,0.5574236512,0.611574513,0.9922983374,0.9119427733,0.999976941,0.9728108845
2309,12.6,"A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it's end, and data taken is always from the beginning.",5,5,5,0.01872980595,0.9812701941,0.9761003539,0.4289227426,0.4987961683,0.9916945397,0.9050392311,0.9999830176,0.9799758028
2310,12.6,It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions.,1.5,5,3.25,0.01913177967,0.9808682203,0.9755874264,0.4375436604,0.5063622847,0.9939147176,0.9304237117,0.9999871607,0.9848610283
2311,12.6,A queue is a data type that operates under a FILO (First In Last Out) method. This means that the first element inserted into the queue is the first element removed.,5,2.5,3.75,0.01120382547,0.9887961745,0.9857036711,0.6519576907,0.6945419613,0.989777094,0.883116049,0.9999806037,0.9771295627
2312,12.6,like a linked list except it is first in last out,0,5,2.5,0.02715700865,0.9728429914,0.965347057,0.1325360239,0.2386734665,0.9928563128,0.9183224037,0.9998206759,0.7885566963
2313,12.6,A queue is like a stack except it follows FIFO (First in first out) .,5,5,5,0.02243149281,0.9775685072,0.9713769196,0.4581543505,0.5244511803,0.9939458646,0.9307798327,0.9999458322,0.9361301002
2314,12.6,A queue is a data structure where the first node in is the first node out.,5,5,5,0.01339310408,0.9866068959,0.9829101033,0.5373086333,0.5939206423,0.9963464961,0.9582275361,0.9999490072,0.9398738191
2315,12.6,A queue is a First in First out data structure much like a line for a movie theatre.  The first object in line is the first object to be handled or enacted upon.,5,5,5,0.01444125175,0.9855587482,0.9815726436,0.4889218807,0.5514541888,0.9967616218,0.9629738905,0.9999669082,0.9609809944
2316,12.6,"its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.",5,5,5,0.02068698406,0.9793130159,0.9736029512,0.251458168,0.3430450442,0.9911667816,0.8990050897,0.9999157943,0.9007120241
2317,12.6,"a first in first out list of items, like if you put 5, 4, 3, 2, and 1 in the queue it will when you dequeue items remove the items in the same order as put in, so thus it will put out, 5, 4, 3, 2, and 1 in that exact order.",5,5,5,0.02268326283,0.9773167372,0.9710556555,0.2177130729,0.3134287869,0.9831911471,0.8078153957,0.9998768028,0.854736723
2318,12.6,"A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list",5,5,5,0.02208995819,0.9779100418,0.9718127253,0.3013258278,0.3868112104,0.9892481636,0.8770685052,0.9999479886,0.9386726795
2319,12.6,"a list of objects that follow the rule first in first out, essentially a linked list that goes in order of the first object in the list is the first to be taken off.",5,5,5,0.0136269331,0.9863730669,0.9826117323,0.2866649926,0.3739441829,0.9919211245,0.9076298959,0.9999264272,0.9132494387
2320,12.6,A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.,5,5,5,0.01409220695,0.985907793,0.9820180325,0.5508649945,0.6058183323,0.9964859845,0.9598223811,0.9999809028,0.9774822613
2321,12.6,"It is a ""first in first out"" data structure.  It can be implemented with either a linked list or an array.",5,5,5,0.01878941059,0.9812105894,0.976024297,0.4237671494,0.4942713811,0.996764732,0.9630094508,0.9999372773,0.9260429457
2322,12.6,an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.,5,5,5,0.01441526413,0.9855847359,0.9816058045,0.5013077855,0.5623246321,0.9930262232,0.92026508,0.9999276586,0.9147013643
2323,12.6,"A queue is a linear, first-in first-out data structure. Data must be accessed in the same order it was put into the queue, so only the oldest item in the queue is accessible at any time. Main functions defined are enqueue and dequeue.",5,5,5,0.01435112953,0.9856488705,0.9816876417,0.6633796692,0.7045664182,0.9870058126,0.8514305067,0.9999851993,0.9825482872
2324,12.6,"Queue is a buffer, it follows the rule of First In and First out. Queue is very useful in computer science for scheduleing .",5,5,5,0.01073861122,0.9892613888,0.9862972949,0.4954563677,0.557189157,0.9863714741,0.8441777749,0.9999676985,0.9619129455
2325,12.6,a queue is a set of elements where the first element inserted is the first element to be removed,5,5,5,0.02867364883,0.9713263512,0.9634117906,0.3998759985,0.4733034013,0.9937562724,0.9286121229,0.9999717862,0.9667327326
2326,12.6,Is a list of items where the the user only has access to the first element and each new element is added at the end.,5,5,5,0.02124869823,0.9787513018,0.9728861916,0.3467149436,0.4266467992,0.9941129431,0.9326901305,0.9998955796,0.8768766665
2327,12.6,"a queue is a list of data that follows the fifo principle, an example of this would be when you get into a line at a movie theater...the first one there gets to buy a ticket first",5,5,5,0.01741188765,0.9825881124,0.9777820467,0.3946258426,0.4686956215,0.9912156013,0.8995632714,0.9999569614,0.9492526019
2328,12.6,"A queue is a data structure that holds a set of objects, which has a FIFO (first in first out) priority.",5,5,5,0.0127415061,0.9872584939,0.9837415567,0.5464513302,0.6019446962,0.9947159157,0.9395842388,0.9999544212,0.9462574847
2329,12.6,like a linked list expect first in last out,0,2.5,1.25,0.02586197853,0.9741380215,0.9669995441,0.1613095701,0.2639264624,0.9920783628,0.9094276852,0.9999013526,0.883683614
2330,12.7,push and pop,5,5,5,0,1,1,1,1,1,1,1,1
2331,12.7,"Pop, which removes the head, or least recently inserted node from the stack. Push, which inserts a new node at the head of the stack.",5,5,5,0.06687682867,0.9331231713,0.9146636891,0.1425001621,0.2474184554,0.9629377689,0.5762476916,0.9998865918,0.8662789867
2332,12.7,Push and pop,5,5,5,0,1,1,0.8544692993,0.8722755216,0.991316008,0.9007112751,0.9999329414,0.9209303338
2333,12.7,The Push function and the Pop function.,5,5,5,0.0576441288,0.9423558712,0.9264448181,0.2988101244,0.3846033127,0.9768995444,0.7358801379,0.9998338242,0.8040601137
2334,12.7,push and pop,5,5,5,0,1,1,1,1,1,1,1,1
2335,12.7,push - puts an element on the stack pop- takes an element off the stack,5,5,5,0.09552520514,0.9044747949,0.8781077278,0.3384284675,0.4193742042,0.9791794076,0.7619470327,0.9998419075,0.8135911511
2336,12.7,Push  and pop.,5,5,5,0.02979123592,0.9702087641,0.9619857248,0.704518795,0.740672019,0.9920781303,0.9094250268,0.9999297962,0.9172218629
2337,12.7,Push and Pop,5,5,5,0,1,1,0.6797447801,0.7189291969,0.9866794547,0.8476990819,0.9999181392,0.9034769076
2338,12.7,push and pop.,5,5,5,0.02979123592,0.9702087641,0.9619857248,0.8062185049,0.8299283913,0.9978576599,0.9755054795,0.9999811225,0.9777412843
2339,12.7,"Push and Pop. Push adds an element to the stack, while Pop removes the top element from a stack.",5,5,5,0.05569088459,0.9443091154,0.9289372009,0.3930148184,0.4672817121,0.9725589628,0.6862519466,0.9999233913,0.909669703
2340,12.7,pop and push,5,5,5,0,1,1,1,1,0.993155412,0.9217421646,0.9999638572,0.9573835466
2341,12.7,"push,pop,search,isEmpty",4,5,4.5,0.05627369881,0.9437263012,0.9281935171,0.6280725002,0.6735792126,0.9849894623,0.8283764948,0.9998721591,0.849261232
2342,12.7,push and pop,5,5,5,0,1,1,1,1,1,1,1,1
2343,12.7,"Push, Pop, isEmpty, isFull  Maybe List to show all elements or an operation to count how many elements in the stack.",4.5,5,4.75,0.06250292063,0.9374970794,0.9202448924,0.1772019118,0.277874317,0.9638049354,0.5861624697,0.9999079673,0.8914831444
2344,12.7,"pop, push",5,5,5,0.02769231796,0.972307682,0.9646639904,0.9317031503,0.9400595238,0.9891439451,0.8758769187,0.9998960666,0.877450833
2345,12.7,"isempty, push and pop, along with usually, ",5,5,5,0.05824130774,0.9417586923,0.9256828046,0.5487887263,0.6039961032,0.9769653786,0.7366328554,0.9999237419,0.9100831579
2346,12.7,push and pop,5,5,5,0,1,1,1,1,1,1,1,1
2347,12.7,push and pop. push puts objects into the stack and pop takes them out following the first in last out rule.,5,5,5,0.04302930832,0.9569706917,0.945093652,0.590939045,0.6409891737,0.9786313237,0.755680496,0.9999265389,0.9133810721
2348,12.7,"The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.",5,5,5,0.06075036526,0.9392496347,0.9224811917,0.4281858504,0.4981494376,0.9745317631,0.7088080278,0.9999044858,0.8873780285
2349,12.7,push and pop,5,5,5,0,1,1,1,1,1,1,1,1
2350,12.7,"push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack",5,5,5,0.0738927722,0.9261072278,0.9057111901,0.3253178596,0.407867728,0.976230802,0.7282340478,0.9999100827,0.8939774217
2351,12.7,"the main functions defined for a stack are push, which puts an element on the top of the stack, and pop, which removes an item from the top.",5,5,5,0.07341063023,0.9265893698,0.906326414,0.2963633537,0.3824559135,0.9701594421,0.6588169437,0.9999129633,0.8973739376
2352,12.7,Push() Pop() Full() IsEmpty(),4.5,5,4.75,0.1949641109,0.8050358891,0.7512214871,0.1809550077,0.2811682076,0.9572070682,0.510725526,0.9997808764,0.7416286581
2353,12.7,pop and push to remove an element and to insert an element,5,5,5,0.06524151564,0.9347584844,0.9167503847,0.5089532137,0.5690346137,0.9889776816,0.8739759398,0.9999186388,0.9040660251
2354,12.7,"Push, Pop",5,5,5,0.02769237757,0.9723076224,0.9646639144,0.6164931059,0.6634166002,0.9758922135,0.724362785,0.9998090668,0.7748683212
2355,12.7,push and pop,5,5,5,0,1,1,1,1,1,1,1,1
2356,12.7,push - Add an element to the top of the stack pop - remove the top element from the stack,5,5,5,0.0879663229,0.9120336771,0.8877530285,0.3633728921,0.4412665857,0.9773217776,0.7407077552,0.9998000585,0.7642465299
2357,12.7,push and pop,5,5,5,0,1,1,1,1,1,1,1,1
2358,12.8,When you traverse a tree of any size you will visit each node three times.  Its on the order of 3n or O(n) running time.,5,3,4,0.01906841993,0.9809315801,0.9756682749,0.4426151812,0.5108132861,0.990710245,0.8937852632,0.9998958414,0.8771853711
2359,12.8,"The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left, then bottom, then right sides.",5,5,5,0.01195198298,0.988048017,0.9847490056,0.5251122713,0.5832165505,0.9900203149,0.8858969239,0.9999123959,0.8967049764
2360,12.8,Where you visit the in order according to its data value.,2.5,3,2.75,0.02955710888,0.9704428911,0.962284476,0.1861598492,0.2857362174,0.9839662142,0.8166771524,0.9998730294,0.8502873847
2361,12.8,"It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm. ",0,3.75,1.875,0.02245765924,0.9775423408,0.9713435307,0.2491332591,0.3410045965,0.9921790011,0.9105783371,0.9998349077,0.8053376761
2362,12.8,"Start from the root, circle around the _whole_ ""tree"", naming each node as you see it.",5,4.25,4.625,0.01802712679,0.9819728732,0.9769969879,0.5032863617,0.5640611221,0.9914598014,0.9023553419,0.9999184577,0.9038524804
2363,12.8,it is where you visit the parent then you vistit the children,0,3,1.5,0.04494011402,0.955059886,0.9426554217,0.08977621794,0.2011454818,0.9793364793,0.7637429178,0.9998701229,0.8468603111
2364,12.8,"To start from the root , traveling left and visiting ever child along the way till you return to the root from the right.",4,4.25,4.125,0.01466691494,0.9853330851,0.9812846925,0.5167156458,0.5758472834,0.9914967217,0.9027774714,0.9999162895,0.9012959653
2365,12.8,"Traversing a tree down to it's terminal child and then all of it's siblings, then it traverses up the terminal child's parent and all of it's siblings (repeating the first step if those siblings have children) until the root node has been visited.",4,4.25,4.125,0.03047066927,0.9695293307,0.9611187528,0.1944038272,0.2929715141,0.9906185729,0.8927371271,0.9998792947,0.8576748602
2366,12.8,The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node.,1.5,3.75,2.625,0.02453142405,0.975468576,0.968697361,0.2535736263,0.3449016683,0.987558945,0.857754765,0.9998776906,0.8557834972
2367,12.8,"You travel the outside edge of the tree, clockwise, while naming each node.",4.5,3,3.75,0.01936757565,0.9806324244,0.9752865456,0.4125449359,0.4844222472,0.991888944,0.9072619594,0.9999039408,0.8867354602
2368,12.8,children to root,0,3.75,1.875,0.1283831596,0.8716168404,0.836180252,0.1171637401,0.2251820388,0.9667847488,0.62023227,0.9998475564,0.8202518724
2369,12.8,go to the bottom of the left sub tree and visit the parent and then its children,2,3.75,2.875,0.02418190241,0.9758180976,0.9691433583,0.2047759444,0.3020745642,0.9801763395,0.7733454885,0.9999153922,0.9002378807
2370,12.8,The Euler tour traverses through the tree in a rubber-band style shape.,3.5,3,3.25,0.03524428606,0.9647557139,0.9550275123,0.1669427603,0.2688704109,0.985473289,0.8339083451,0.9998474687,0.820148525
2371,12.8,"The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first, cupping in to visit the parents of children nodes.  It allows for each node to be visited from the left, the right and the bottom.  The Euler tour first progresses to a left child if there is one, then progresses to it's parent, then it's next child, then it's parent's parent.",5,3.75,4.375,0.01230812073,0.9876918793,0.9842945661,0.450401634,0.5176470374,0.990205639,0.8880158324,0.9999146802,0.8993983422
2372,12.8,it runs through the parents and the children in order,2.5,3,2.75,0.04800975323,0.9519902468,0.9387384942,0.06647706032,0.1806970628,0.9851200069,0.8298690813,0.9998949875,0.8761784404
2373,12.8,"it starts node on the left of the root and then proceeds to visits each node in a left to right order, visits the root, and then proceeds to repeat the previous step on the right side of the tree.",2.5,3.75,3.125,0.01049602032,0.9895039797,0.9866068462,0.4818931222,0.545285425,0.9919350681,0.907789321,0.9999078084,0.8912957539
2374,12.8,"Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.",3.5,5,4.25,0.02461922169,0.9753807783,0.9685853292,0.3224322796,0.4053352093,0.9927715666,0.917353455,0.9999069088,0.8902349762
2375,12.8,"has preorder, in order, and postorder of a tree.  preorder = puts the parent node in front of the child node(s).  in order = puts the parent node between the left child and right child node(s).  postorder = puts the parent node after the child node(s).",2.5,3.75,3.125,0.01967126131,0.9803287387,0.974899036,0.36393556,0.4417604091,0.9870915318,0.8524105801,0.9999270035,0.9139288757
2376,12.8,"The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal. ",2.5,5,3.75,0.01430165768,0.9856983423,0.9817507688,0.4914436638,0.5536674223,0.9928860331,0.9186622124,0.9998960298,0.8774074785
2377,12.8,"An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree.  Each element in the tree is visited 3 times.  From the left, from the bottom and from the right.",5,5,5,0.007056057453,0.9929439425,0.9909963147,0.7021927238,0.7386305512,0.9936102641,0.9269427321,0.9998955906,0.8768895403
2378,12.8,Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.,4,3.75,3.875,0.02296358347,0.9770364165,0.9706979601,0.2821302414,0.3699642754,0.9867045507,0.8479860182,0.9998569454,0.8313225952
2379,12.8,"The Euler tour visits every node in a tree, starting with the root and working around the tree counterclockwise. in-order, post-order, and pre-order traversals can be seen as variations of the Euler tour traversal.",4,4.5,4.25,0.02522397041,0.9747760296,0.9678136565,0.3561491966,0.4349267362,0.9920801963,0.9094486489,0.9998698054,0.8464858885
2380,12.8,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
2381,12.8,to traverse going down to the left then go to the right of last children and back to the top.. kind of like going around the tree,5,4.5,4.75,0.02509844303,0.974901557,0.9679738322,0.3440058529,0.4242691758,0.9872774549,0.8545363383,0.9998874053,0.8672382217
2382,12.8,"You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.",5,5,5,0.01358497143,0.9864150286,0.9826652764,0.5538321733,0.6084224658,0.9911661767,0.8989981738,0.9999257766,0.9124822921
2383,12.8,"the euler tour is a way to traverse a tree where you come into contact with each node three times, from the left, from the right, and from the bottom",5,5,5,0.007153987885,0.9928460121,0.9908713534,0.6591953039,0.7008940256,0.9934807182,0.9254615647,0.9999324465,0.9203468143
2384,12.8,traversing a tree level by level,0,3,1.5,0.08782398701,0.912176013,0.8879346523,0.1671248823,0.2690302496,0.978209422,0.7508566684,0.999854648,0.8286136424
2385,12.8,The Euler traversal through the tree in a rubber band style shape.,3.5,3,3.25,0.02791583538,0.9720841646,0.9643787773,0.113725625,0.2221645899,0.9865058885,0.8457146074,0.9998631298,0.8386146364
2386,12.9,"if root, set root to NULL else if deleting right leaf, set rightPtr of parent node to NULL else if deleting left leaf, set leftPtr of parent node to NULL else if deleting a left or right subtree child node, set the max leaf child in the left subtree as the new child node.",4.5,4,4.25,0.02112901211,0.9788709879,0.9730389138,0.3958579898,0.4697770109,0.9824015697,0.7987877357,0.999969376,0.9638908556
2387,12.9,"Traverse the tree and find the node, if the node has no children, simply delete it; otherwise set the node's data equal to the data of one of its children then set the pointer for that child to NULL.",3,3.75,3.375,0.02210193872,0.9778980613,0.9717974379,0.4805836082,0.5441361349,0.9937071225,0.9280501665,0.9999525821,0.9440889603
2388,12.9,first attaching the elements from the node to be deleting to alternate nodes and then deleting that node.    delete node;,3,3.75,3.375,0.03871357441,0.9612864256,0.9506006238,0.5804491639,0.6317827686,0.9862887222,0.843231628,0.9999598304,0.9526355795
2389,12.9,"If you delete a node from a tree, you have to link that nodes parents to the children of that node.",2.5,3.75,3.125,0.03026765585,0.9697323442,0.9613778025,0.500967741,0.5620261933,0.9879632163,0.8623770152,0.9999373638,0.9261448372
2390,12.9,"Must delete the information that the node contains (to free up memory/ ""garbage collect"") and also delete the pointer (in that node's ""parent"") that points to the node you wish to delete.",0.5,3,1.75,0.03434205055,0.9656579494,0.9561787847,0.4576947987,0.5240478563,0.9944340576,0.9363616035,0.9999578087,0.9502516687
2391,12.9,you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.,5,5,5,0.01426869631,0.9857313037,0.9817928283,0.6437736154,0.687359238,0.9861567451,0.8417226642,0.9999719964,0.9669805703
2392,12.9,"You traverse the tree till you find the node you are wanting to delete.  If the node has no children you delete it.  If the node has children, before you delete, you find the left-most of its children and attach it to the root then you can delete the node.",3.5,4.25,3.875,0.03018075228,0.9698192477,0.9614886933,0.4911413491,0.5534020969,0.9891231689,0.8756393731,0.9999567778,0.9490361516
2393,12.9,Link the to-be-deleted's left child to the to-be-deleted's parent's left child pointer.,3.5,5,4.25,0.07049846649,0.9295015335,0.9100423992,0.1855796278,0.2852269883,0.98106182,0.7834696609,0.9999501785,0.9412548937
2394,12.9,The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root. And delete the nodes and set the root to NULL.,0,3.75,1.875,0.01842910051,0.9815708995,0.9764840606,0.3999919593,0.4734051739,0.9832791143,0.8088211716,0.9999579769,0.9504500713
2395,12.9,You remove the element from the tree and move the next highest element from the left into its place.,5,3.75,4.375,0.01918083429,0.9808191657,0.9755248317,0.2887404561,0.3757657057,0.9873308935,0.8551473301,0.9998567111,0.8310463263
2396,12.9,delete node;,0,3,1.5,0.1717785001,0.8282214999,0.7808068387,0.4860633612,0.5489454197,0.9819431361,0.7935462186,0.9997115072,0.6598346465
2397,12.9,"the deletion of a node depends upon if it has children and if it is an AVL binary search tree. Assuming it is not an AVL tree, and the node being deleted has no children, you just set its pointer to null. If it has a left child or a right child exclusively, that child replaces the deleted node, if it has two children, the left most child of the right sub tree (or right most child of the left subtree)will replace it",5,5,5,0.02069121599,0.979308784,0.9735975512,0.4946194291,0.5564546209,0.9874585889,0.8566073395,0.9999545534,0.9464133889
2398,12.9,"If the node is a leaf, just set it's parent's pointer to null and delete it, if it has a single child, set the parent's pointer to the child and delete; if it has two children, set the node to one of the middle children and remove that child from its previous position as a leaf (rightmost child of the left subtree or leftmost child of the right subtree).",5,5,5,0.01991170645,0.9800882936,0.9745922227,0.4430495501,0.5111945083,0.9878647224,0.8612508815,0.9998737648,0.8511544787
2399,12.9,"In a binary search tree, you must first establish a proper replacement for the node you are about to delete, usually a child from the soon to be deleted node.  Once that replacement node has been found, you simply reassign it to where the node that is going to be deleted is.  After the deleted node has been usurped, you remove the deleted node from memory so it may be used again. ",4,3.75,3.875,0.02222967148,0.9777703285,0.971634448,0.5162547827,0.5754428086,0.988337611,0.8666576693,0.9999650408,0.9587791303
2400,12.9,It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.,3,3.75,3.375,0.02265626192,0.9773437381,0.9710901093,0.5376222134,0.5941958547,0.9862899291,0.8432454281,0.9999326898,0.9206337233
2401,12.9,"if the node has no children, delete it right away, otherwise, put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it's children get handled properly.",5,5,5,0.01701647043,0.9829835296,0.9782866078,0.5664894581,0.6195310847,0.9937719103,0.9287909196,0.9999736904,0.9689780362
2402,12.9,Create a temp Node  Set temp's values to the Node after head  or NULL in the case of only head Node in the list.   Set head equal to temp. Delete temp,0,3.75,1.875,0.02259737253,0.9774026275,0.9711652534,0.341088891,0.421709115,0.9854203878,0.8333034972,0.9998961112,0.8775034831
2403,12.9,"by searching down the tree until you find the node, and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree.",5,4.25,4.625,0.01419460773,0.9858053923,0.981887367,0.6975473762,0.7345535792,0.9885238198,0.8687866945,0.9999647817,0.9584736826
2404,12.9,"Set the nodes to NULL, where that it doesn't point to anything, and the use the DELETE opertator to clear space from memory.",0,3,1.5,0.02880591154,0.9711940885,0.9632430205,0.3165252209,0.4001509012,0.9952315749,0.9454800463,0.9999732372,0.9684436919
2405,12.9,"You must first traverse the tree to find the appropriate value.  Then you must make sure that the node is a leaf node.  If it is, then you can delete the pointer to that specific node.",1.5,3.75,2.625,0.02324336767,0.9767566323,0.9703409493,0.5155983567,0.5748666988,0.9836082387,0.8125842273,0.9999534854,0.9451540189
2406,12.9,"if the node is a leaf, you set it's parent's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.",5,5,5,0.01959043741,0.9804095626,0.9750021691,0.5451797843,0.6008287287,0.9834372841,0.8106296115,0.9999070397,0.8903894002
2407,12.9,"if the node is a leaf it can simply be deallocated/deleted from memory, and its parent's reference to it changed to NULL. If the node has a single child, the pointer to it should be made to point to its child before deleting the node. Should the node have two children, the easiest solution may be to copy the node's entire subtree to a new array or tree, delete the node and all descendants, then add the elements taken from the subtree back into the main tree.",4,4.5,4.25,0.02013725042,0.9798627496,0.9743044236,0.6132048368,0.6605306631,0.9882175462,0.8652849046,0.9999722155,0.9672389082
2408,12.9,not answered,0,0,0,0.1133880615,0.8866119385,0.8553143284,0.02473258413,0.1440601785,0.9741811535,0.7047993211,0.9995603538,0.4816078089
2409,12.9,you cannot delete a node because that can cause a node to have more than 2 children,0,2.5,1.25,0.03773117065,0.9622688293,0.9518541926,0.3264457881,0.4088576502,0.9799933334,0.7712530814,0.9999096197,0.8934314278
2410,12.9,"You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a  node, you replace the node with either of the children nodes.",3.5,3.75,3.625,0.01993858814,0.9800614119,0.9745579211,0.6039825082,0.6524367207,0.9907426212,0.8941554377,0.999948104,0.9388088183
2411,12.9,"to delete the node, you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller",3,5,4,0.02105039358,0.9789496064,0.9731392327,0.5165065527,0.5756637736,0.9906135046,0.8926791785,0.9999665167,0.9605194496
2412,12.9,"if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.",3.5,3.75,3.625,0.03074973822,0.9692502618,0.9607626547,0.3749911189,0.4514632793,0.9850629725,0.8292169769,0.9998883777,0.8683847487
2413,12.9,pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place,2,3.75,2.875,0.02687388659,0.9731261134,0.965708327,0.4332251251,0.5025721383,0.9840996692,0.8182030149,0.9998756613,0.8533906547
2414,12.11,Log(n) where n is the number of nodes.,4.5,5,4.75,0.05266469717,0.9473353028,0.9327986828,0.2668002248,0.3565099433,0.9799232808,0.7704521331,0.9999069489,0.890282357
2415,12.11,log(n) steps,4.5,5,4.75,0.1646521091,0.8353478909,0.7899002711,0.1148638055,0.2231635098,0.9796036919,0.7667981018,0.9998236912,0.7921121009
2416,12.11,The number of levels and the height of the tree,5,5,5,0.02043807507,0.9795619249,0.9739205646,0.6604719162,0.7020144396,0.9951183768,0.9441857913,0.9999234055,0.909686472
2417,12.11,It is the same as the height of the tree.,5,5,5,0.01548844576,0.9845115542,0.980236401,0.7786024809,0.8056912905,0.9948786995,0.9414454325,0.9999629725,0.9563404297
2418,12.11,"Given n elements, it would take n/2 steps to find the search criteria.",0,3,1.5,0.06385320425,0.9361467957,0.9185219006,0.141422227,0.2464724097,0.9859617748,0.8394934644,0.9999197011,0.9053185479
2419,12.11,log n,4.5,5,4.75,0.234557271,0.765442729,0.7006997401,0.08872189373,0.2002201581,0.9517133338,0.4479127229,0.9997739644,0.7334785933
2420,12.11,Depends on the location of the node you are looking for. If it is the root it is one step.  else If it is smaller than the current you are on node you go to the left.  If it is larger than the current node you are on go to the right.,0,3.75,1.875,0.04106301069,0.9589369893,0.9476026911,0.3190798461,0.4023929586,0.9835047426,0.8114009007,0.9997964783,0.7600250893
2421,12.11,2^n where n is the # of levels the binary tree has,0,3.75,1.875,0.05055886507,0.9494411349,0.9354857711,0.3306898773,0.4125824592,0.992535208,0.914651041,0.9999340294,0.9222132793
2422,12.11,The number of steps to search a node is the function n-1.,2.5,4,3.25,0.0463039279,0.9536960721,0.940915165,0.2827454805,0.3705042377,0.9935113168,0.9258114149,0.9999356238,0.9240932264
2423,12.11,"It would take n/2 elements, given n.",0,3,1.5,0.08345711231,0.9165428877,0.8935068809,0.2006707937,0.2984716939,0.989676508,0.8819659951,0.9999014523,0.8838011505
2424,12.11,log(n),4.5,5,4.75,0.1817073226,0.8182926774,0.7681374419,0.09704979509,0.2075291098,0.9743966247,0.7072629183,0.9998137991,0.7804482872
2425,12.11,O(log n),4.5,5,4.75,0.1532562375,0.8467437625,0.804441655,0.1015593857,0.2114869352,0.9835749515,0.812203637,0.9998689648,0.8454947877
2426,12.11,O( Log (n) ),4.5,5,4.75,0.1711801887,0.8288198113,0.7815702973,0.09286173433,0.2038534738,0.9839983429,0.8170444974,0.9998569112,0.8312822341
2427,12.11,"If the binary search tree is constructed efficiently, best case scenario is O(log n) time.  Where n is the number of items in the tree.  If the binary search tree is constructed poorly, with for instance the root of the tree being 1, and progressing downwards and to the right its children are each more than the last: you have a one-way linear linked list.  That worse case scenario would be a full traversal at O(n) time. Where n is the number of items in the tree.",5,5,5,0.03082364798,0.969176352,0.9606683442,0.5395048857,0.595848175,0.9637536528,0.585576129,0.9999421929,0.9318389964
2428,12.11,"N, n being the number of nodes.",2.5,5,3.75,0.04760581255,0.9523941875,0.9392539315,0.3161198199,0.3997951025,0.9826869868,0.8020510614,0.9999259142,0.9126445194
2429,12.11,"depending on the way that the tree is ordered, it could be anywhere between log(n) and N steps.",5,5,5,0.04363542795,0.956364572,0.9443202298,0.3311346769,0.412972836,0.987119541,0.8527308244,0.9999364886,0.9251128993
2430,12.11,log(n),4.5,5,4.75,0.1817073226,0.8182926774,0.7681374419,0.09704979509,0.2075291098,0.9743966247,0.7072629183,0.9998137991,0.7804482872
2431,12.11,"worst case scenario = the number of levels of the tree, ie: the node at the farthest position from the root node.  best case = 1 step if its the root node.",5,5,5,0.03295773268,0.9670422673,0.9579452049,0.4458279908,0.5136329965,0.9827970762,0.8033097722,0.9999300233,0.917489563
2432,12.11,3 steps at most.  There are 3 cases.,0,3,1.5,0.07257127762,0.9274287224,0.9073974465,0.4066956341,0.4792886292,0.9929833093,0.9197744228,0.9999323208,0.9201986447
2433,12.11,log(n)    where n equals the total number of nodes in the tree.,4.5,5,4.75,0.04573887587,0.9542611241,0.9416361838,0.3783767521,0.4544346677,0.9866575077,0.8474481498,0.9999440962,0.9340830963
2434,12.11,the same number of steps as the number of levels or generations in the tree,5,5,5,0.02867841721,0.9713215828,0.9634057061,0.3117750287,0.3959819127,0.9925286859,0.9145764709,0.999932732,0.9206834433
2435,12.11,to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree.,5,5,5,0.03013551235,0.9698644876,0.9615464204,0.4325483739,0.5019781901,0.9919995811,0.9085269328,0.9999335829,0.9216867944
2436,12.11,"three steps visit the root node, then go to right subtree, after visiting right subtree visit left subtree",0,4.5,2.25,0.07116383314,0.9288361669,0.9091933767,0.104517892,0.2140834573,0.9855571054,0.8348666626,0.9999197072,0.9053258139
2437,12.11,log n,4.5,5,4.75,0.234557271,0.765442729,0.7006997401,0.08872189373,0.2002201581,0.9517133338,0.4479127229,0.9997739644,0.7334785933
2438,12.11,( n(n-1) ) / 2,0,3,1.5,0.2127776146,0.7872223854,0.7284910628,0.01245038304,0.1332807503,0.985930263,0.8391331733,0.9998853212,0.8647808521
2439,12.11,2n-1,0,4.75,2.375,0.6612267196,0.3387732804,0.1562600972,-0.1113791466,0.02460222405,0.9703976515,0.6615405193,0.999507584,0.4193863023
2440,12.11,"it takes at most h steps, where h is the height of the tree.",5,5,5,0.02876502275,0.9712349772,0.9632951954,0.5856941342,0.6363859973,0.9871415403,0.8529823541,0.9999356973,0.9241799104
2441,12.11,it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node,0,3,1.5,0.0454493165,0.9545506835,0.942005668,0.2109193653,0.3074663147,0.9899325427,0.8848933766,0.9999315518,0.9192918887
,,,,,,,,,,,,,,
Max,,,5,5,5,0.7836854905,1,1,1,1,1,1,1,1
Min,,,0,0,0,0,0.2163145095,0,-0.1394111961,0,0.9125379841,0,0.9991519044,0
Mean,,,3.923449186,4.406731192,4.165090189,0.04608587345,0.9539141266,0.9411934074,0.4489331272,0.516358208,0.9893280522,0.8779819142,0.9999276554,0.9146976206
Standard deviation,,,1.518906691,0.9422945504,1.107382329,0.05740064412,0.05740064418,0.07324449014,0.2135606821,0.1874307387,0.007837878402,0.08961465528,0.00007634561867,0.09002005707
Median,,,5,5,4.5,0.02779108286,0.9722089171,0.9645379642,0.4436374903,0.5117105119,0.9909170053,0.8961492643,0.9999524009,0.9438753109